From 2983485093a06e39ee6925f8c20221ce76305c92 Mon Sep 17 00:00:00 2001
From: Byteflux <byte@byteflux.net>
Date: Sun, 24 Sep 2017 17:08:31 -0400
Subject: [PATCH] Generator Settings


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 2026b83..188a276 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -147,4 +147,30 @@ public class PaperWorldConfig {
         disableEndCredits = getBoolean("game-mechanics.disable-end-credits", false);
         log("End credits disabled: " + disableEndCredits);
     }
+
+    public boolean generateCanyon;
+    public boolean generateCaves;
+    public boolean generateDungeon;
+    public boolean generateFortress;
+    public boolean generateMansion;
+    public boolean generateMineshaft;
+    public boolean generateMonument;
+    public boolean generateStronghold;
+    public boolean generateTemple;
+    public boolean generateVillage;
+    public boolean generateFlatBedrock;
+
+    private void generatorSettings() {
+        generateCanyon = getBoolean("generator-settings.canyon", true);
+        generateCaves = getBoolean("generator-settings.caves", true);
+        generateDungeon = getBoolean("generator-settings.dungeon", true);
+        generateFortress = getBoolean("generator-settings.fortress", true);
+        generateMansion = getBoolean("generator-settings.mansion", true);
+        generateMineshaft = getBoolean("generator-settings.mineshaft", true);
+        generateMonument = getBoolean("generator-settings.monument", true);
+        generateStronghold = getBoolean("generator-settings.stronghold", true);
+        generateTemple = getBoolean("generator-settings.temple", true);
+        generateVillage = getBoolean("generator-settings.village", true);
+        generateFlatBedrock = getBoolean("generator-settings.flat-bedrock", false);
+    }
 }
diff --git a/src/main/java/net/minecraft/world/biome/Biome.java b/src/main/java/net/minecraft/world/biome/Biome.java
index 745785b..f9a312b 100644
--- a/src/main/java/net/minecraft/world/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/biome/Biome.java
@@ -201,7 +201,7 @@ public abstract class Biome {
         BlockPos.MutableBlockPos var15 = new BlockPos.MutableBlockPos();
 
         for (int var16 = 255; var16 >= 0; --var16) {
-            if (var16 <= rand.nextInt(5)) {
+            if (var16 <= (worldIn.paperConfig.generateFlatBedrock ? 0 : rand.nextInt(5))) { // Paper - Configurable flat bedrock
                 chunkPrimerIn.setBlockState(var14, var16, var13, BEDROCK);
             } else {
                 IBlockState var17 = chunkPrimerIn.getBlockState(var14, var16, var13);
diff --git a/src/main/java/net/minecraft/world/biome/BiomeMesa.java b/src/main/java/net/minecraft/world/biome/BiomeMesa.java
index 63e478b..ffa3d7c 100644
--- a/src/main/java/net/minecraft/world/biome/BiomeMesa.java
+++ b/src/main/java/net/minecraft/world/biome/BiomeMesa.java
@@ -108,7 +108,7 @@ public class BiomeMesa extends Biome {
                 chunkPrimerIn.setBlockState(var26, var20, var25, STONE);
             }
 
-            if (var20 <= rand.nextInt(5)) {
+            if (var20 <= (worldIn.paperConfig.generateFlatBedrock ? 0 : rand.nextInt(5))) { // Paper - Configurable flat bedrock
                 chunkPrimerIn.setBlockState(var26, var20, var25, BEDROCK);
             } else if (var19 < 15 || this.brycePillars) {
                 IBlockState var21 = chunkPrimerIn.getBlockState(var26, var20, var25);
diff --git a/src/main/java/net/minecraft/world/gen/ChunkGeneratorFlat.java b/src/main/java/net/minecraft/world/gen/ChunkGeneratorFlat.java
index 6e672e0..de191c8 100644
--- a/src/main/java/net/minecraft/world/gen/ChunkGeneratorFlat.java
+++ b/src/main/java/net/minecraft/world/gen/ChunkGeneratorFlat.java
@@ -43,7 +43,7 @@ public class ChunkGeneratorFlat implements IChunkGenerator {
         if (generateStructures) {
             Map var6 = this.flatWorldGenInfo.getWorldFeatures();
 
-            if (var6.containsKey("village")) {
+            if (var6.containsKey("village") && world.paperConfig.generateVillage) { // Paper
                 Map var7 = (Map) var6.get("village");
 
                 if (!var7.containsKey("size")) {
@@ -53,19 +53,19 @@ public class ChunkGeneratorFlat implements IChunkGenerator {
                 this.structureGenerators.put("Village", new MapGenVillage(var7));
             }
 
-            if (var6.containsKey("biome_1")) {
+            if (var6.containsKey("biome_1") && world.paperConfig.generateTemple) { // Paper
                 this.structureGenerators.put("Temple", new MapGenScatteredFeature((Map) var6.get("biome_1")));
             }
 
-            if (var6.containsKey("mineshaft")) {
+            if (var6.containsKey("mineshaft") && world.paperConfig.generateMineshaft) { // Paper
                 this.structureGenerators.put("Mineshaft", new MapGenMineshaft((Map) var6.get("mineshaft")));
             }
 
-            if (var6.containsKey("stronghold")) {
+            if (var6.containsKey("stronghold") && world.paperConfig.generateStronghold) { // Paper
                 this.structureGenerators.put("Stronghold", new MapGenStronghold((Map) var6.get("stronghold")));
             }
 
-            if (var6.containsKey("oceanmonument")) {
+            if (var6.containsKey("oceanmonument") && world.paperConfig.generateMonument) { // Paper
                 this.structureGenerators.put("Monument", new StructureOceanMonument((Map) var6.get("oceanmonument")));
             }
         }
@@ -78,7 +78,7 @@ public class ChunkGeneratorFlat implements IChunkGenerator {
             this.lavaLakeGenerator = new WorldGenLakes(Blocks.LAVA);
         }
 
-        this.hasDungeons = this.flatWorldGenInfo.getWorldFeatures().containsKey("dungeon");
+        this.hasDungeons = world.paperConfig.generateDungeon && this.flatWorldGenInfo.getWorldFeatures().containsKey("dungeon"); // Paper
         int var13 = 0;
         int var14 = 0;
         boolean var8 = true;
diff --git a/src/main/java/net/minecraft/world/gen/ChunkGeneratorHell.java b/src/main/java/net/minecraft/world/gen/ChunkGeneratorHell.java
index 5d8a93d..77ec8ff 100644
--- a/src/main/java/net/minecraft/world/gen/ChunkGeneratorHell.java
+++ b/src/main/java/net/minecraft/world/gen/ChunkGeneratorHell.java
@@ -167,7 +167,10 @@ public class ChunkGeneratorHell implements IChunkGenerator {
                 IBlockState var14 = NETHERRACK;
 
                 for (int var15 = 127; var15 >= 0; --var15) {
-                    if (var15 < 127 - this.rand.nextInt(5) && var15 > this.rand.nextInt(5)) {
+                    // Paper start - Configurable flat bedrock worldgen
+                    if (var15 < 127 - (world.paperConfig.generateFlatBedrock ? 0 : this.rand.nextInt(5)) &&
+                            var15 > (world.paperConfig.generateFlatBedrock ? 0 : this.rand.nextInt(5))) {
+                        // Paper end
                         IBlockState var16 = primer.getBlockState(var8, var15, var7);
 
                         if (var16.getBlock() != null && var16.getMaterial() != Material.AIR) {
@@ -441,6 +444,6 @@ public class ChunkGeneratorHell implements IChunkGenerator {
     }
 
     public void recreateStructures(Chunk chunkIn, int x, int z) {
-        this.genNetherBridge.generate(this.world, x, z, (ChunkPrimer) null);
+        if (this.world.paperConfig.generateFortress) this.genNetherBridge.generate(this.world, x, z, (ChunkPrimer) null); // Paper
     }
 }
diff --git a/src/main/java/net/minecraft/world/gen/ChunkGeneratorOverworld.java b/src/main/java/net/minecraft/world/gen/ChunkGeneratorOverworld.java
index 5759aa5..c992431 100644
--- a/src/main/java/net/minecraft/world/gen/ChunkGeneratorOverworld.java
+++ b/src/main/java/net/minecraft/world/gen/ChunkGeneratorOverworld.java
@@ -167,36 +167,36 @@ public class ChunkGeneratorOverworld implements IChunkGenerator {
         this.biomesForGeneration = this.world.getBiomeProvider().getBiomes(this.biomesForGeneration, x * 16, z * 16, 16, 16);
         this.replaceBiomeBlocks(x, z, chunksnapshot, this.biomesForGeneration);
 
-        if (this.settings.useCaves) {
+        if (this.settings.useCaves && this.world.paperConfig.generateCaves) { // Paper
             this.caveGenerator.generate(this.world, x, z, chunksnapshot);
         }
 
-        if (this.settings.useRavines) {
+        if (this.settings.useRavines && this.world.paperConfig.generateCanyon) { // Paper
             this.ravineGenerator.generate(this.world, x, z, chunksnapshot);
         }
 
         if (this.mapFeaturesEnabled) {
-            if (this.settings.useMineShafts) {
+            if (this.settings.useMineShafts && this.world.paperConfig.generateMineshaft) { // Paper
                 this.mineshaftGenerator.generate(this.world, x, z, chunksnapshot);
             }
 
-            if (this.settings.useVillages) {
+            if (this.settings.useVillages && this.world.paperConfig.generateVillage) { // Paper
                 this.villageGenerator.generate(this.world, x, z, chunksnapshot);
             }
 
-            if (this.settings.useStrongholds) {
+            if (this.settings.useStrongholds && this.world.paperConfig.generateStronghold) { // Paper
                 this.strongholdGenerator.generate(this.world, x, z, chunksnapshot);
             }
 
-            if (this.settings.useTemples) {
+            if (this.settings.useTemples && this.world.paperConfig.generateTemple) { // Paper
                 this.scatteredFeatureGenerator.generate(this.world, x, z, chunksnapshot);
             }
 
-            if (this.settings.useMonuments) {
+            if (this.settings.useMonuments && this.world.paperConfig.generateMonument) { // Paper
                 this.oceanMonumentGenerator.generate(this.world, x, z, chunksnapshot);
             }
 
-            if (this.settings.useMansions) {
+            if (this.settings.useMansions && this.world.paperConfig.generateMansion) { // Paper
                 this.woodlandMansionGenerator.generate(this.world, x, z, chunksnapshot);
             }
         }
@@ -355,27 +355,27 @@ public class ChunkGeneratorOverworld implements IChunkGenerator {
         ChunkPos chunkcoordintpair = new ChunkPos(x, z);
 
         if (this.mapFeaturesEnabled) {
-            if (this.settings.useMineShafts) {
+            if (this.settings.useMineShafts && this.world.paperConfig.generateMineshaft) { // Paper
                 this.mineshaftGenerator.generateStructure(this.world, this.rand, chunkcoordintpair);
             }
 
-            if (this.settings.useVillages) {
+            if (this.settings.useVillages && this.world.paperConfig.generateVillage) { // Paper
                 flag = this.villageGenerator.generateStructure(this.world, this.rand, chunkcoordintpair);
             }
 
-            if (this.settings.useStrongholds) {
+            if (this.settings.useStrongholds && this.world.paperConfig.generateStronghold) { // Paper
                 this.strongholdGenerator.generateStructure(this.world, this.rand, chunkcoordintpair);
             }
 
-            if (this.settings.useTemples) {
+            if (this.settings.useTemples && this.world.paperConfig.generateTemple) { // Paper
                 this.scatteredFeatureGenerator.generateStructure(this.world, this.rand, chunkcoordintpair);
             }
 
-            if (this.settings.useMonuments) {
+            if (this.settings.useMonuments && this.world.paperConfig.generateMonument) { // Paper
                 this.oceanMonumentGenerator.generateStructure(this.world, this.rand, chunkcoordintpair);
             }
 
-            if (this.settings.useMansions) {
+            if (this.settings.useMansions && this.world.paperConfig.generateMansion) { // Paper
                 this.woodlandMansionGenerator.generateStructure(this.world, this.rand, chunkcoordintpair);
             }
         }
@@ -401,7 +401,7 @@ public class ChunkGeneratorOverworld implements IChunkGenerator {
             }
         }
 
-        if (this.settings.useDungeons) {
+        if (this.settings.useDungeons && this.world.paperConfig.generateDungeon) { // Paper
             for (int k1 = 0; k1 < this.settings.dungeonChance; ++k1) {
                 int l1 = this.rand.nextInt(16) + 8;
                 int i2 = this.rand.nextInt(256);
@@ -500,27 +500,27 @@ public class ChunkGeneratorOverworld implements IChunkGenerator {
 
     public void recreateStructures(Chunk chunkIn, int x, int z) {
         if (this.mapFeaturesEnabled) {
-            if (this.settings.useMineShafts) {
+            if (this.settings.useMineShafts && this.world.paperConfig.generateMineshaft) { // Paper
                 this.mineshaftGenerator.generate(this.world, x, z, (ChunkPrimer) null);
             }
 
-            if (this.settings.useVillages) {
+            if (this.settings.useVillages && this.world.paperConfig.generateVillage) { // Paper
                 this.villageGenerator.generate(this.world, x, z, (ChunkPrimer) null);
             }
 
-            if (this.settings.useStrongholds) {
+            if (this.settings.useStrongholds && this.world.paperConfig.generateStronghold) { // Paper
                 this.strongholdGenerator.generate(this.world, x, z, (ChunkPrimer) null);
             }
 
-            if (this.settings.useTemples) {
+            if (this.settings.useTemples && this.world.paperConfig.generateTemple) { // Paper
                 this.scatteredFeatureGenerator.generate(this.world, x, z, (ChunkPrimer) null);
             }
 
-            if (this.settings.useMonuments) {
+            if (this.settings.useMonuments && this.world.paperConfig.generateMonument) { // Paper
                 this.oceanMonumentGenerator.generate(this.world, x, z, (ChunkPrimer) null);
             }
 
-            if (this.settings.useMansions) {
+            if (this.settings.useMansions && this.world.paperConfig.generateMansion) { // Paper
                 this.woodlandMansionGenerator.generate(this.world, x, z, (ChunkPrimer) null);
             }
         }
diff --git a/src/main/java/net/minecraft/world/gen/structure/MapGenStructure.java b/src/main/java/net/minecraft/world/gen/structure/MapGenStructure.java
index 306756c..7afa3ac 100644
--- a/src/main/java/net/minecraft/world/gen/structure/MapGenStructure.java
+++ b/src/main/java/net/minecraft/world/gen/structure/MapGenStructure.java
@@ -150,6 +150,7 @@ public abstract class MapGenStructure extends MapGenBase {
     }
 
     public boolean isPositionInStructure(World worldIn, BlockPos pos) {
+        if (this.world == null) return false; // Paper
         this.initializeStructureData(worldIn);
         ObjectIterator objectiterator = this.structureMap.values().iterator();
 
-- 
2.18.0

