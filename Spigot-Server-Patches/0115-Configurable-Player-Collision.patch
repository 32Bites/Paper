From b0c68b051334884d08a3c51d703e56f742763c47 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 7 Oct 2017 22:58:39 -0400
Subject: [PATCH] Configurable Player Collision


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index ec46433..430b5d0 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -220,4 +220,9 @@ public class PaperConfig {
     private static void regionFileCacheSize() {
         regionFileCacheSize = getInt("settings.region-file-cache-size", 256);
     }
+
+    public static boolean enablePlayerCollisions = true;
+    private static void enablePlayerCollisions() {
+        enablePlayerCollisions = getBoolean("settings.enable-player-collisions", true);
+    }
 }
diff --git a/src/main/java/net/minecraft/command/server/CommandScoreboard.java b/src/main/java/net/minecraft/command/server/CommandScoreboard.java
index 40db5d8..60d8920 100644
--- a/src/main/java/net/minecraft/command/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/command/server/CommandScoreboard.java
@@ -203,6 +203,13 @@ public class CommandScoreboard extends CommandBase {
                             throw new WrongUsageException("commands.scoreboard.teams.option.usage", new Object[0]);
                         }
 
+                        // Paper start - Block setting options on our collideRule team as it is not persistent
+                        if (args[2].equals(MinecraftServer.getServer().getPlayerList().collideRuleTeamName)) {
+                            mcpSender.sendMessage(new TextComponentString("You cannot set team options on the collideRule team"));
+                            return;
+                        }
+                        // Paper  end
+
                         this.setTeamOption(mcpSender, args, 2, server);
                     }
                 }
diff --git a/src/main/java/net/minecraft/network/play/server/SPacketTeams.java b/src/main/java/net/minecraft/network/play/server/SPacketTeams.java
index 470bcd1..92f070d 100644
--- a/src/main/java/net/minecraft/network/play/server/SPacketTeams.java
+++ b/src/main/java/net/minecraft/network/play/server/SPacketTeams.java
@@ -101,7 +101,7 @@ public class SPacketTeams implements Packet<INetHandlerPlayClient> {
             buf.writeString(this.suffix);
             buf.writeByte(this.friendlyFlags);
             buf.writeString(this.nameTagVisibility);
-            buf.writeString(this.collisionRule);
+            buf.writeString(!com.destroystokyo.paper.PaperConfig.enablePlayerCollisions ? Team.CollisionRule.NEVER.name : this.collisionRule); // Paper
             buf.writeByte(this.color);
         }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index a2798c8..00ee8c1 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -395,6 +395,17 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IThre
         this.playerList.setPlayerManager(this.mcpWorlds);
         this.setDifficultyForAllWorlds(this.getDifficulty());
         this.initialWorldChunkLoad();
+
+        // Paper start - Handle collideRule team for player collision toggle
+        final net.minecraft.scoreboard.Scoreboard scoreboard = this.getEntityWorld().getScoreboard();
+        final java.util.Collection<String> toRemove = scoreboard.getTeams().stream()
+                .filter(team -> team.getName().startsWith("collideRule_"))
+                .map(net.minecraft.scoreboard.Team::getName)
+                .collect(java.util.stream.Collectors.toList());
+        for (String teamName : toRemove) {
+            scoreboard.removeTeam(scoreboard.getTeam(teamName)); // Clean up after ourselves
+        }
+        // Paper end
     }
 
     protected void initialWorldChunkLoad() {
diff --git a/src/main/java/net/minecraft/server/management/PlayerList.java b/src/main/java/net/minecraft/server/management/PlayerList.java
index 0240f75..1abdf16 100644
--- a/src/main/java/net/minecraft/server/management/PlayerList.java
+++ b/src/main/java/net/minecraft/server/management/PlayerList.java
@@ -122,6 +122,8 @@ public abstract class PlayerList {
     private int playerPingIndex;
     private CraftServer cserver;
     private final Map<String, EntityPlayerMP> playersByName = new CaseInsensitiveMap();
+    @Nullable
+    public final String collideRuleTeamName; // Paper - Team name used for collideRule
 
     public PlayerList(MinecraftServer server) {
         this.cserver = server.server = new CraftServer(server, this);
@@ -135,6 +137,17 @@ public abstract class PlayerList {
         this.bannedPlayers.setLanServer(false);
         this.bannedIPs.setLanServer(false);
         this.maxPlayers = 8;
+
+        // Paper start
+        if (!com.destroystokyo.paper.PaperConfig.enablePlayerCollisions) {
+            final net.minecraft.scoreboard.Scoreboard scoreboard = server.getEntityWorld().getScoreboard();
+            this.collideRuleTeamName = org.apache.commons.lang3.StringUtils.left("collideRule_" + server.getEntityWorld().rand.nextInt(), 16);
+            net.minecraft.scoreboard.ScorePlayerTeam collideTeam = scoreboard.createTeam(this.collideRuleTeamName);
+            collideTeam.setSeeFriendlyInvisiblesEnabled(false); // Because we want to mimic them not being on a team at all
+        } else {
+            this.collideRuleTeamName = null;
+        }
+        // Paper end
     }
 
     public void initializeConnectionToPlayer(NetworkManager netManager, EntityPlayerMP playerIn) {
@@ -258,6 +271,12 @@ public abstract class PlayerList {
         }
 
         playerIn.addSelfToInternalCraftingInventory();
+        // Paper start - Add to collideRule team if needed
+        final net.minecraft.scoreboard.Scoreboard scoreboard = this.getServerInstance().getEntityWorld().getScoreboard();
+        if (this.collideRuleTeamName != null && scoreboard.getTeam(collideRuleTeamName) != null && playerIn.getTeam() == null) {
+            scoreboard.addPlayerToTeam(playerIn.getName(), collideRuleTeamName);
+        }
+        // Paper end
         LOGGER.info(
                 playerIn.getName()
                         + "["
@@ -439,6 +458,15 @@ public abstract class PlayerList {
         this.cserver.getPluginManager().callEvent(playerQuitEvent);
         entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
         entityplayer.onUpdateEntity();
+        // Paper start - Remove from collideRule team if needed
+        if (this.collideRuleTeamName != null) {
+            final net.minecraft.scoreboard.Scoreboard scoreBoard = this.getServerInstance().getEntityWorld().getScoreboard();
+            final net.minecraft.scoreboard.ScorePlayerTeam team = scoreBoard.getTeam(this.collideRuleTeamName);
+            if (entityplayer.getTeam() == team && team != null) {
+                scoreBoard.removePlayerFromTeam(entityplayer.getName(), team);
+            }
+        }
+        // Paper end
         this.writePlayerData(entityplayer);
 
         if (entityplayer.isRiding()) {
@@ -1204,6 +1232,14 @@ public abstract class PlayerList {
         for (EntityPlayerMP player : this.playerEntityList) {
             player.connection.disconnect(this.mcServer.server.getShutdownMessage());
         }
+
+        // Paper start - Remove collideRule team if it exists
+        if (this.collideRuleTeamName != null) {
+            final net.minecraft.scoreboard.Scoreboard scoreboard = this.getServerInstance().getEntityWorld().getScoreboard();
+            final net.minecraft.scoreboard.ScorePlayerTeam team = scoreboard.getTeam(this.collideRuleTeamName);
+            if (team != null) scoreboard.removeTeam(team);
+        }
+        // Paper end
     }
 
     public void sendMessage(ITextComponent[] iChatBaseComponents) {
-- 
2.18.0

