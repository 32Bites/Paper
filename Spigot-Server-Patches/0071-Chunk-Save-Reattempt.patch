From ab59218b8c8d003a4ad184eed11e0f1dca9ce313 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 30 Sep 2017 22:23:46 -0400
Subject: [PATCH] Chunk Save Reattempt

We commonly have "Stream Closed" errors on chunk saving, so this code
should re-try to save the chunk in the event of failure and hopefully
prevent rollbacks.

diff --git a/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java b/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
index 108687c..e4e54d5 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -15,6 +15,7 @@ import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityList;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.datafix.DataFixer;
@@ -195,11 +196,29 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO {
                 NBTTagCompound nbttagcompound = (NBTTagCompound) SupplierUtils.getIfExists(chunk.compoundSupplier); // Paper
 
                 if (nbttagcompound != null) {
+                    // Paper start - Chunk save reattempt
+                    int attempts = 0;
+                    Exception laste = null;
+                    while (attempts++ < 5) {
                     try {
                         this.writeChunkData(chunkcoordintpair, nbttagcompound);
+                        laste = null;
+                        break;
                     } catch (Exception var12) {
-                        LOGGER.error("Failed to save chunk", (Throwable) var12);
+                        //LOGGER.error("Failed to save chunk", (Throwable) var12);
+                        laste = var12;
                     }
+                    try {
+                        Thread.sleep(10);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    } }
+
+                    if (laste != null) {
+                        com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(laste);
+                        MinecraftServer.LOGGER.error("Failed to save chunk", laste);
+                    }
+                    // Paper end
                 }
                 // Paper start - Chunk queue improvements
                 synchronized (lock) {
diff --git a/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
index 2e811e2..835f4d6 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
@@ -204,8 +204,7 @@ public class RegionFile {
 
             this.setChunkTimestamp(x, z, (int) (MinecraftServer.getCurrentTimeMillis() / 1000L));
         } catch (IOException var12) {
-            var12.printStackTrace();
-            ServerInternalException.reportInternalException(var12); // Paper
+            org.spigotmc.SneakyThrow.sneaky(var12); // Paper - we want the upper try/catch to retry this
         }
     }
 
-- 
2.18.0

