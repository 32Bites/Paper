From e2e1b71c8b460a1664f8168e5167191245e6269c Mon Sep 17 00:00:00 2001
From: Joseph Hirschfeld <joe@ibj.io>
Date: Sat, 30 Sep 2017 18:09:33 -0400
Subject: [PATCH] Add exception reporting event


diff --git a/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java b/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java
new file mode 100644
index 0000000..9339718
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java
@@ -0,0 +1,38 @@
+package com.destroystokyo.paper;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.craftbukkit.scheduler.CraftTask;
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerSchedulerException;
+
+/**
+ * Reporting wrapper to catch exceptions not natively
+ */
+public class ServerSchedulerReportingWrapper implements Runnable {
+
+    private final CraftTask internalTask;
+
+    public ServerSchedulerReportingWrapper(CraftTask internalTask) {
+        this.internalTask = Preconditions.checkNotNull(internalTask, "internalTask");
+    }
+
+    @Override
+    public void run() {
+        try {
+            internalTask.run();
+        } catch (RuntimeException e) {
+            internalTask.getOwner().getServer().getPluginManager().callEvent(
+                    new ServerExceptionEvent(new ServerSchedulerException(e, internalTask))
+            );
+            throw e;
+        } catch (Throwable t) {
+            internalTask.getOwner().getServer().getPluginManager().callEvent(
+                    new ServerExceptionEvent(new ServerSchedulerException(t, internalTask))
+            ); //Do not rethrow, since it is not permitted with Runnable#run
+        }
+    }
+
+    public CraftTask getInternalTask() {
+        return internalTask;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java b/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
index 1359ce9..6818ce9 100644
--- a/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
+++ b/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.management;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
@@ -373,6 +374,7 @@ public class PreYggdrasilConverter {
                                     root = CompressedStreamTools.readCompressed(new FileInputStream(file1));
                                 } catch (Exception var10) {
                                     var10.printStackTrace();
+                                    ServerInternalException.reportInternalException(var10); // Paper
                                 }
 
                                 if (root != null) {
@@ -387,6 +389,7 @@ public class PreYggdrasilConverter {
                                         CompressedStreamTools.writeCompressed(root, new FileOutputStream(file2));
                                     } catch (Exception var9) {
                                         var9.printStackTrace();
+                                        ServerInternalException.reportInternalException(var9); // Paper
                                     }
                                 }
 
diff --git a/src/main/java/net/minecraft/village/VillageSiege.java b/src/main/java/net/minecraft/village/VillageSiege.java
index b863867..39488e7 100644
--- a/src/main/java/net/minecraft/village/VillageSiege.java
+++ b/src/main/java/net/minecraft/village/VillageSiege.java
@@ -3,6 +3,8 @@ package net.minecraft.village;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import com.destroystokyo.paper.exception.ServerInternalException;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.IEntityLivingData;
 import net.minecraft.entity.monster.EntityZombie;
@@ -145,6 +147,7 @@ public class VillageSiege {
                 entityzombie.onInitialSpawn(this.world.getDifficultyForLocation(new BlockPos(entityzombie)), (IEntityLivingData) null);
             } catch (Exception var4) {
                 var4.printStackTrace();
+                ServerInternalException.reportInternalException(var4); // Paper
                 return false;
             }
 
diff --git a/src/main/java/net/minecraft/world/World.java b/src/main/java/net/minecraft/world/World.java
index 8097b4c..bf006cb 100644
--- a/src/main/java/net/minecraft/world/World.java
+++ b/src/main/java/net/minecraft/world/World.java
@@ -1,5 +1,7 @@
 package net.minecraft.world;
 
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.base.Function;
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Predicate;
@@ -1569,8 +1571,10 @@ public abstract class World implements IBlockAccess {
                     } catch (Throwable var18) {
                         entity.tickTimer.stopTiming();
                         // Paper start - Prevent tile entity and entity crashes
-                        System.err.println("Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.posX + "," + entity.posY + "," + entity.posZ);
+                        String msg = "Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.posX + "," + entity.posY + "," + entity.posZ;
+                        System.err.println(msg);
                         var18.printStackTrace();
+                        new ServerExceptionEvent(new ServerInternalException(msg, var18)).callEvent();
                         entity.isDead = true;
                         continue;
                         // Paper end
@@ -1639,8 +1643,10 @@ public abstract class World implements IBlockAccess {
                             this.profiler.endSection();
                         } catch (Throwable var16) {
                             // Paper start - Prevent tile entity and entity crashes
-                            System.err.println("TileEntity threw exception at " + tileentity.world.getWorld().getName() + ":" + tileentity.pos.getX() + "," + tileentity.pos.getY() + "," + tileentity.pos.getZ());
+                            String msg = "TileEntity threw exception at " + tileentity.world.getWorld().getName() + ":" + tileentity.pos.getX() + "," + tileentity.pos.getY() + "," + tileentity.pos.getZ();
+                            System.err.println(msg);
                             var16.printStackTrace();
+                            new ServerExceptionEvent(new ServerInternalException(msg, var16)).callEvent();
                             tilesThisCycle--;
                             this.tickableTileEntities.remove(tileTickPosition--);
                             continue;
diff --git a/src/main/java/net/minecraft/world/WorldEntitySpawner.java b/src/main/java/net/minecraft/world/WorldEntitySpawner.java
index 6a92597..fab3723 100644
--- a/src/main/java/net/minecraft/world/WorldEntitySpawner.java
+++ b/src/main/java/net/minecraft/world/WorldEntitySpawner.java
@@ -3,6 +3,8 @@ package net.minecraft.world;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+
+import com.destroystokyo.paper.exception.ServerInternalException;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockRailBase;
 import net.minecraft.block.material.Material;
@@ -178,6 +180,7 @@ public final class WorldEntitySpawner {
                                                                         .newInstance(worldServerIn);
                                                     } catch (Exception var41) {
                                                         var41.printStackTrace();
+                                                        ServerInternalException.reportInternalException(var41); // Paper
                                                         return j1;
                                                     }
 
@@ -293,6 +296,7 @@ public final class WorldEntitySpawner {
                                 entityinsentient = biomebase_biomemeta.entityClass.getConstructor(World.class).newInstance(worldIn);
                             } catch (Exception var21) {
                                 var21.printStackTrace();
+                                ServerInternalException.reportInternalException(var21); // Paper
                                 continue;
                             }
 
diff --git a/src/main/java/net/minecraft/world/chunk/Chunk.java b/src/main/java/net/minecraft/world/chunk/Chunk.java
index 2dae9cd..4a41e4d 100644
--- a/src/main/java/net/minecraft/world/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/chunk/Chunk.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.chunk;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.destroystokyo.paper.lighting.PaperLightingQueue; // Paper
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
@@ -791,20 +792,15 @@ public class Chunk {
             this.tileEntities.remove(pos);
             // Paper end
         } else {
-            System.out.println(
-                    "Attempted to place a tile entity ("
-                            + tileEntityIn
-                            + ") at "
-                            + tileEntityIn.pos.getX()
-                            + ","
-                            + tileEntityIn.pos.getY()
-                            + ","
-                            + tileEntityIn.pos.getZ()
-                            + " ("
-                            + CraftMagicNumbers.getMaterial(this.getBlockState(pos).getBlock())
-                            + ") where there was no entity tile!");
-            System.out.println("Chunk coordinates: " + this.x * 16 + "," + this.z * 16);
-            (new Exception()).printStackTrace();
+            // Paper start
+            ServerInternalException e = new ServerInternalException(
+                    "Attempted to place a tile entity (" + tileEntityIn + ") at "
+                    + tileEntityIn.pos.getX() + "," + tileEntityIn.pos.getY() +"," + tileEntityIn.pos.getZ()
+                    + " (" + CraftMagicNumbers.getMaterial(getBlockState(pos).getBlock()) + ") where there was no entity tile!\n"
+                    + "Chunk coordinates: " + (this.x * 16) + "," + (this.z * 16));
+            e.printStackTrace();
+            ServerInternalException.reportInternalException(e);
+            // Paper end
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
index aec6e9a..2e811e2 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.chunk.storage;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Lists;
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
@@ -78,6 +79,7 @@ public class RegionFile {
             }
         } catch (IOException var6) {
             var6.printStackTrace();
+            ServerInternalException.reportInternalException(var6); // Paper
         }
     }
 
@@ -203,6 +205,7 @@ public class RegionFile {
             this.setChunkTimestamp(x, z, (int) (MinecraftServer.getCurrentTimeMillis() / 1000L));
         } catch (IOException var12) {
             var12.printStackTrace();
+            ServerInternalException.reportInternalException(var12); // Paper
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java b/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
index 7931e12..56b7b91 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.chunk.storage;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Maps;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -62,6 +63,7 @@ public class RegionFileCache {
                 }
             } catch (IOException var3) {
                 var3.printStackTrace();
+                ServerInternalException.reportInternalException(var3); // Paper
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java b/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
index ee6744a..adc063b 100644
--- a/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.gen;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
@@ -190,7 +191,11 @@ public class ChunkProviderServer implements IChunkProvider {
 
             return chunk;
         } catch (Exception var4) {
-            LOGGER.error("Couldn't load chunk", (Throwable) var4);
+            // Paper start
+            String msg = "Couldn't load chunk";
+            ChunkProviderServer.LOGGER.error(msg, var4);
+            ServerInternalException.reportInternalException(var4);
+            // Paper end
             return null;
         }
     }
@@ -202,9 +207,14 @@ public class ChunkProviderServer implements IChunkProvider {
             chunk.setLastSaveTime(this.world.getTotalWorldTime());
             this.chunkLoader.saveChunk(this.world, chunk, unloaded);
         } catch (IOException var4) {
-            LOGGER.error("Couldn't save chunk", (Throwable) var4);
+            // Paper start
+            String msg = "Couldn't save chunk";
+            ChunkProviderServer.LOGGER.error(msg, var4);
+            ServerInternalException.reportInternalException(var4);
         } catch (MinecraftException var5) {
-            LOGGER.error("Couldn't save chunk; already in use by another instance of Minecraft?", (Throwable) var5);
+            String msg = "Couldn't save chunk; already in use by another instance of Minecraft?";
+            ChunkProviderServer.LOGGER.error(msg, var5);
+            ServerInternalException.reportInternalException(var5);
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/storage/MapStorage.java b/src/main/java/net/minecraft/world/storage/MapStorage.java
index 569614b..c49fdd1 100644
--- a/src/main/java/net/minecraft/world/storage/MapStorage.java
+++ b/src/main/java/net/minecraft/world/storage/MapStorage.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.storage;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import java.io.DataInputStream;
@@ -51,6 +52,7 @@ public class MapStorage {
                     }
                 } catch (Exception var8) {
                     var8.printStackTrace();
+                    ServerInternalException.reportInternalException(var8); // Paper
                 }
             }
 
@@ -97,6 +99,7 @@ public class MapStorage {
                 }
             } catch (Exception var5) {
                 var5.printStackTrace();
+                ServerInternalException.reportInternalException(var5); // Paper
             }
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 6007faa..15713c5 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -1,6 +1,9 @@
 package org.bukkit.craftbukkit.scheduler;
 
 import co.aikar.timings.MinecraftTimings;
+import com.destroystokyo.paper.ServerSchedulerReportingWrapper;
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerSchedulerException;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -355,14 +358,15 @@ public class CraftScheduler implements BukkitScheduler {
                     try {
                         task.run();
                     } catch (Throwable var6) {
-                        task.getOwner()
-                                .getLogger()
-                                .log(
-                                        Level.WARNING,
-                                        String.format(
-                                                "Task #%s for %s generated an exception",
-                                                task.getTaskId(), task.getOwner().getDescription().getFullName()),
-                                        var6);
+                        // Paper start
+                        String msg = String.format(
+                                "Task #%s for %s generated an exception",
+                                task.getTaskId(),
+                                task.getOwner().getDescription().getFullName());
+                        task.getOwner().getLogger().log(Level.WARNING, msg, var6);
+                        task.getOwner().getServer().getPluginManager()
+                                .callEvent(new ServerExceptionEvent(new ServerSchedulerException(msg, var6, task)));
+                        // Paper end
                     }
 
                     this.parsePending();
@@ -370,7 +374,7 @@ public class CraftScheduler implements BukkitScheduler {
                     this.debugTail =
                             this.debugTail.setNext(
                                     new CraftAsyncDebugger(currentTick + RECENT_TICKS, task.getOwner(), task.getTaskClass()));
-                    this.executor.execute(task);
+                    this.executor.execute(new ServerSchedulerReportingWrapper(task)); // Paper
                 }
 
                 long period = task.getPeriod();
-- 
2.18.0

