From abb1a63f5bf6e04673f8f4201d20d9294b82b557 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 20 Oct 2017 21:30:11 -0400
Subject: [PATCH] Activation Range Improvements

Fixes and adds new Immunities to improve gameplay behavior

diff --git a/src/main/java/net/minecraft/entity/EntityCreature.java b/src/main/java/net/minecraft/entity/EntityCreature.java
index 3468585..4dbd036 100644
--- a/src/main/java/net/minecraft/entity/EntityCreature.java
+++ b/src/main/java/net/minecraft/entity/EntityCreature.java
@@ -17,6 +17,7 @@ public abstract class EntityCreature extends EntityLiving {
     private BlockPos homePosition = BlockPos.ORIGIN;
     private float maximumHomeDistance = -1.0F;
     private final float restoreWaterCost = PathNodeType.WATER.getPriority();
+    public BlockPos movingTarget = null; // Paper - Activation range improvements
 
     public EntityCreature(World worldIn) {
         super(worldIn);
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAIMoveToBlock.java b/src/main/java/net/minecraft/entity/ai/EntityAIMoveToBlock.java
index d5e6a91..d99914d 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAIMoveToBlock.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAIMoveToBlock.java
@@ -85,7 +85,7 @@ public abstract class EntityAIMoveToBlock extends EntityAIBase {
                         BlockPos var8 = var3.add(var6, var4 - 1, var7);
 
                         if (this.creature.isWithinHomeDistanceFromPosition(var8) && this.shouldMoveTo(this.creature.world, var8)) {
-                            this.destinationBlock = var8;
+                            setDestinationBlock(var8); // Paper - Activation range improvements
                             return true;
                         }
                     }
@@ -97,4 +97,17 @@ public abstract class EntityAIMoveToBlock extends EntityAIBase {
     }
 
     protected abstract boolean shouldMoveTo(World var1, BlockPos var2);
+
+    // Paper start - Activation range improvements
+    public void setDestinationBlock(BlockPos pos) {
+        this.destinationBlock = pos;
+        creature.movingTarget = pos != BlockPos.ORIGIN ? pos : null;
+    }
+
+    @Override
+    public void resetTask() {
+        super.resetTask();
+        setDestinationBlock(BlockPos.ORIGIN);
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 260d202..639e7d1 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -19,6 +19,7 @@ import net.minecraft.entity.monster.EntityMob;
 import net.minecraft.entity.monster.EntitySlime;
 import net.minecraft.entity.passive.EntityAmbientCreature;
 import net.minecraft.entity.passive.EntityAnimal;
+import net.minecraft.entity.passive.EntityLlama;
 import net.minecraft.entity.passive.EntitySheep;
 import net.minecraft.entity.passive.EntityVillager;
 import net.minecraft.entity.player.EntityPlayer;
@@ -142,18 +143,29 @@ public class ActivationRange {
             if (entity instanceof EntityLivingBase) {
                 EntityLivingBase living = (EntityLivingBase) entity;
 
-                if (living.hurtTime > 0 || living.activePotionsMap.size() > 0) {
+                if (living.recentlyHit > 0 || living.hurtTime > 0 || living.activePotionsMap.size() > 0) { // Paper - Entity activation range improvements
                     return true;
                 }
 
-                if (entity instanceof EntityCreature && ((EntityCreature) entity).getAttackTarget() != null) {
-                    return true;
+                if (entity instanceof EntityCreature) {
+                    // Paper start - Activation range improvements
+                    EntityCreature creature = (EntityCreature) entity;
+                    if (creature.getAttackTarget() != null || creature.movingTarget != null) {
+                        return true;
+                    }
+                    // Paper end
                 }
 
                 if (entity instanceof EntityVillager && ((EntityVillager) entity).isMating()) {
                     return true;
                 }
 
+                // Paper start - Activation range improvements
+                if (entity instanceof EntityLlama && ((EntityLlama) entity).inCaravan()) {
+                    return true;
+                }
+                // Paper end
+
                 if (entity instanceof EntityAnimal) {
                     EntityAnimal animal = (EntityAnimal) entity;
 
-- 
2.18.0

