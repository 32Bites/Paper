From 6be0017124eb7da8a4d89c5c9c5e32defdd11a33 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Fri, 20 Oct 2017 19:03:50 -0400
Subject: [PATCH] Speedup BlockPos by fixing inlining

Normally the JVM can inline virtual getters by having two sets of code, one is the 'optimized' code and the other is the 'deoptimized' code.
If a single type is used 99% of the time, then its worth it to inline, and to revert to 'deoptimized' the 1% of the time we encounter other types.
But if two types are encountered commonly, then the JVM can't inline them both, and the call overhead remains.

This scenario also occurs with BlockPos and MutableBlockPos.
The variables in BlockPos are final, so MutableBlockPos can't modify them.
MutableBlockPos fixes this by adding custom mutable variables, and overriding the getters to access them.

This approach with utility methods that operate on MutableBlockPos and BlockPos.
Specific examples are BlockPosition.up(), and World.isValidLocation().
It makes these simple methods much slower than they need to be.

This should result in an across the board speedup in anything that accesses blocks or does logic with positions.

This is based upon conclusions drawn from inspecting the assenmbly generated bythe JIT compiler on my mircorbenchmarks.
They had 'callq' (invoke) instead of 'mov' (get from memory) instructions.

diff --git a/src/main/java/net/minecraft/util/math/BlockPos.java b/src/main/java/net/minecraft/util/math/BlockPos.java
index 9a31dc6..ed83314 100644
--- a/src/main/java/net/minecraft/util/math/BlockPos.java
+++ b/src/main/java/net/minecraft/util/math/BlockPos.java
@@ -228,19 +228,21 @@ public class BlockPos extends Vec3i {
                         if (this.pos == null) {
                             this.pos = new BlockPos.MutableBlockPos(x1, y1, z1);
                             return this.pos;
-                        } else if (this.pos.x == x2 && this.pos.y == y2 && this.pos.z == z2) {
+                        // Paper start - Just beat this thing over the head referring to our base values
+                        } else if (((Vec3i) this.pos).x == x2 && ((Vec3i) this.pos).y == y2 && ((Vec3i) this.pos).z == z2) {
                             return (BlockPos.MutableBlockPos) this.endOfData();
                         } else {
-                            if (this.pos.x < x2) {
-                                ++this.pos.x;
-                            } else if (this.pos.y < y2) {
-                                this.pos.x = x1;
-                                ++this.pos.y;
-                            } else if (this.pos.z < z2) {
-                                this.pos.x = x1;
-                                this.pos.y = y1;
-                                ++this.pos.z;
+                            if (((Vec3i) this.pos).x < x2) {
+                                ++((Vec3i) this.pos).x;
+                            } else if (((Vec3i) this.pos).y < y2) {
+                                ((Vec3i) this.pos).x = x1;
+                                ++((Vec3i) this.pos).y;
+                            } else if (((Vec3i) this.pos).z < z2) {
+                                ((Vec3i) this.pos).x = x1;
+                                ((Vec3i) this.pos).y = y1;
+                                ++((Vec3i) this.pos).z;
                             }
+                            // Paper end
 
                             return this.pos;
                         }
@@ -251,6 +253,8 @@ public class BlockPos extends Vec3i {
     }
 
     public static class MutableBlockPos extends BlockPos {
+        // Paper start - Remove variables
+        /*
         protected int x;
         protected int y;
         protected int z;
@@ -263,6 +267,7 @@ public class BlockPos extends Vec3i {
         public boolean isInvalidYLocation() {
             return y < 0 || y >= 256;
         }
+        */
         // Paper end
 
         public MutableBlockPos() {
@@ -275,9 +280,11 @@ public class BlockPos extends Vec3i {
 
         public MutableBlockPos(int x_, int y_, int z_) {
             super(0, 0, 0);
-            this.x = x_;
-            this.y = y_;
-            this.z = z_;
+            // Paper start - Keep beating it over the head
+            ((Vec3i) this).x = x_;
+            ((Vec3i) this).y = y_;
+            ((Vec3i) this).z = z_;
+            // Paper end
         }
 
         public BlockPos add(double x, double y, double z) {
@@ -296,6 +303,8 @@ public class BlockPos extends Vec3i {
             return super.rotate(rotationIn).toImmutable();
         }
 
+        // Paper start - Use superclass methods
+        /*
         public int getX() {
             return this.x;
         }
@@ -307,11 +316,15 @@ public class BlockPos extends Vec3i {
         public int getZ() {
             return this.z;
         }
+        */
+        // Paper end
 
         public BlockPos.MutableBlockPos setPos(int xIn, int yIn, int zIn) {
-            this.x = xIn;
-            this.y = yIn;
-            this.z = zIn;
+            // Paper start - Modify base position variables
+            ((Vec3i) this).x = xIn;
+            ((Vec3i) this).y = yIn;
+            ((Vec3i) this).z = zIn;
+            // Paper end
             return this;
         }
 
@@ -328,11 +341,11 @@ public class BlockPos extends Vec3i {
         }
 
         public BlockPos.MutableBlockPos move(EnumFacing facing, int n) {
-            return this.setPos(this.x + facing.getFrontOffsetX() * n, this.y + facing.getFrontOffsetY() * n, this.z + facing.getFrontOffsetZ() * n);
+            return this.setPos(this.getX() + facing.getFrontOffsetX() * n, this.getY() + facing.getFrontOffsetY() * n, this.getZ() + facing.getFrontOffsetZ() * n); // Paper - USE THE BLEEPING GETTERS
         }
 
         public void setY(int yIn) {
-            this.y = yIn;
+            ((Vec3i) this).y = yIn; // Paper
         }
 
         public BlockPos toImmutable() {
diff --git a/src/main/java/net/minecraft/util/math/Vec3i.java b/src/main/java/net/minecraft/util/math/Vec3i.java
index 37bf6fb..9b62223 100644
--- a/src/main/java/net/minecraft/util/math/Vec3i.java
+++ b/src/main/java/net/minecraft/util/math/Vec3i.java
@@ -10,10 +10,10 @@ public class Vec3i implements Comparable<Vec3i> {
     protected int y;
     protected int z;
     // Paper start
-    public boolean isValidLocation() {
+    public final boolean isValidLocation() {
         return x >= -30000000 && z >= -30000000 && x < 30000000 && z < 30000000 && y >= 0 && y < 256;
     }
-    public boolean isInvalidYLocation() {
+    public final boolean isInvalidYLocation() {
         return y < 0 || y >= 256;
     }
     // Paper end
-- 
2.18.0

