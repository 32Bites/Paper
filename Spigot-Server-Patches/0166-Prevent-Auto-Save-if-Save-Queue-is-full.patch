From ae46ed52f0e25fa7b966c49ef1ef5106f6b7218b Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 10 Oct 2017 17:01:59 -0400
Subject: [PATCH] Prevent Auto Save if Save Queue is full

If the save queue already has 50 (configurable) of chunks pending,
then avoid processing auto save (which would add more)

diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index c8ecada..de6d542 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -375,4 +375,9 @@ public class PaperWorldConfig {
     private void removeCorruptTEs() {
         removeCorruptTEs = getBoolean("remove-corrupt-tile-entities", false);
     }
+
+    public int queueSizeAutoSaveThreshold = 50;
+    private void queueSizeAutoSaveThreshold() {
+       queueSizeAutoSaveThreshold = getInt("save-queue-limit-for-auto-save", 50);
+    }
 }
diff --git a/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java b/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
index 711fb47..1eca92d 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -559,6 +559,13 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO {
         }
     }
 
+    /**
+     * Paper - Getter for queue size
+     */
+    public int getQueueSize() {
+        return queue.size();
+    }
+
     // Paper start - Chunk queue improvements
     private static class QueuedChunk {
         public ChunkPos coords;
diff --git a/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java b/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
index 2574147..c03a7f6 100644
--- a/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/world/gen/ChunkProviderServer.java
@@ -240,6 +240,14 @@ public class ChunkProviderServer implements IChunkProvider {
 
     public boolean saveChunks(boolean all) {
         int i = 0;
+        // Paper start
+        final AnvilChunkLoader chunkLoader = (AnvilChunkLoader) world.getChunkProvider().chunkLoader;
+        final int queueSize = chunkLoader.getQueueSize();
+        if (queueSize > world.paperConfig.queueSizeAutoSaveThreshold){
+            return false;
+        }
+        final int autoSaveLimit = world.paperConfig.maxAutoSaveChunksPerTick;
+        // Paper end
         Iterator iterator = this.id2ChunkMap.values().iterator();
 
         while (iterator.hasNext()) {
@@ -254,7 +262,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 chunk.setModified(false);
                 ++i;
 
-                if (!all && i >= world.paperConfig.maxAutoSaveChunksPerTick) { // Spigot - // Paper - Incremental Auto Save - cap max per tick
+                if (!all && i >= autoSaveLimit) { // Spigot - // Paper - Incremental Auto Save - cap max per tick
                     return false;
                 }
             }
-- 
2.18.0

