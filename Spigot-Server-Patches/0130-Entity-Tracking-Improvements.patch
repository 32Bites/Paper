From c70a130a6b96e0ea9a4f04c7a15d5fa8453c41de Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 9 Oct 2017 17:35:19 -0400
Subject: [PATCH] Entity Tracking Improvements

If any part of a Vehicle/Passenger relationship is visible to a player,
send all passenger/vehicles to the player in the chain.

diff --git a/src/main/java/net/minecraft/entity/Entity.java b/src/main/java/net/minecraft/entity/Entity.java
index 6dfd069..0730afd 100644
--- a/src/main/java/net/minecraft/entity/Entity.java
+++ b/src/main/java/net/minecraft/entity/Entity.java
@@ -212,6 +212,7 @@ public abstract class Entity implements ICommandSender {
     public boolean fromMobSpawner;
     public Location origin; // Paper
     public static final Random SHARED_RANDOM = new Random(); // Paper
+    EntityTrackerEntry tracker; // Paper
 
     static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
         return tag.hasKey("Bukkit.updateLevel") && tag.getInteger("Bukkit.updateLevel") >= level;
diff --git a/src/main/java/net/minecraft/entity/EntityTrackerEntry.java b/src/main/java/net/minecraft/entity/EntityTrackerEntry.java
index 600c9e3..65f1666 100644
--- a/src/main/java/net/minecraft/entity/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/entity/EntityTrackerEntry.java
@@ -105,6 +105,7 @@ public class EntityTrackerEntry {
     // Paper end
 
     public EntityTrackerEntry(Entity entityIn, int rangeIn, int maxRangeIn, int updateFrequencyIn, boolean sendVelocityUpdatesIn) {
+        entityIn.tracker = this; // Paper
         this.trackedEntity = entityIn;
         this.range = rangeIn;
         this.maxRange = maxRangeIn;
@@ -492,16 +493,58 @@ public class EntityTrackerEntry {
 
                     this.trackedEntity.addTrackingPlayer(playerMP);
                     playerMP.addEntity(this.trackedEntity);
+                    updatePassengers(playerMP); // Paper
                 }
             } else if (this.trackingPlayers.contains(playerMP)) {
                 this.trackingPlayers.remove(playerMP);
                 this.trackedEntity.removeTrackingPlayer(playerMP);
                 playerMP.removeEntity(this.trackedEntity);
+                updatePassengers(playerMP); // Paper
             }
         }
     }
 
     public boolean isVisibleTo(EntityPlayerMP playerMP) {
+        // Paper start
+        if (trackedEntity.isRiding()) {
+            return isTrackedBy(trackedEntity.getLowestRidingEntity(), playerMP);
+        } else if (hasPassengerInRange(trackedEntity, playerMP)) {
+            return true;
+        }
+
+        return isInRangeOfPlayer(playerMP);
+    }
+    private static boolean hasPassengerInRange(Entity entity, EntityPlayerMP playerMP) {
+        if (!entity.isBeingRidden()) {
+            return false;
+        }
+        for (Entity passenger : entity.getPassengers()) {
+            if (passenger.tracker != null && passenger.tracker.isInRangeOfPlayer(playerMP)) {
+                return true;
+            }
+            if (passenger.isBeingRidden()) {
+                if (hasPassengerInRange(passenger, playerMP)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+    private static boolean isTrackedBy(Entity entity, EntityPlayerMP playerMP) {
+        return entity == playerMP || entity.tracker != null && entity.tracker.trackingPlayers.contains(playerMP);
+    }
+    private void updatePassengers(EntityPlayerMP playerMP) {
+        if (trackedEntity.isBeingRidden()) {
+            trackedEntity.getPassengers().forEach((e) -> {
+                if (e.tracker != null) {
+                    e.tracker.updatePlayerEntity(playerMP);
+                }
+            });
+            playerMP.connection.sendPacket(new SPacketSetPassengers(this.trackedEntity));
+        }
+    }
+    private boolean isInRangeOfPlayer(EntityPlayerMP playerMP) {
+        // Paper end
         double d0 = playerMP.posX - (double) this.encodedPosX / 4096.0D;
         double d1 = playerMP.posZ - (double) this.encodedPosZ / 4096.0D;
         int i = Math.min(this.range, this.maxRange);
@@ -626,6 +669,7 @@ public class EntityTrackerEntry {
             this.trackingPlayers.remove(playerMP);
             this.trackedEntity.removeTrackingPlayer(playerMP);
             playerMP.removeEntity(this.trackedEntity);
+            updatePassengers(playerMP); // Paper
         }
     }
 
-- 
2.18.0

