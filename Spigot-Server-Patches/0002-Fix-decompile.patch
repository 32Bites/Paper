From 74b5616ad7669ee2d384ce19054c8404b2918d96 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Fri, 15 Sep 2017 22:45:59 -0400
Subject: [PATCH] Fix decompile


diff --git a/src/main/java/net/minecraft/advancements/Advancement.java b/src/main/java/net/minecraft/advancements/Advancement.java
index c92b9d9..95c20ab 100644
--- a/src/main/java/net/minecraft/advancements/Advancement.java
+++ b/src/main/java/net/minecraft/advancements/Advancement.java
@@ -222,7 +222,7 @@ public class Advancement {
             DisplayInfo advancementdisplay = json.has("display") ? DisplayInfo.deserialize(JsonUtils.getJsonObject(json, "display"), context) : null;
             AdvancementRewards advancementrewards =
                     (AdvancementRewards) JsonUtils.deserializeClass(json, "rewards", AdvancementRewards.EMPTY, context, AdvancementRewards.class);
-            Map map = Criterion.criteriaFromJson(JsonUtils.getJsonObject(json, "criteria"), context);
+            Map<String, Criterion> map = Criterion.criteriaFromJson(JsonUtils.getJsonObject(json, "criteria"), context);
 
             if (map.isEmpty()) {
                 throw new JsonSyntaxException("Advancement criteria cannot be empty");
diff --git a/src/main/java/net/minecraft/advancements/AdvancementManager.java b/src/main/java/net/minecraft/advancements/AdvancementManager.java
index ea29698..748fcfb 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementManager.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementManager.java
@@ -54,11 +54,6 @@ public class AdvancementManager {
                                     JsonObject jsonobject = JsonUtils.getJsonObject(jsonelement, "advancement");
                                     return Advancement.Builder.deserialize(jsonobject, jsondeserializationcontext);
                                 }
-
-                                public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext)
-                                        throws JsonParseException {
-                                    return this.deserialize(jsonelement, type, jsondeserializationcontext);
-                                }
                             })
                     .registerTypeAdapter(AdvancementRewards.class, new AdvancementRewards.Deserializer())
                     .registerTypeHierarchyAdapter(ITextComponent.class, new ITextComponent.Serializer())
diff --git a/src/main/java/net/minecraft/advancements/AdvancementProgress.java b/src/main/java/net/minecraft/advancements/AdvancementProgress.java
index 907bea9..63ca69f 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementProgress.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementProgress.java
@@ -26,7 +26,7 @@ public class AdvancementProgress implements Comparable<AdvancementProgress> {
     private String[][] requirements = new String[0][];
 
     public void update(Map<String, Criterion> criteriaIn, String[][] requirements) {
-        Set var3 = criteriaIn.keySet();
+        Set<String> var3 = criteriaIn.keySet();
         Iterator var4 = this.criteria.entrySet().iterator();
 
         while (var4.hasNext()) {
diff --git a/src/main/java/net/minecraft/advancements/PlayerAdvancements.java b/src/main/java/net/minecraft/advancements/PlayerAdvancements.java
index 7902064..1765312 100644
--- a/src/main/java/net/minecraft/advancements/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/advancements/PlayerAdvancements.java
@@ -90,7 +90,7 @@ public class PlayerAdvancements {
     }
 
     private void ensureAllVisible() {
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList<Advancement> arraylist = Lists.newArrayList();
 
         for (Entry<Advancement, AdvancementProgress> entry : this.progress.entrySet()) {
             if (((AdvancementProgress) entry.getValue()).isDone()) {
@@ -125,7 +125,7 @@ public class PlayerAdvancements {
 
                 Stream stream = map.entrySet().stream().sorted(Comparator.comparing(Entry::getValue));
 
-                for (Entry entry : (List) stream.collect(Collectors.toList())) {
+                for (Entry entry : (List<Entry>) stream.collect(Collectors.toList())) {
                     Advancement advancement = this.server.getAdvancementManager().getAdvancement((ResourceLocation) entry.getKey());
 
                     if (advancement == null) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
index fc12c45..d84e77a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BredAnimalsTrigger.java
@@ -110,7 +110,7 @@ public class BredAnimalsTrigger implements ICriterionTrigger<BredAnimalsTrigger.
         }
 
         public void trigger(EntityPlayerMP player, EntityAnimal parent1, EntityAnimal parent2, EntityAgeable child) {
-            ArrayList var5 = null;
+            ArrayList<Listener> var5 = null;
 
             for (ICriterionTrigger.Listener var7 : this.listeners) {
                 if (((BredAnimalsTrigger.Instance) var7.getCriterionInstance()).test(player, parent1, parent2, child)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
index 82693b4..421c620 100644
--- a/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
@@ -112,7 +112,7 @@ public class BrewedPotionTrigger implements ICriterionTrigger<BrewedPotionTrigge
         }
 
         public void trigger(PotionType potion) {
-            ArrayList var2 = null;
+            ArrayList<Listener> var2 = null;
 
             for (ICriterionTrigger.Listener var4 : this.listeners) {
                 if (((BrewedPotionTrigger.Instance) var4.getCriterionInstance()).test(potion)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
index 4393eec..d6b9dc6 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ChangeDimensionTrigger.java
@@ -107,7 +107,7 @@ public class ChangeDimensionTrigger implements ICriterionTrigger<ChangeDimension
         }
 
         public void trigger(DimensionType from, DimensionType to) {
-            ArrayList var3 = null;
+            ArrayList<Listener> var3 = null;
 
             for (ICriterionTrigger.Listener var5 : this.listeners) {
                 if (((ChangeDimensionTrigger.Instance) var5.getCriterionInstance()).test(from, to)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
index 6c274c0..fa4e68f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ConstructBeaconTrigger.java
@@ -98,7 +98,7 @@ public class ConstructBeaconTrigger implements ICriterionTrigger<ConstructBeacon
         }
 
         public void trigger(TileEntityBeacon beacon) {
-            ArrayList var2 = null;
+            ArrayList<Listener> var2 = null;
 
             for (ICriterionTrigger.Listener var4 : this.listeners) {
                 if (((ConstructBeaconTrigger.Instance) var4.getCriterionInstance()).test(beacon)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
index ca5db1c..f5d6a60 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ConsumeItemTrigger.java
@@ -98,7 +98,7 @@ public class ConsumeItemTrigger implements ICriterionTrigger<ConsumeItemTrigger.
         }
 
         public void trigger(ItemStack item) {
-            ArrayList var2 = null;
+            ArrayList<Listener> var2 = null;
 
             for (ICriterionTrigger.Listener var4 : this.listeners) {
                 if (((ConsumeItemTrigger.Instance) var4.getCriterionInstance()).test(item)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java b/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
index 383f4d7..a98d600 100644
--- a/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/CuredZombieVillagerTrigger.java
@@ -106,7 +106,7 @@ public class CuredZombieVillagerTrigger implements ICriterionTrigger<CuredZombie
         }
 
         public void trigger(EntityPlayerMP player, EntityZombie zombie, EntityVillager villager) {
-            ArrayList var4 = null;
+            ArrayList<Listener> var4 = null;
 
             for (ICriterionTrigger.Listener var6 : this.listeners) {
                 if (((CuredZombieVillagerTrigger.Instance) var6.getCriterionInstance()).test(player, zombie, villager)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
index 802e0a4..35e9fec 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EffectsChangedTrigger.java
@@ -97,7 +97,7 @@ public class EffectsChangedTrigger implements ICriterionTrigger<EffectsChangedTr
         }
 
         public void trigger(EntityPlayerMP player) {
-            ArrayList var2 = null;
+            ArrayList<Listener> var2 = null;
 
             for (ICriterionTrigger.Listener var4 : this.listeners) {
                 if (((EffectsChangedTrigger.Instance) var4.getCriterionInstance()).test(player)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
index f620424..f0c321f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnchantedItemTrigger.java
@@ -105,7 +105,7 @@ public class EnchantedItemTrigger implements ICriterionTrigger<EnchantedItemTrig
         }
 
         public void trigger(ItemStack item, int levelsIn) {
-            ArrayList var3 = null;
+            ArrayList<Listener> var3 = null;
 
             for (ICriterionTrigger.Listener var5 : this.listeners) {
                 if (((EnchantedItemTrigger.Instance) var5.getCriterionInstance()).test(item, levelsIn)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
index 8846948..ec702b9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EnterBlockTrigger.java
@@ -175,7 +175,7 @@ public class EnterBlockTrigger implements ICriterionTrigger<EnterBlockTrigger.In
         }
 
         public void trigger(IBlockState state) {
-            ArrayList var2 = null;
+            ArrayList<Listener> var2 = null;
 
             for (ICriterionTrigger.Listener var4 : this.listeners) {
                 if (((EnterBlockTrigger.Instance) var4.getCriterionInstance()).test(state)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java b/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
index c1fbcf5..83197ca 100644
--- a/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/EntityHurtPlayerTrigger.java
@@ -98,7 +98,7 @@ public class EntityHurtPlayerTrigger implements ICriterionTrigger<EntityHurtPlay
         }
 
         public void trigger(EntityPlayerMP player, DamageSource source, float amountDealt, float amountTaken, boolean wasBlocked) {
-            ArrayList var6 = null;
+            ArrayList<Listener> var6 = null;
 
             for (ICriterionTrigger.Listener var8 : this.listeners) {
                 if (((EntityHurtPlayerTrigger.Instance) var8.getCriterionInstance()).test(player, source, amountDealt, amountTaken, wasBlocked)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
index a28b814..d855045 100644
--- a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
@@ -150,7 +150,7 @@ public class InventoryChangeTrigger implements ICriterionTrigger<InventoryChange
         }
 
         public void trigger(InventoryPlayer inventory) {
-            ArrayList var2 = null;
+            ArrayList<Listener> var2 = null;
 
             for (ICriterionTrigger.Listener var4 : this.listeners) {
                 if (((InventoryChangeTrigger.Instance) var4.getCriterionInstance()).test(inventory)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
index fba5073..dbc42ee 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
@@ -110,7 +110,7 @@ public class ItemDurabilityTrigger implements ICriterionTrigger<ItemDurabilityTr
         }
 
         public void trigger(ItemStack item, int newDurability) {
-            ArrayList var3 = null;
+            ArrayList<Listener> var3 = null;
 
             for (ICriterionTrigger.Listener var5 : this.listeners) {
                 if (((ItemDurabilityTrigger.Instance) var5.getCriterionInstance()).test(item, newDurability)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java b/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
index f98b29d..cb35669 100644
--- a/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/KilledTrigger.java
@@ -104,7 +104,7 @@ public class KilledTrigger implements ICriterionTrigger<KilledTrigger.Instance>
         }
 
         public void trigger(EntityPlayerMP player, Entity entity, DamageSource source) {
-            ArrayList var4 = null;
+            ArrayList<Listener> var4 = null;
 
             for (ICriterionTrigger.Listener var6 : this.listeners) {
                 if (((KilledTrigger.Instance) var6.getCriterionInstance()).test(player, entity, source)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java b/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
index 76454c0..80b0243 100644
--- a/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/LevitationTrigger.java
@@ -104,7 +104,7 @@ public class LevitationTrigger implements ICriterionTrigger<LevitationTrigger.In
         }
 
         public void trigger(EntityPlayerMP player, Vec3d startPos, int durationIn) {
-            ArrayList var4 = null;
+            ArrayList<Listener> var4 = null;
 
             for (ICriterionTrigger.Listener var6 : this.listeners) {
                 if (((LevitationTrigger.Instance) var6.getCriterionInstance()).test(player, startPos, durationIn)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java b/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
index 534eeda..4e1f91a 100644
--- a/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/NetherTravelTrigger.java
@@ -111,7 +111,7 @@ public class NetherTravelTrigger implements ICriterionTrigger<NetherTravelTrigge
         }
 
         public void trigger(WorldServer world, Vec3d enteredNetherPosition, double x, double y, double z) {
-            ArrayList var9 = null;
+            ArrayList<Listener> var9 = null;
 
             for (ICriterionTrigger.Listener var11 : this.listeners) {
                 if (((NetherTravelTrigger.Instance) var11.getCriterionInstance()).test(world, enteredNetherPosition, x, y, z)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
index 729df50..fa93f2d 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlacedBlockTrigger.java
@@ -190,7 +190,7 @@ public class PlacedBlockTrigger implements ICriterionTrigger<PlacedBlockTrigger.
         }
 
         public void trigger(IBlockState state, BlockPos pos, WorldServer world, ItemStack item) {
-            ArrayList var5 = null;
+            ArrayList<Listener> var5 = null;
 
             for (ICriterionTrigger.Listener var7 : this.listeners) {
                 if (((PlacedBlockTrigger.Instance) var7.getCriterionInstance()).test(state, pos, world, item)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
index bbe92d7..d96199e 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PlayerHurtEntityTrigger.java
@@ -106,7 +106,7 @@ public class PlayerHurtEntityTrigger implements ICriterionTrigger<PlayerHurtEnti
         }
 
         public void trigger(EntityPlayerMP player, Entity entity, DamageSource source, float dealt, float taken, boolean blocked) {
-            ArrayList var7 = null;
+            ArrayList<Listener> var7 = null;
 
             for (ICriterionTrigger.Listener var9 : this.listeners) {
                 if (((PlayerHurtEntityTrigger.Instance) var9.getCriterionInstance()).test(player, entity, source, dealt, taken, blocked)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/PositionTrigger.java b/src/main/java/net/minecraft/advancements/critereon/PositionTrigger.java
index 9053054..30f89e1 100644
--- a/src/main/java/net/minecraft/advancements/critereon/PositionTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/PositionTrigger.java
@@ -101,7 +101,7 @@ public class PositionTrigger implements ICriterionTrigger<PositionTrigger.Instan
         }
 
         public void trigger(WorldServer world, double x, double y, double z) {
-            ArrayList var8 = null;
+            ArrayList<Listener> var8 = null;
 
             for (ICriterionTrigger.Listener var10 : this.listeners) {
                 if (((PositionTrigger.Instance) var10.getCriterionInstance()).test(world, x, y, z)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java b/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
index d82134d..3d7b2fe 100644
--- a/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/RecipeUnlockedTrigger.java
@@ -107,7 +107,7 @@ public class RecipeUnlockedTrigger implements ICriterionTrigger<RecipeUnlockedTr
         }
 
         public void trigger(IRecipe recipe) {
-            ArrayList var2 = null;
+            ArrayList<Listener> var2 = null;
 
             for (ICriterionTrigger.Listener var4 : this.listeners) {
                 if (((RecipeUnlockedTrigger.Instance) var4.getCriterionInstance()).test(recipe)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java b/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
index efb7783..930ef4b 100644
--- a/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/SummonedEntityTrigger.java
@@ -98,7 +98,7 @@ public class SummonedEntityTrigger implements ICriterionTrigger<SummonedEntityTr
         }
 
         public void trigger(EntityPlayerMP player, Entity entity) {
-            ArrayList var3 = null;
+            ArrayList<Listener> var3 = null;
 
             for (ICriterionTrigger.Listener var5 : this.listeners) {
                 if (((SummonedEntityTrigger.Instance) var5.getCriterionInstance()).test(player, entity)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java b/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
index 61bf66f..d3a25db 100644
--- a/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/TameAnimalTrigger.java
@@ -97,7 +97,7 @@ public class TameAnimalTrigger implements ICriterionTrigger<TameAnimalTrigger.In
         }
 
         public void trigger(EntityPlayerMP player, EntityAnimal entity) {
-            ArrayList var3 = null;
+            ArrayList<Listener> var3 = null;
 
             for (ICriterionTrigger.Listener var5 : this.listeners) {
                 if (((TameAnimalTrigger.Instance) var5.getCriterionInstance()).test(player, entity)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
index 64d354c..e017820 100644
--- a/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/UsedEnderEyeTrigger.java
@@ -100,7 +100,7 @@ public class UsedEnderEyeTrigger implements ICriterionTrigger<UsedEnderEyeTrigge
         }
 
         public void trigger(double distanceSq) {
-            ArrayList var3 = null;
+            ArrayList<Listener> var3 = null;
 
             for (ICriterionTrigger.Listener var5 : this.listeners) {
                 if (((UsedEnderEyeTrigger.Instance) var5.getCriterionInstance()).test(distanceSq)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java b/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
index 4c7626f..63ed6b9 100644
--- a/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/UsedTotemTrigger.java
@@ -97,7 +97,7 @@ public class UsedTotemTrigger implements ICriterionTrigger<UsedTotemTrigger.Inst
         }
 
         public void trigger(ItemStack item) {
-            ArrayList var2 = null;
+            ArrayList<Listener> var2 = null;
 
             for (ICriterionTrigger.Listener var4 : this.listeners) {
                 if (((UsedTotemTrigger.Instance) var4.getCriterionInstance()).test(item)) {
diff --git a/src/main/java/net/minecraft/advancements/critereon/VillagerTradeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/VillagerTradeTrigger.java
index ff00678..7aaa63f 100644
--- a/src/main/java/net/minecraft/advancements/critereon/VillagerTradeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/VillagerTradeTrigger.java
@@ -106,7 +106,7 @@ public class VillagerTradeTrigger implements ICriterionTrigger<VillagerTradeTrig
         }
 
         public void trigger(EntityPlayerMP player, EntityVillager villager, ItemStack item) {
-            ArrayList var4 = null;
+            ArrayList<Listener> var4 = null;
 
             for (ICriterionTrigger.Listener var6 : this.listeners) {
                 if (((VillagerTradeTrigger.Instance) var6.getCriterionInstance()).test(player, villager, item)) {
diff --git a/src/main/java/net/minecraft/block/BlockCauldron.java b/src/main/java/net/minecraft/block/BlockCauldron.java
index da91c5d..4076a28 100644
--- a/src/main/java/net/minecraft/block/BlockCauldron.java
+++ b/src/main/java/net/minecraft/block/BlockCauldron.java
@@ -237,7 +237,7 @@ public class BlockCauldron extends Block {
     }
 
     private boolean changeLevel(World world, BlockPos blockposition, IBlockState iblockdata, int i, Entity entity, ChangeReason reason) {
-        int newLevel = MathHelper.clamp(i, 0, 3).intValue();
+        int newLevel = MathHelper.clamp(i, 0, 3);
         CauldronLevelChangeEvent event =
                 new CauldronLevelChangeEvent(
                         world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()),
diff --git a/src/main/java/net/minecraft/block/BlockDynamicLiquid.java b/src/main/java/net/minecraft/block/BlockDynamicLiquid.java
index adca1ef..1d9c688 100644
--- a/src/main/java/net/minecraft/block/BlockDynamicLiquid.java
+++ b/src/main/java/net/minecraft/block/BlockDynamicLiquid.java
@@ -117,7 +117,7 @@ public class BlockDynamicLiquid extends BlockLiquid {
                 this.tryFlowInto(worldIn, pos.down(), iblockdata2, i + 8);
             }
         } else if (i >= 0 && (i == 0 || this.isBlocked(worldIn, pos.down(), iblockdata2))) {
-            Set set = this.getPossibleFlowDirections(worldIn, pos);
+            Set<EnumFacing> set = this.getPossibleFlowDirections(worldIn, pos);
             int k = i + b0;
 
             if (i >= 8) {
diff --git a/src/main/java/net/minecraft/block/BlockRedstoneWire.java b/src/main/java/net/minecraft/block/BlockRedstoneWire.java
index f5ad9f7..a66e62c 100644
--- a/src/main/java/net/minecraft/block/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/block/BlockRedstoneWire.java
@@ -156,7 +156,7 @@ public class BlockRedstoneWire extends Block {
 
     private IBlockState updateSurroundingRedstone(World worldIn, BlockPos pos, IBlockState state) {
         state = this.calculateCurrentChanges(worldIn, pos, pos, state);
-        ArrayList arraylist = Lists.newArrayList(this.blocksNeedingUpdate);
+        ArrayList<BlockPos> arraylist = Lists.newArrayList(this.blocksNeedingUpdate);
         this.blocksNeedingUpdate.clear();
 
         for (BlockPos blockposition1 : arraylist) {
diff --git a/src/main/java/net/minecraft/block/BlockSapling.java b/src/main/java/net/minecraft/block/BlockSapling.java
index d998aea..475f1a8 100644
--- a/src/main/java/net/minecraft/block/BlockSapling.java
+++ b/src/main/java/net/minecraft/block/BlockSapling.java
@@ -63,8 +63,8 @@ public class BlockSapling extends BlockBush implements IGrowable {
                 worldIn.captureTreeGeneration = false;
 
                 if (worldIn.capturedBlockStates.size() > 0) {
-                    TreeType treeType = treeType;
-                    treeType = null;
+                    TreeType treeType = BlockSapling.treeType;
+                    BlockSapling.treeType = null;
                     Location location = new Location(worldIn.getWorld(), (double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
                     List<BlockState> blocks = (List) worldIn.capturedBlockStates.clone();
                     worldIn.capturedBlockStates.clear();
diff --git a/src/main/java/net/minecraft/block/BlockSponge.java b/src/main/java/net/minecraft/block/BlockSponge.java
index b6f901a..d8e10f8 100644
--- a/src/main/java/net/minecraft/block/BlockSponge.java
+++ b/src/main/java/net/minecraft/block/BlockSponge.java
@@ -53,7 +53,7 @@ public class BlockSponge extends Block {
 
     private boolean absorb(World worldIn, BlockPos pos) {
         LinkedList var3 = Lists.newLinkedList();
-        ArrayList var4 = Lists.newArrayList();
+        ArrayList<BlockPos> var4 = Lists.newArrayList();
         var3.add(new Tuple(pos, Integer.valueOf(0)));
         int var5 = 0;
 
diff --git a/src/main/java/net/minecraft/block/BlockStairs.java b/src/main/java/net/minecraft/block/BlockStairs.java
index 64c2279..4e628f2 100644
--- a/src/main/java/net/minecraft/block/BlockStairs.java
+++ b/src/main/java/net/minecraft/block/BlockStairs.java
@@ -272,7 +272,7 @@ public class BlockStairs extends Block {
 
     @Nullable
     public RayTraceResult collisionRayTrace(IBlockState blockState, World worldIn, BlockPos pos, Vec3d start, Vec3d end) {
-        ArrayList var6 = Lists.newArrayList();
+        ArrayList<RayTraceResult> var6 = Lists.newArrayList();
 
         for (AxisAlignedBB var8 : getCollisionBoxList(this.getActualState(blockState, worldIn, pos))) {
             var6.add(this.rayTrace(pos, start, end, var8));
diff --git a/src/main/java/net/minecraft/block/BlockTripWire.java b/src/main/java/net/minecraft/block/BlockTripWire.java
index c6cb2ae..1af4c3d 100644
--- a/src/main/java/net/minecraft/block/BlockTripWire.java
+++ b/src/main/java/net/minecraft/block/BlockTripWire.java
@@ -141,7 +141,7 @@ public class BlockTripWire extends Block {
         IBlockState iblockdata = worldIn.getBlockState(pos);
         boolean flag = ((Boolean) iblockdata.getValue(POWERED)).booleanValue();
         boolean flag1 = false;
-        List list = worldIn.getEntitiesWithinAABBExcludingEntity((Entity) null, iblockdata.getBoundingBox(worldIn, pos).offset(pos));
+        List<Entity> list = worldIn.getEntitiesWithinAABBExcludingEntity((Entity) null, iblockdata.getBoundingBox(worldIn, pos).offset(pos));
 
         if (!list.isEmpty()) {
             for (Entity entity : list) {
diff --git a/src/main/java/net/minecraft/block/properties/PropertyEnum.java b/src/main/java/net/minecraft/block/properties/PropertyEnum.java
index c6086f2..4b70166 100644
--- a/src/main/java/net/minecraft/block/properties/PropertyEnum.java
+++ b/src/main/java/net/minecraft/block/properties/PropertyEnum.java
@@ -27,7 +27,7 @@ public class PropertyEnum<T extends Enum<T> & IStringSerializable> extends Prope
                 throw new IllegalArgumentException("Multiple values have the same name '" + s1 + "'");
             }
 
-            this.nameToValue.put(s1, oenum);
+            this.nameToValue.put(s1, (T) oenum);
         }
     }
 
diff --git a/src/main/java/net/minecraft/block/state/BlockStateContainer.java b/src/main/java/net/minecraft/block/state/BlockStateContainer.java
index a4f420a..4ffd1a4 100644
--- a/src/main/java/net/minecraft/block/state/BlockStateContainer.java
+++ b/src/main/java/net/minecraft/block/state/BlockStateContainer.java
@@ -66,7 +66,7 @@ public class BlockStateContainer {
 
         this.properties = ImmutableSortedMap.copyOf(var3);
         LinkedHashMap var11 = Maps.newLinkedHashMap();
-        ArrayList var12 = Lists.newArrayList();
+        ArrayList<BlockStateContainer.StateImplementation> var12 = Lists.newArrayList();
 
         for (List var8 : Cartesian.cartesianProduct(this.getAllowedValues())) {
             Map var9 = MapPopulator.createMap(this.properties.values(), var8);
@@ -89,7 +89,7 @@ public class BlockStateContainer {
             throw new IllegalArgumentException("Block: " + block.getClass() + " has invalidly named property: " + var2);
         } else {
             for (Comparable var4 : property.getAllowedValues()) {
-                String var5 = property.getName(var4);
+                String var5 = property.getName((T) var4);
 
                 if (!NAME_PATTERN.matcher(var5).matches()) {
                     throw new IllegalArgumentException(
@@ -218,9 +218,9 @@ public class BlockStateContainer {
                     Entry var4 = (Entry) var3.next();
                     IProperty var5 = (IProperty) var4.getKey();
 
-                    for (Comparable var7 : var5.getAllowedValues()) {
+                    for (Object var7 : var5.getAllowedValues()) {
                         if (var7 != var4.getValue()) {
-                            var2.put(var5, var7, map.get(this.getPropertiesWithValue(var5, var7)));
+                            var2.put(var5, var7, map.get(this.getPropertiesWithValue(var5, (Comparable<?>) var7)));
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/block/state/pattern/FactoryBlockPattern.java b/src/main/java/net/minecraft/block/state/pattern/FactoryBlockPattern.java
index 62e1fdd..79a69bf 100644
--- a/src/main/java/net/minecraft/block/state/pattern/FactoryBlockPattern.java
+++ b/src/main/java/net/minecraft/block/state/pattern/FactoryBlockPattern.java
@@ -48,7 +48,7 @@ public class FactoryBlockPattern {
 
                     for (char var9 : var5.toCharArray()) {
                         if (!this.symbolMap.containsKey(Character.valueOf(var9))) {
-                            this.symbolMap.put(Character.valueOf(var9), (Object) null);
+                            this.symbolMap.put(Character.valueOf(var9), null);
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/command/CommandBase.java b/src/main/java/net/minecraft/command/CommandBase.java
index eab2b89..2906f64 100644
--- a/src/main/java/net/minecraft/command/CommandBase.java
+++ b/src/main/java/net/minecraft/command/CommandBase.java
@@ -459,7 +459,7 @@ public abstract class CommandBase implements ICommand {
             }
         } catch (RuntimeException var7) {
             try {
-                Map var2 = getBlockStatePropertyValueMap(p_190794_0_, p_190794_1_);
+                Map<IProperty<?>, Comparable<?>> var2 = getBlockStatePropertyValueMap(p_190794_0_, p_190794_1_);
                 IBlockState var3 = p_190794_0_.getDefaultState();
 
                 for (Entry var5 : var2.entrySet()) {
@@ -489,7 +489,7 @@ public abstract class CommandBase implements ICommand {
                     }
                 };
             } catch (RuntimeException var3) {
-                final Map var2 = getBlockStatePropertyValueMap(p_190791_0_, p_190791_1_);
+                final Map<IProperty<?>, Comparable<?>> var2 = getBlockStatePropertyValueMap(p_190791_0_, p_190791_1_);
                 return new Predicate<IBlockState>() {
                     public boolean apply(@Nullable IBlockState var1) {
                         if (var1 != null && p_190791_0_ == var1.getBlock()) {
diff --git a/src/main/java/net/minecraft/command/CommandClone.java b/src/main/java/net/minecraft/command/CommandClone.java
index 020c6c8..f3a212a 100644
--- a/src/main/java/net/minecraft/command/CommandClone.java
+++ b/src/main/java/net/minecraft/command/CommandClone.java
@@ -81,9 +81,9 @@ public class CommandClone extends CommandBase {
                             }
 
                             ArrayList var15 = Lists.newArrayList();
-                            ArrayList var16 = Lists.newArrayList();
+                            ArrayList<StaticCloneData> var16 = Lists.newArrayList();
                             ArrayList var17 = Lists.newArrayList();
-                            LinkedList var18 = Lists.newLinkedList();
+                            LinkedList<BlockPos> var18 = Lists.newLinkedList();
                             BlockPos var19 = new BlockPos(var8.minX - var7.minX, var8.minY - var7.minY, var8.minZ - var7.minZ);
 
                             for (int var20 = var7.minZ; var20 <= var7.maxZ; ++var20) {
@@ -129,11 +129,11 @@ public class CommandClone extends CommandBase {
                                 }
                             }
 
-                            ArrayList var31 = Lists.newArrayList();
+                            ArrayList<StaticCloneData> var31 = Lists.newArrayList();
                             var31.addAll(var15);
                             var31.addAll(var16);
                             var31.addAll(var17);
-                            List var34 = Lists.reverse(var31);
+                            List<StaticCloneData> var34 = Lists.reverse(var31);
 
                             for (CommandClone.StaticCloneData var41 : var34) {
                                 TileEntity var46 = var13.getTileEntity(var41.pos);
@@ -171,7 +171,7 @@ public class CommandClone extends CommandBase {
                                 var13.notifyNeighborsRespectDebug(var44.pos, var44.blockState.getBlock(), false);
                             }
 
-                            List var40 = var13.getPendingBlockUpdates(var7, false);
+                            List<NextTickListEntry> var40 = var13.getPendingBlockUpdates(var7, false);
 
                             if (var40 != null) {
                                 for (NextTickListEntry var48 : var40) {
diff --git a/src/main/java/net/minecraft/command/CommandDebug.java b/src/main/java/net/minecraft/command/CommandDebug.java
index 40315f1..84178fe 100644
--- a/src/main/java/net/minecraft/command/CommandDebug.java
+++ b/src/main/java/net/minecraft/command/CommandDebug.java
@@ -172,8 +172,4 @@ public class CommandDebug extends CommandBase {
     public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args, @Nullable BlockPos targetPos) {
         return args.length == 1 ? getListOfStringsMatchingLastWord(args, new String[] {"start", "stop"}) : Collections.emptyList();
     }
-
-    public int compareTo(ICommand o) {
-        return this.compareTo(o);
-    }
 }
diff --git a/src/main/java/net/minecraft/command/CommandExecuteAt.java b/src/main/java/net/minecraft/command/CommandExecuteAt.java
index 4259898..eec8aa8 100644
--- a/src/main/java/net/minecraft/command/CommandExecuteAt.java
+++ b/src/main/java/net/minecraft/command/CommandExecuteAt.java
@@ -105,8 +105,4 @@ public class CommandExecuteAt extends CommandBase {
     public boolean isUsernameIndex(String[] args, int index) {
         return index == 0;
     }
-
-    public int compareTo(ICommand o) {
-        return this.compareTo(o);
-    }
 }
diff --git a/src/main/java/net/minecraft/command/CommandFill.java b/src/main/java/net/minecraft/command/CommandFill.java
index 86bc6b8..6ee71bb 100644
--- a/src/main/java/net/minecraft/command/CommandFill.java
+++ b/src/main/java/net/minecraft/command/CommandFill.java
@@ -77,7 +77,7 @@ public class CommandFill extends CommandBase {
                     }
                 }
 
-                ArrayList var25 = Lists.newArrayList();
+                ArrayList<BlockPos> var25 = Lists.newArrayList();
                 var10 = 0;
 
                 for (int var15 = var8.getZ(); var15 <= var9.getZ(); ++var15) {
diff --git a/src/main/java/net/minecraft/command/CommandGameMode.java b/src/main/java/net/minecraft/command/CommandGameMode.java
index 741560e..cb1e969 100644
--- a/src/main/java/net/minecraft/command/CommandGameMode.java
+++ b/src/main/java/net/minecraft/command/CommandGameMode.java
@@ -66,8 +66,4 @@ public class CommandGameMode extends CommandBase {
     public boolean isUsernameIndex(String[] args, int index) {
         return index == 1;
     }
-
-    public int compareTo(ICommand o) {
-        return this.compareTo(o);
-    }
 }
diff --git a/src/main/java/net/minecraft/command/CommandGameRule.java b/src/main/java/net/minecraft/command/CommandGameRule.java
index 5912ba7..9ae797c 100644
--- a/src/main/java/net/minecraft/command/CommandGameRule.java
+++ b/src/main/java/net/minecraft/command/CommandGameRule.java
@@ -84,8 +84,4 @@ public class CommandGameRule extends CommandBase {
     private GameRules getOverWorldGameRules(MinecraftServer server) {
         return server.getWorld(0).getGameRules();
     }
-
-    public int compareTo(ICommand o) {
-        return this.compareTo(o);
-    }
 }
diff --git a/src/main/java/net/minecraft/command/CommandHandler.java b/src/main/java/net/minecraft/command/CommandHandler.java
index 2916629..6131df2 100644
--- a/src/main/java/net/minecraft/command/CommandHandler.java
+++ b/src/main/java/net/minecraft/command/CommandHandler.java
@@ -45,7 +45,7 @@ public abstract class CommandHandler implements ICommandManager {
                 sender.sendMessage(var15);
             } else if (var5.checkPermission(this.getServer(), sender)) {
                 if (var7 > -1) {
-                    List var16 = EntitySelector.matchEntities(sender, var3[var7], Entity.class);
+                    List<Entity> var16 = EntitySelector.matchEntities(sender, var3[var7], Entity.class);
                     String var9 = var3[var7];
                     sender.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, var16.size());
 
diff --git a/src/main/java/net/minecraft/command/CommandSpreadPlayers.java b/src/main/java/net/minecraft/command/CommandSpreadPlayers.java
index b600662..aeca542 100644
--- a/src/main/java/net/minecraft/command/CommandSpreadPlayers.java
+++ b/src/main/java/net/minecraft/command/CommandSpreadPlayers.java
@@ -267,10 +267,6 @@ public class CommandSpreadPlayers extends CommandBase {
         return args.length >= 1 && args.length <= 2 ? getTabCompletionCoordinateXZ(args, 0, targetPos) : Collections.emptyList();
     }
 
-    public int compareTo(ICommand o) {
-        return this.compareTo(o);
-    }
-
     static class Position {
         double x;
         double z;
diff --git a/src/main/java/net/minecraft/command/CommandStats.java b/src/main/java/net/minecraft/command/CommandStats.java
index 73f08ca..5a8b67c 100644
--- a/src/main/java/net/minecraft/command/CommandStats.java
+++ b/src/main/java/net/minecraft/command/CommandStats.java
@@ -159,7 +159,7 @@ public class CommandStats extends CommandBase {
     }
 
     protected List<String> getObjectiveNames(MinecraftServer server) {
-        Collection var2 = server.getWorld(0).getScoreboard().getScoreObjectives();
+        Collection<ScoreObjective> var2 = server.getWorld(0).getScoreboard().getScoreObjectives();
         ArrayList var3 = Lists.newArrayList();
 
         for (ScoreObjective var5 : var2) {
diff --git a/src/main/java/net/minecraft/command/CommandTP.java b/src/main/java/net/minecraft/command/CommandTP.java
index 1bc618d..3bcbd7f 100644
--- a/src/main/java/net/minecraft/command/CommandTP.java
+++ b/src/main/java/net/minecraft/command/CommandTP.java
@@ -150,8 +150,4 @@ public class CommandTP extends CommandBase {
     public boolean isUsernameIndex(String[] args, int index) {
         return index == 0;
     }
-
-    public int compareTo(ICommand o) {
-        return this.compareTo(o);
-    }
 }
diff --git a/src/main/java/net/minecraft/command/EntitySelector.java b/src/main/java/net/minecraft/command/EntitySelector.java
index 12b7bfd..38c05f3 100644
--- a/src/main/java/net/minecraft/command/EntitySelector.java
+++ b/src/main/java/net/minecraft/command/EntitySelector.java
@@ -105,7 +105,7 @@ public class EntitySelector {
 
     @Nullable
     public static ITextComponent matchEntitiesToTextComponent(ICommandSender sender, String token) throws CommandException {
-        List var2 = matchEntities(sender, token, Entity.class);
+        List<Entity> var2 = matchEntities(sender, token, Entity.class);
 
         if (var2.isEmpty()) {
             return null;
@@ -133,12 +133,12 @@ public class EntitySelector {
                 String var5 = var3.group(1);
                 BlockPos var6 = getBlockPosFromArguments(var4, sender.getPosition());
                 Vec3d var7 = getPosFromArguments(var4, sender.getPositionVector());
-                List var8 = getWorlds(sender, var4);
+                List<World> var8 = getWorlds(sender, var4);
                 ArrayList var9 = Lists.newArrayList();
 
                 for (World var11 : var8) {
                     if (var11 != null) {
-                        ArrayList var12 = Lists.newArrayList();
+                        ArrayList<Predicate> var12 = Lists.newArrayList();
                         var12.addAll(getTypePredicates(var4, var5));
                         var12.addAll(getXpLevelPredicates(var4));
                         var12.addAll(getGamemodePredicates(var4));
@@ -170,13 +170,13 @@ public class EntitySelector {
                                     }
                                 }
 
-                                return Lists.newArrayList(var13);
+                                return Lists.newArrayList((T) var13);
                             }
 
                             return Collections.<T>emptyList();
                         }
 
-                        var9.addAll(filterResults(var4, targetClass, var12, var5, var11, var6));
+                        var9.addAll(filterResults(var4, targetClass, (List) var12, var5, var11, var6));
                     }
                 }
 
@@ -277,7 +277,7 @@ public class EntitySelector {
                 var2 = var2.substring(1);
             }
 
-            final GameType var4;
+            GameType var4;
             try {
                 int var5 = Integer.parseInt(var2);
                 var4 = GameType.parseGameTypeWithDefault(var5, GameType.NOT_SET);
@@ -285,6 +285,7 @@ public class EntitySelector {
                 var4 = GameType.parseGameTypeWithDefault(var2, GameType.NOT_SET);
             }
 
+            GameType finalVar = var4;
             var1.add(
                     new Predicate<Entity>() {
                         public boolean apply(@Nullable Entity var1) {
@@ -293,7 +294,7 @@ public class EntitySelector {
                             } else {
                                 EntityPlayerMP var2 = (EntityPlayerMP) var1;
                                 GameType var3x = var2.interactionManager.getGameType();
-                                return var3 ? var3x != var4 : var3x == var4;
+                                return var3 ? var3x != finalVar : var3x == finalVar;
                             }
                         }
                     });
@@ -303,7 +304,7 @@ public class EntitySelector {
 
     private static List<Predicate<Entity>> getTeamPredicates(Map<String, String> params) {
         ArrayList var1 = Lists.newArrayList();
-        final String var2 = getArgument(params, ARGUMENT_TEAM_NAME);
+        String var2 = getArgument(params, ARGUMENT_TEAM_NAME);
         final boolean var3 = var2 != null && var2.startsWith("!");
 
         if (var3) {
@@ -311,6 +312,7 @@ public class EntitySelector {
         }
 
         if (var2 != null) {
+            String s = var2;
             var1.add(
                     new Predicate<Entity>() {
                         public boolean apply(@Nullable Entity var1) {
@@ -320,7 +322,7 @@ public class EntitySelector {
                                 EntityLivingBase var2x = (EntityLivingBase) var1;
                                 Team var3x = var2x.getTeam();
                                 String var4 = var3x == null ? "" : var3x.getName();
-                                return var4.equals(var2) != var3;
+                                return var4.equals(s) != var3;
                             }
                         }
                     });
@@ -330,7 +332,7 @@ public class EntitySelector {
     }
 
     private static List<Predicate<Entity>> getScorePredicates(final ICommandSender sender, Map<String, String> params) {
-        final Map var2 = getScoreMap(params);
+        final Map<String, Integer> var2 = getScoreMap(params);
         return (List<Predicate<Entity>>)
                 (var2.isEmpty()
                         ? Collections.emptyList()
@@ -383,18 +385,19 @@ public class EntitySelector {
 
     private static List<Predicate<Entity>> getNamePredicates(Map<String, String> params) {
         ArrayList var1 = Lists.newArrayList();
-        final String var2 = getArgument(params, ARGUMENT_PLAYER_NAME);
+        String var2 = getArgument(params, ARGUMENT_PLAYER_NAME);
         final boolean var3 = var2 != null && var2.startsWith("!");
 
         if (var3) {
             var2 = var2.substring(1);
         }
 
+        final String s = var2;
         if (var2 != null) {
             var1.add(
                     new Predicate<Entity>() {
                         public boolean apply(@Nullable Entity var1) {
-                            return var1 != null && var1.getName().equals(var2) != var3;
+                            return var1 != null && var1.getName().equals(s) != var3;
                         }
                     });
         }
@@ -404,23 +407,24 @@ public class EntitySelector {
 
     private static List<Predicate<Entity>> getTagPredicates(Map<String, String> params) {
         ArrayList var1 = Lists.newArrayList();
-        final String var2 = getArgument(params, ARGUMENT_ENTITY_TAG);
+        String var2 = getArgument(params, ARGUMENT_ENTITY_TAG);
         final boolean var3 = var2 != null && var2.startsWith("!");
 
         if (var3) {
             var2 = var2.substring(1);
         }
 
+        final String s = var2;
         if (var2 != null) {
             var1.add(
                     new Predicate<Entity>() {
                         public boolean apply(@Nullable Entity var1) {
                             if (var1 == null) {
                                 return false;
-                            } else if ("".equals(var2)) {
+                            } else if ("".equals(s)) {
                                 return var1.getTags().isEmpty() != var3;
                             } else {
-                                return var1.getTags().contains(var2) != var3;
+                                return var1.getTags().contains(s) != var3;
                             }
                         }
                     });
@@ -593,7 +597,7 @@ public class EntitySelector {
         Entity var7 = sender.getCommandSenderEntity();
 
         if (var7 != null && targetClass.isAssignableFrom(var7.getClass()) && var6 == 1 && matchingEntities.contains(var7) && !"r".equals(type)) {
-            matchingEntities = Lists.newArrayList(var7);
+            matchingEntities = Lists.newArrayList((T[]) new Entity[] { var7 });
         }
 
         if (var6 != 0) {
diff --git a/src/main/java/net/minecraft/command/server/CommandBanIp.java b/src/main/java/net/minecraft/command/server/CommandBanIp.java
index 50cd95b..5624a80 100644
--- a/src/main/java/net/minecraft/command/server/CommandBanIp.java
+++ b/src/main/java/net/minecraft/command/server/CommandBanIp.java
@@ -67,7 +67,7 @@ public class CommandBanIp extends CommandBase {
     protected void banIp(MinecraftServer server, ICommandSender sender, String ipAddress, @Nullable String banReason) {
         UserListIPBansEntry var5 = new UserListIPBansEntry(ipAddress, (Date) null, sender.getName(), (Date) null, banReason);
         server.getPlayerList().getBannedIPs().addEntry(var5);
-        List var6 = server.getPlayerList().getPlayersMatchingAddress(ipAddress);
+        List<EntityPlayerMP> var6 = server.getPlayerList().getPlayersMatchingAddress(ipAddress);
         String[] var7 = new String[var6.size()];
         int var8 = 0;
 
diff --git a/src/main/java/net/minecraft/command/server/CommandScoreboard.java b/src/main/java/net/minecraft/command/server/CommandScoreboard.java
index a9f3b73..98f1eb1 100644
--- a/src/main/java/net/minecraft/command/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/command/server/CommandScoreboard.java
@@ -226,7 +226,7 @@ public class CommandScoreboard extends CommandBase {
         if (var4 < 0) {
             return false;
         } else {
-            ArrayList var13 = Lists.newArrayList(this.getScoreboard(server).getObjectiveNames());
+            ArrayList<String> var13 = Lists.newArrayList(this.getScoreboard(server).getObjectiveNames());
             String var6 = args[var4];
             ArrayList var7 = Lists.newArrayList();
 
@@ -481,7 +481,7 @@ public class CommandScoreboard extends CommandBase {
             sender.sendMessage(var8);
             sender.sendMessage(new TextComponentString(joinNiceString(var7.toArray())));
         } else {
-            Collection var10 = var5.getTeams();
+            Collection<ScorePlayerTeam> var10 = var5.getTeams();
             sender.setCommandStat(CommandResultStats.Type.QUERY_RESULT, var10.size());
 
             if (var10.isEmpty()) {
@@ -616,7 +616,7 @@ public class CommandScoreboard extends CommandBase {
         ScorePlayerTeam var6 = this.convertToTeam(args[startIndex], server);
 
         if (var6 != null) {
-            ArrayList var7 = Lists.newArrayList(var6.getMembershipCollection());
+            ArrayList<String> var7 = Lists.newArrayList(var6.getMembershipCollection());
             sender.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, var7.size());
 
             if (var7.isEmpty()) {
@@ -640,7 +640,7 @@ public class CommandScoreboard extends CommandBase {
 
     protected void listObjectives(ICommandSender sender, MinecraftServer server) throws CommandException {
         Scoreboard var3 = this.getScoreboard(server);
-        Collection var4 = var3.getScoreObjectives();
+        Collection<ScoreObjective> var4 = var3.getScoreObjectives();
 
         if (var4.isEmpty()) {
             throw new CommandException("commands.scoreboard.objectives.list.empty", new Object[0]);
@@ -694,7 +694,7 @@ public class CommandScoreboard extends CommandBase {
 
         if (args.length > startIndex) {
             String var6 = getEntityName(server, sender, args[startIndex]);
-            Map var7 = var5.getObjectivesForEntity(var6);
+            Map<ScoreObjective, Score> var7 = var5.getObjectivesForEntity(var6);
             sender.setCommandStat(CommandResultStats.Type.QUERY_RESULT, var7.size());
 
             if (var7.isEmpty()) {
@@ -1096,7 +1096,7 @@ public class CommandScoreboard extends CommandBase {
     }
 
     protected List<String> getObjectiveNames(boolean writableOnly, MinecraftServer server) {
-        Collection var3 = this.getScoreboard(server).getScoreObjectives();
+        Collection<ScoreObjective> var3 = this.getScoreboard(server).getScoreObjectives();
         ArrayList var4 = Lists.newArrayList();
 
         for (ScoreObjective var6 : var3) {
@@ -1109,7 +1109,7 @@ public class CommandScoreboard extends CommandBase {
     }
 
     protected List<String> getTriggerNames(MinecraftServer server) {
-        Collection var2 = this.getScoreboard(server).getScoreObjectives();
+        Collection<ScoreObjective> var2 = this.getScoreboard(server).getScoreObjectives();
         ArrayList var3 = Lists.newArrayList();
 
         for (ScoreObjective var5 : var2) {
diff --git a/src/main/java/net/minecraft/command/server/CommandTeleport.java b/src/main/java/net/minecraft/command/server/CommandTeleport.java
index f44dcd2..fc43fbf 100644
--- a/src/main/java/net/minecraft/command/server/CommandTeleport.java
+++ b/src/main/java/net/minecraft/command/server/CommandTeleport.java
@@ -129,8 +129,4 @@ public class CommandTeleport extends CommandBase {
     public boolean isUsernameIndex(String[] args, int index) {
         return index == 0;
     }
-
-    public int compareTo(ICommand o) {
-        return this.compareTo(o);
-    }
 }
diff --git a/src/main/java/net/minecraft/crash/CrashReport.java b/src/main/java/net/minecraft/crash/CrashReport.java
index de74eae..9b3eed2 100644
--- a/src/main/java/net/minecraft/crash/CrashReport.java
+++ b/src/main/java/net/minecraft/crash/CrashReport.java
@@ -109,7 +109,7 @@ public class CrashReport {
                 new ICrashReportDetail() {
                     public String call() {
                         RuntimeMXBean runtimemxbean = ManagementFactory.getRuntimeMXBean();
-                        List list = runtimemxbean.getInputArguments();
+                        List<String> list = runtimemxbean.getInputArguments();
                         int i = 0;
                         StringBuilder stringbuilder = new StringBuilder();
 
@@ -141,7 +141,7 @@ public class CrashReport {
                         return this.call();
                     }
                 });
-        this.systemDetailsCategory.addDetail("CraftBukkit Information", new CraftCrashReport());
+        this.systemDetailsCategory.addDetail("CraftBukkit Information", (ICrashReportDetail) new CraftCrashReport());
     }
 
     public String getDescription() {
diff --git a/src/main/java/net/minecraft/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/enchantment/EnchantmentHelper.java
index 638d276..8ad2875 100644
--- a/src/main/java/net/minecraft/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/enchantment/EnchantmentHelper.java
@@ -160,7 +160,7 @@ public class EnchantmentHelper {
     }
 
     public static int getMaxEnchantmentLevel(Enchantment p_185284_0_, EntityLivingBase p_185284_1_) {
-        List var2 = p_185284_0_.getEntityEquipment(p_185284_1_);
+        List<ItemStack> var2 = p_185284_0_.getEntityEquipment(p_185284_1_);
 
         if (var2 == null) {
             return 0;
@@ -228,7 +228,7 @@ public class EnchantmentHelper {
     }
 
     public static ItemStack getEnchantedItem(Enchantment p_92099_0_, EntityLivingBase p_92099_1_) {
-        List var2 = p_92099_0_.getEntityEquipment(p_92099_1_);
+        List<ItemStack> var2 = p_92099_0_.getEntityEquipment(p_92099_1_);
 
         if (var2.isEmpty()) {
             return ItemStack.EMPTY;
@@ -267,7 +267,7 @@ public class EnchantmentHelper {
     }
 
     public static ItemStack addRandomEnchantment(Random random, ItemStack stack, int level, boolean allowTreasure) {
-        List var4 = buildEnchantmentList(random, stack, level, allowTreasure);
+        List<EnchantmentData> var4 = buildEnchantmentList(random, stack, level, allowTreasure);
         boolean var5 = stack.getItem() == Items.BOOK;
 
         if (var5) {
diff --git a/src/main/java/net/minecraft/entity/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/entity/EntityAreaEffectCloud.java
index 97430c5..0a736e5 100644
--- a/src/main/java/net/minecraft/entity/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/entity/EntityAreaEffectCloud.java
@@ -308,7 +308,7 @@ public class EntityAreaEffectCloud extends Entity {
                     }
                 }
 
-                ArrayList arraylist = Lists.newArrayList();
+                ArrayList<PotionEffect> arraylist = Lists.newArrayList();
 
                 for (PotionEffect mobeffect : this.potion.getEffects()) {
                     arraylist.add(
diff --git a/src/main/java/net/minecraft/entity/EntityLeashKnot.java b/src/main/java/net/minecraft/entity/EntityLeashKnot.java
index 911d8ba..6b73cb7 100644
--- a/src/main/java/net/minecraft/entity/EntityLeashKnot.java
+++ b/src/main/java/net/minecraft/entity/EntityLeashKnot.java
@@ -81,8 +81,7 @@ public class EntityLeashKnot extends EntityHanging {
         } else {
             boolean flag = false;
             double d0 = 7.0D;
-            List list =
-                    this.world.getEntitiesWithinAABB(
+            List<EntityLiving> list = this.world.getEntitiesWithinAABB(
                             EntityLiving.class,
                             new AxisAlignedBB(
                                     this.posX - 7.0D, this.posY - 7.0D, this.posZ - 7.0D, this.posX + 7.0D, this.posY + 7.0D, this.posZ + 7.0D));
diff --git a/src/main/java/net/minecraft/entity/EntityList.java b/src/main/java/net/minecraft/entity/EntityList.java
index a878ff8..ee64344 100644
--- a/src/main/java/net/minecraft/entity/EntityList.java
+++ b/src/main/java/net/minecraft/entity/EntityList.java
@@ -342,7 +342,7 @@ public class EntityList {
             KNOWN_TYPES.add(var4);
 
             while (OLD_NAMES.size() <= id) {
-                OLD_NAMES.add((Object) null);
+                OLD_NAMES.add(null);
             }
 
             OLD_NAMES.set(id, oldName);
diff --git a/src/main/java/net/minecraft/entity/EntityTracker.java b/src/main/java/net/minecraft/entity/EntityTracker.java
index 9b2bd3e..4cda706 100644
--- a/src/main/java/net/minecraft/entity/EntityTracker.java
+++ b/src/main/java/net/minecraft/entity/EntityTracker.java
@@ -140,7 +140,7 @@ public class EntityTracker {
         this.track(entityIn, trackingRange, updateFrequency, false);
     }
 
-    public void track(Entity entityIn, final int trackingRange, int updateFrequency, boolean sendVelocityUpdates) {
+    public void track(Entity entityIn, int trackingRange, int updateFrequency, boolean sendVelocityUpdates) {
         AsyncCatcher.catchOp("entity track");
         trackingRange = TrackingRange.getEntityTrackingRange(entityIn, trackingRange);
 
@@ -158,13 +158,14 @@ public class EntityTracker {
             CrashReport crashreport = CrashReport.makeCrashReport(var11, "Adding entity to track");
             CrashReportCategory crashreportsystemdetails = crashreport.makeCategory("Entity To Track");
             crashreportsystemdetails.addCrashSection("Tracking range", trackingRange + " blocks");
+            final int finalTrackingRange = trackingRange;
             crashreportsystemdetails.addDetail(
                     "Update interval",
                     new ICrashReportDetail() {
                         public String call() throws Exception {
-                            String s = "Once per " + trackingRange + " ticks";
+                            String s = "Once per " + finalTrackingRange + " ticks";
 
-                            if (trackingRange == Integer.MAX_VALUE) {
+                            if (finalTrackingRange == Integer.MAX_VALUE) {
                                 s = "Maximum (" + s + ")";
                             }
 
@@ -266,8 +267,8 @@ public class EntityTracker {
     }
 
     public void sendLeashedEntitiesInChunk(EntityPlayerMP player, Chunk chunkIn) {
-        ArrayList arraylist = Lists.newArrayList();
-        ArrayList arraylist1 = Lists.newArrayList();
+        ArrayList<Entity> arraylist = Lists.newArrayList();
+        ArrayList<Entity> arraylist1 = Lists.newArrayList();
 
         for (EntityTrackerEntry entitytrackerentry : this.entries) {
             Entity entity = entitytrackerentry.getTrackedEntity();
diff --git a/src/main/java/net/minecraft/entity/SharedMonsterAttributes.java b/src/main/java/net/minecraft/entity/SharedMonsterAttributes.java
index 012382a..0e99254 100644
--- a/src/main/java/net/minecraft/entity/SharedMonsterAttributes.java
+++ b/src/main/java/net/minecraft/entity/SharedMonsterAttributes.java
@@ -56,7 +56,7 @@ public class SharedMonsterAttributes {
         IAttribute iattribute = instance.getAttribute();
         nbttagcompound.setString("Name", iattribute.getName());
         nbttagcompound.setDouble("Base", instance.getBaseValue());
-        Collection collection = instance.getModifiers();
+        Collection<AttributeModifier> collection = instance.getModifiers();
 
         if (collection != null && !collection.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAIAvoidEntity.java b/src/main/java/net/minecraft/entity/ai/EntityAIAvoidEntity.java
index 43abb4d..74e9af0 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAIAvoidEntity.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAIAvoidEntity.java
@@ -62,7 +62,7 @@ public class EntityAIAvoidEntity<T extends Entity> extends EntityAIBase {
         if (var1.isEmpty()) {
             return false;
         } else {
-            this.closestLivingEntity = var1.get(0);
+            this.closestLivingEntity = (T) var1.get(0);
             Vec3d var2 =
                     RandomPositionGenerator.findRandomTargetBlockAwayFrom(
                             this.entity,
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAIFollow.java b/src/main/java/net/minecraft/entity/ai/EntityAIFollow.java
index c867abd..8e84bd3 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAIFollow.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAIFollow.java
@@ -40,7 +40,7 @@ public class EntityAIFollow extends EntityAIBase {
     }
 
     public boolean shouldExecute() {
-        List var1 =
+        List<EntityLiving> var1 =
                 this.entity.world.getEntitiesWithinAABB(
                         EntityLiving.class, this.entity.getEntityBoundingBox().grow((double) this.areaSize), this.followPredicate);
 
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAIFollowGolem.java b/src/main/java/net/minecraft/entity/ai/EntityAIFollowGolem.java
index 3f57660..5470372 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAIFollowGolem.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAIFollowGolem.java
@@ -21,7 +21,7 @@ public class EntityAIFollowGolem extends EntityAIBase {
         } else if (!this.villager.world.isDaytime()) {
             return false;
         } else {
-            List var1 = this.villager.world.getEntitiesWithinAABB(EntityIronGolem.class, this.villager.getEntityBoundingBox().grow(6.0D, 2.0D, 6.0D));
+            List<EntityIronGolem> var1 = this.villager.world.getEntitiesWithinAABB(EntityIronGolem.class, this.villager.getEntityBoundingBox().grow(6.0D, 2.0D, 6.0D));
 
             if (var1.isEmpty()) {
                 return false;
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAIFollowParent.java b/src/main/java/net/minecraft/entity/ai/EntityAIFollowParent.java
index a40e3c1..ee6774f 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAIFollowParent.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAIFollowParent.java
@@ -18,7 +18,7 @@ public class EntityAIFollowParent extends EntityAIBase {
         if (this.childAnimal.getGrowingAge() >= 0) {
             return false;
         } else {
-            List var1 =
+            List<EntityAnimal> var1 =
                     this.childAnimal.world.getEntitiesWithinAABB(
                             this.childAnimal.getClass(), this.childAnimal.getEntityBoundingBox().grow(8.0D, 4.0D, 8.0D));
             EntityAnimal var2 = null;
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAILlamaFollowCaravan.java b/src/main/java/net/minecraft/entity/ai/EntityAILlamaFollowCaravan.java
index 8592c4c..fac9ecd 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAILlamaFollowCaravan.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAILlamaFollowCaravan.java
@@ -17,7 +17,7 @@ public class EntityAILlamaFollowCaravan extends EntityAIBase {
 
     public boolean shouldExecute() {
         if (!this.llama.getLeashed() && !this.llama.inCaravan()) {
-            List var1 = this.llama.world.getEntitiesWithinAABB(this.llama.getClass(), this.llama.getEntityBoundingBox().grow(9.0D, 4.0D, 9.0D));
+            List<EntityLlama> var1 = this.llama.world.getEntitiesWithinAABB(this.llama.getClass(), this.llama.getEntityBoundingBox().grow(9.0D, 4.0D, 9.0D));
             EntityLlama var2 = null;
             double var3 = Double.MAX_VALUE;
 
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAIMate.java b/src/main/java/net/minecraft/entity/ai/EntityAIMate.java
index e0d7698..aebd762 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAIMate.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAIMate.java
@@ -64,7 +64,7 @@ public class EntityAIMate extends EntityAIBase {
     }
 
     private EntityAnimal getNearbyMate() {
-        List list = this.world.getEntitiesWithinAABB(this.mateClass, this.animal.getEntityBoundingBox().grow(8.0D));
+        List<EntityAnimal> list = this.world.getEntitiesWithinAABB(this.mateClass, this.animal.getEntityBoundingBox().grow(8.0D));
         double d0 = Double.MAX_VALUE;
         EntityAnimal entityanimal = null;
 
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java b/src/main/java/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
index 14aa8d7..7f86d51 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
@@ -49,21 +49,7 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
         this.sorter = new EntityAINearestAttackableTarget.Sorter(creature);
         this.setMutexBits(1);
         this.targetEntitySelector =
-                new Predicate() {
-                    public boolean apply(@Nullable T t0) {
-                        return t0 == null
-                                ? false
-                                : (targetSelector != null && !targetSelector.apply(t0)
-                                        ? false
-                                        : (!EntitySelectors.NOT_SPECTATING.apply(t0)
-                                                ? false
-                                                : EntityAINearestAttackableTarget.this.isSuitableTarget(t0, false)));
-                    }
-
-                    public boolean apply(@Nullable Object object) {
-                        return this.apply((EntityLivingBase) object);
-                    }
-                };
+                t0 -> t0 != null && ((targetSelector == null || targetSelector.apply(t0)) && (EntitySelectors.NOT_SPECTATING.apply(t0) && this.isSuitableTarget(t0, false)));
     }
 
     public boolean shouldExecute() {
@@ -78,12 +64,12 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
                 return false;
             } else {
                 Collections.sort(list, this.sorter);
-                this.targetEntity = list.get(0);
+                this.targetEntity = (T) list.get(0);
                 return true;
             }
         } else {
             this.targetEntity =
-                    this.taskOwner.world.getNearestAttackablePlayer(
+                    (T) this.taskOwner.world.getNearestAttackablePlayer(
                             this.taskOwner.posX,
                             this.taskOwner.posY + (double) this.taskOwner.getEyeHeight(),
                             this.taskOwner.posZ,
@@ -113,7 +99,7 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
                                     return this.apply(object);
                                 }
                             },
-                            this.targetEntitySelector);
+                            (Predicate<EntityPlayer>) this.targetEntitySelector);
             return this.targetEntity != null;
         }
     }
diff --git a/src/main/java/net/minecraft/entity/ai/EntityAIPlay.java b/src/main/java/net/minecraft/entity/ai/EntityAIPlay.java
index 2dae2a4..01a9f02 100644
--- a/src/main/java/net/minecraft/entity/ai/EntityAIPlay.java
+++ b/src/main/java/net/minecraft/entity/ai/EntityAIPlay.java
@@ -23,7 +23,7 @@ public class EntityAIPlay extends EntityAIBase {
         } else if (this.villager.getRNG().nextInt(400) != 0) {
             return false;
         } else {
-            List var1 = this.villager.world.getEntitiesWithinAABB(EntityVillager.class, this.villager.getEntityBoundingBox().grow(6.0D, 3.0D, 6.0D));
+            List<EntityVillager> var1 = this.villager.world.getEntitiesWithinAABB(EntityVillager.class, this.villager.getEntityBoundingBox().grow(6.0D, 3.0D, 6.0D));
             double var2 = Double.MAX_VALUE;
 
             for (EntityVillager var5 : var1) {
diff --git a/src/main/java/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java b/src/main/java/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
index d9d05c6..958713f 100644
--- a/src/main/java/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
+++ b/src/main/java/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
@@ -71,7 +71,7 @@ public class ModifiableAttributeInstance implements IAttributeInstance {
         if (this.getModifier(modifier.getID()) != null) {
             throw new IllegalArgumentException("Modifier is already applied on this attribute!");
         } else {
-            Object var2 = this.mapByName.get(modifier.getName());
+            Set<AttributeModifier> var2 = this.mapByName.get(modifier.getName());
 
             if (var2 == null) {
                 var2 = Sets.newHashSet();
diff --git a/src/main/java/net/minecraft/entity/boss/EntityDragon.java b/src/main/java/net/minecraft/entity/boss/EntityDragon.java
index f5eefdc..f12ca4d 100644
--- a/src/main/java/net/minecraft/entity/boss/EntityDragon.java
+++ b/src/main/java/net/minecraft/entity/boss/EntityDragon.java
@@ -451,7 +451,7 @@ public class EntityDragon extends EntityLiving implements IEntityMultiPart, IMob
         }
 
         if (this.rand.nextInt(10) == 0) {
-            List list = this.world.getEntitiesWithinAABB(EntityEnderCrystal.class, this.getEntityBoundingBox().grow(32.0D));
+            List<EntityEnderCrystal> list = this.world.getEntitiesWithinAABB(EntityEnderCrystal.class, this.getEntityBoundingBox().grow(32.0D));
             EntityEnderCrystal entityendercrystal = null;
             double d0 = Double.MAX_VALUE;
 
diff --git a/src/main/java/net/minecraft/entity/effect/EntityLightningBolt.java b/src/main/java/net/minecraft/entity/effect/EntityLightningBolt.java
index e4bc941..3596e9c 100644
--- a/src/main/java/net/minecraft/entity/effect/EntityLightningBolt.java
+++ b/src/main/java/net/minecraft/entity/effect/EntityLightningBolt.java
@@ -77,7 +77,7 @@ public class EntityLightningBolt extends EntityWeatherEffect {
             float pitch = 0.8F + this.rand.nextFloat() * 0.2F;
             int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
 
-            for (EntityPlayerMP player : this.world.playerEntities) {
+            for (EntityPlayerMP player : (List<EntityPlayerMP>) (List) this.world.playerEntities) {
                 double deltaX = this.posX - player.posX;
                 double deltaZ = this.posZ - player.posZ;
                 double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
diff --git a/src/main/java/net/minecraft/entity/item/EntityFallingBlock.java b/src/main/java/net/minecraft/entity/item/EntityFallingBlock.java
index bfbdae8..d68f7ee 100644
--- a/src/main/java/net/minecraft/entity/item/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/entity/item/EntityFallingBlock.java
@@ -212,7 +212,7 @@ public class EntityFallingBlock extends Entity {
             int i = MathHelper.ceil(distance - 1.0F);
 
             if (i > 0) {
-                ArrayList arraylist = Lists.newArrayList(this.world.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox()));
+                ArrayList<Entity> arraylist = Lists.newArrayList(this.world.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox()));
                 boolean flag = block == Blocks.ANVIL;
                 DamageSource damagesource = flag ? DamageSource.ANVIL : DamageSource.FALLING_BLOCK;
 
diff --git a/src/main/java/net/minecraft/entity/monster/EntityCreeper.java b/src/main/java/net/minecraft/entity/monster/EntityCreeper.java
index c0a5337..3f96555 100644
--- a/src/main/java/net/minecraft/entity/monster/EntityCreeper.java
+++ b/src/main/java/net/minecraft/entity/monster/EntityCreeper.java
@@ -256,7 +256,7 @@ public class EntityCreeper extends EntityMob {
     }
 
     private void spawnLingeringCloud() {
-        Collection collection = this.getActivePotionEffects();
+        Collection<PotionEffect> collection = this.getActivePotionEffects();
 
         if (!collection.isEmpty()) {
             EntityAreaEffectCloud entityareaeffectcloud = new EntityAreaEffectCloud(this.world, this.posX, this.posY, this.posZ);
diff --git a/src/main/java/net/minecraft/entity/monster/EntityElderGuardian.java b/src/main/java/net/minecraft/entity/monster/EntityElderGuardian.java
index fb1dd61..e82048a 100644
--- a/src/main/java/net/minecraft/entity/monster/EntityElderGuardian.java
+++ b/src/main/java/net/minecraft/entity/monster/EntityElderGuardian.java
@@ -72,7 +72,7 @@ public class EntityElderGuardian extends EntityGuardian {
 
         if ((this.ticksExisted + this.getEntityId()) % 1200 == 0) {
             Potion var2 = MobEffects.MINING_FATIGUE;
-            List var3 =
+            List<EntityPlayerMP> var3 =
                     this.world.getPlayers(
                             EntityPlayerMP.class,
                             new Predicate<EntityPlayerMP>() {
diff --git a/src/main/java/net/minecraft/entity/monster/EntityShulker.java b/src/main/java/net/minecraft/entity/monster/EntityShulker.java
index c37c45d..e452046 100644
--- a/src/main/java/net/minecraft/entity/monster/EntityShulker.java
+++ b/src/main/java/net/minecraft/entity/monster/EntityShulker.java
@@ -315,7 +315,7 @@ public class EntityShulker extends EntityGolem implements IMob {
             }
 
             if (d2 > 0.0D) {
-                List list = this.world.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox());
+                List<Entity> list = this.world.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox());
 
                 if (!list.isEmpty()) {
                     for (Entity entity : list) {
diff --git a/src/main/java/net/minecraft/entity/monster/EntityWitch.java b/src/main/java/net/minecraft/entity/monster/EntityWitch.java
index 38e1ad1..e0ddf77 100644
--- a/src/main/java/net/minecraft/entity/monster/EntityWitch.java
+++ b/src/main/java/net/minecraft/entity/monster/EntityWitch.java
@@ -104,7 +104,7 @@ public class EntityWitch extends EntityMob implements IRangedAttackMob {
                     this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, ItemStack.EMPTY);
 
                     if (var5.getItem() == Items.POTIONITEM) {
-                        List var6 = PotionUtils.getEffectsFromStack(var5);
+                        List<PotionEffect> var6 = PotionUtils.getEffectsFromStack(var5);
 
                         if (var6 != null) {
                             for (PotionEffect var4 : var6) {
diff --git a/src/main/java/net/minecraft/entity/passive/EntityChicken.java b/src/main/java/net/minecraft/entity/passive/EntityChicken.java
index 4a1bca1..34bc561 100644
--- a/src/main/java/net/minecraft/entity/passive/EntityChicken.java
+++ b/src/main/java/net/minecraft/entity/passive/EntityChicken.java
@@ -185,8 +185,4 @@ public class EntityChicken extends EntityAnimal {
     public void setChickenJockey(boolean jockey) {
         this.chickenJockey = jockey;
     }
-
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
 }
diff --git a/src/main/java/net/minecraft/entity/passive/EntityCow.java b/src/main/java/net/minecraft/entity/passive/EntityCow.java
index fcfbfab..6d58743 100644
--- a/src/main/java/net/minecraft/entity/passive/EntityCow.java
+++ b/src/main/java/net/minecraft/entity/passive/EntityCow.java
@@ -119,8 +119,4 @@ public class EntityCow extends EntityAnimal {
     public float getEyeHeight() {
         return this.isChild() ? this.height : 1.3F;
     }
-
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
 }
diff --git a/src/main/java/net/minecraft/entity/passive/EntityMooshroom.java b/src/main/java/net/minecraft/entity/passive/EntityMooshroom.java
index ab4fad1..f1b23d4 100644
--- a/src/main/java/net/minecraft/entity/passive/EntityMooshroom.java
+++ b/src/main/java/net/minecraft/entity/passive/EntityMooshroom.java
@@ -90,12 +90,4 @@ public class EntityMooshroom extends EntityCow {
     protected ResourceLocation getLootTable() {
         return LootTableList.ENTITIES_MUSHROOM_COW;
     }
-
-    public EntityCow createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
-
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
 }
diff --git a/src/main/java/net/minecraft/entity/passive/EntityOcelot.java b/src/main/java/net/minecraft/entity/passive/EntityOcelot.java
index 4288549..47eb7de 100644
--- a/src/main/java/net/minecraft/entity/passive/EntityOcelot.java
+++ b/src/main/java/net/minecraft/entity/passive/EntityOcelot.java
@@ -287,8 +287,4 @@ public class EntityOcelot extends EntityTameable {
 
         return livingdata;
     }
-
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
 }
diff --git a/src/main/java/net/minecraft/entity/passive/EntityPig.java b/src/main/java/net/minecraft/entity/passive/EntityPig.java
index 91a2cd0..6c24b67 100644
--- a/src/main/java/net/minecraft/entity/passive/EntityPig.java
+++ b/src/main/java/net/minecraft/entity/passive/EntityPig.java
@@ -274,8 +274,4 @@ public class EntityPig extends EntityAnimal {
     public boolean isBreedingItem(ItemStack stack) {
         return TEMPTATION_ITEMS.contains(stack.getItem());
     }
-
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
 }
diff --git a/src/main/java/net/minecraft/entity/passive/EntityRabbit.java b/src/main/java/net/minecraft/entity/passive/EntityRabbit.java
index 52fc388..c0fced4 100644
--- a/src/main/java/net/minecraft/entity/passive/EntityRabbit.java
+++ b/src/main/java/net/minecraft/entity/passive/EntityRabbit.java
@@ -388,10 +388,6 @@ public class EntityRabbit extends EntityAnimal {
         this.carrotTicks = 40;
     }
 
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
-
     static class AIAvoidEntity<T extends Entity> extends EntityAIAvoidEntity<T> {
         private final EntityRabbit rabbit;
 
diff --git a/src/main/java/net/minecraft/entity/passive/EntitySheep.java b/src/main/java/net/minecraft/entity/passive/EntitySheep.java
index 86f375b..182c923 100644
--- a/src/main/java/net/minecraft/entity/passive/EntitySheep.java
+++ b/src/main/java/net/minecraft/entity/passive/EntitySheep.java
@@ -309,10 +309,6 @@ public class EntitySheep extends EntityAnimal {
         return 0.95F * this.height;
     }
 
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
-
     static {
         for (EnumDyeColor enumcolor : EnumDyeColor.values()) {
             DYE_TO_RGB.put(enumcolor, createSheepColor(enumcolor));
diff --git a/src/main/java/net/minecraft/entity/passive/EntityVillager.java b/src/main/java/net/minecraft/entity/passive/EntityVillager.java
index f5fdf56..9f1d29d 100644
--- a/src/main/java/net/minecraft/entity/passive/EntityVillager.java
+++ b/src/main/java/net/minecraft/entity/passive/EntityVillager.java
@@ -1005,10 +1005,6 @@ public class EntityVillager extends EntityAgeable implements INpc, IMerchant {
         }
     }
 
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
-
     static class EmeraldForItems implements EntityVillager.ITradeList {
         public Item buyingItem;
         public EntityVillager.PriceInfo price;
diff --git a/src/main/java/net/minecraft/entity/passive/EntityWolf.java b/src/main/java/net/minecraft/entity/passive/EntityWolf.java
index 33c4f9e..95aaeac 100644
--- a/src/main/java/net/minecraft/entity/passive/EntityWolf.java
+++ b/src/main/java/net/minecraft/entity/passive/EntityWolf.java
@@ -467,10 +467,6 @@ public class EntityWolf extends EntityTameable {
         return !this.isAngry() && super.canBeLeashedTo(player);
     }
 
-    public EntityAgeable createChild(EntityAgeable ageable) {
-        return this.createChild(ageable);
-    }
-
     class AIAvoidEntity<T extends Entity> extends EntityAIAvoidEntity<T> {
         private final EntityWolf wolf;
 
diff --git a/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java b/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
index 7e8e63a..c722c96 100644
--- a/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
+++ b/src/main/java/net/minecraft/entity/player/EntityPlayerMP.java
@@ -505,7 +505,7 @@ public class EntityPlayerMP extends EntityPlayer implements IContainerListener {
     }
 
     private void updateScorePoints(IScoreCriteria criteria, int points) {
-        for (Score scoreboardscore : this.world.getServer().getScoreboardManager().getScoreboardScores(criteria, this.getName(), new ArrayList())) {
+        for (Score scoreboardscore : this.world.getServer().getScoreboardManager().getScoreboardScores(criteria, this.getName(), new ArrayList<>())) {
             scoreboardscore.setScorePoints(points);
         }
     }
@@ -559,7 +559,7 @@ public class EntityPlayerMP extends EntityPlayer implements IContainerListener {
             this.setSpectatingEntity(this);
 
             for (Score scoreboardscore :
-                    this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreCriteria.DEATH_COUNT, this.getName(), new ArrayList())) {
+                    this.world.getServer().getScoreboardManager().getScoreboardScores(IScoreCriteria.DEATH_COUNT, this.getName(), new ArrayList<>())) {
                 scoreboardscore.incrementScore();
             }
 
diff --git a/src/main/java/net/minecraft/entity/projectile/EntityDragonFireball.java b/src/main/java/net/minecraft/entity/projectile/EntityDragonFireball.java
index ca7ea78..3477cdc 100644
--- a/src/main/java/net/minecraft/entity/projectile/EntityDragonFireball.java
+++ b/src/main/java/net/minecraft/entity/projectile/EntityDragonFireball.java
@@ -30,7 +30,7 @@ public class EntityDragonFireball extends EntityFireball {
     protected void onImpact(RayTraceResult result) {
         if (result.entityHit == null || !result.entityHit.isEntityEqual(this.shootingEntity)) {
             if (!this.world.isRemote) {
-                List var2 = this.world.getEntitiesWithinAABB(EntityLivingBase.class, this.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D));
+                List<EntityLivingBase> var2 = this.world.getEntitiesWithinAABB(EntityLivingBase.class, this.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D));
                 EntityAreaEffectCloud var3 = new EntityAreaEffectCloud(this.world, this.posX, this.posY, this.posZ);
                 var3.setOwner(this.shootingEntity);
                 var3.setParticle(EnumParticleTypes.DRAGON_BREATH);
diff --git a/src/main/java/net/minecraft/entity/projectile/EntityFishHook.java b/src/main/java/net/minecraft/entity/projectile/EntityFishHook.java
index 3659da1..7b27c00 100644
--- a/src/main/java/net/minecraft/entity/projectile/EntityFishHook.java
+++ b/src/main/java/net/minecraft/entity/projectile/EntityFishHook.java
@@ -262,7 +262,7 @@ public class EntityFishHook extends Entity {
         }
 
         Entity entity = null;
-        List list =
+        List<Entity> list =
                 this.world.getEntitiesWithinAABBExcludingEntity(
                         this, this.getEntityBoundingBox().expand(this.motionX, this.motionY, this.motionZ).grow(1.0D));
         double d0 = 0.0D;
diff --git a/src/main/java/net/minecraft/entity/projectile/EntityLlamaSpit.java b/src/main/java/net/minecraft/entity/projectile/EntityLlamaSpit.java
index 992b1ec..637d394 100644
--- a/src/main/java/net/minecraft/entity/projectile/EntityLlamaSpit.java
+++ b/src/main/java/net/minecraft/entity/projectile/EntityLlamaSpit.java
@@ -110,7 +110,7 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
     @Nullable
     private Entity getHitEntity(Vec3d p_190538_1_, Vec3d p_190538_2_) {
         Entity entity = null;
-        List list =
+        List<Entity> list =
                 this.world.getEntitiesWithinAABBExcludingEntity(
                         this, this.getEntityBoundingBox().expand(this.motionX, this.motionY, this.motionZ).grow(1.0D));
         double d0 = 0.0D;
diff --git a/src/main/java/net/minecraft/entity/projectile/EntityPotion.java b/src/main/java/net/minecraft/entity/projectile/EntityPotion.java
index 8c72b6e..22e3468 100644
--- a/src/main/java/net/minecraft/entity/projectile/EntityPotion.java
+++ b/src/main/java/net/minecraft/entity/projectile/EntityPotion.java
@@ -131,7 +131,7 @@ public class EntityPotion extends EntityThrowable {
 
     private void applyWater() {
         AxisAlignedBB axisalignedbb = this.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D);
-        List list = this.world.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, WATER_SENSITIVE);
+        List<EntityLivingBase> list = this.world.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, WATER_SENSITIVE);
 
         if (!list.isEmpty()) {
             for (EntityLivingBase entityliving : list) {
@@ -146,7 +146,7 @@ public class EntityPotion extends EntityThrowable {
 
     private void applySplash(RayTraceResult p_190543_1_, List<PotionEffect> p_190543_2_) {
         AxisAlignedBB axisalignedbb = this.getEntityBoundingBox().grow(4.0D, 2.0D, 4.0D);
-        List list1 = this.world.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb);
+        List<EntityLivingBase> list1 = this.world.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb);
         Map<LivingEntity, Double> affected = new HashMap<LivingEntity, Double>();
 
         if (!list1.isEmpty()) {
diff --git a/src/main/java/net/minecraft/entity/projectile/EntityTippedArrow.java b/src/main/java/net/minecraft/entity/projectile/EntityTippedArrow.java
index b0e80d2..24fd0f5 100644
--- a/src/main/java/net/minecraft/entity/projectile/EntityTippedArrow.java
+++ b/src/main/java/net/minecraft/entity/projectile/EntityTippedArrow.java
@@ -41,7 +41,7 @@ public class EntityTippedArrow extends EntityArrow {
     public void setPotionEffect(ItemStack stack) {
         if (stack.getItem() == Items.TIPPED_ARROW) {
             this.potion = PotionUtils.getPotionFromItem(stack);
-            List list = PotionUtils.getFullEffectsFromItem(stack);
+            List<PotionEffect> list = PotionUtils.getFullEffectsFromItem(stack);
 
             if (!list.isEmpty()) {
                 for (PotionEffect mobeffect : list) {
diff --git a/src/main/java/net/minecraft/inventory/ContainerRepair.java b/src/main/java/net/minecraft/inventory/ContainerRepair.java
index 5a857ec..f7dbb89 100644
--- a/src/main/java/net/minecraft/inventory/ContainerRepair.java
+++ b/src/main/java/net/minecraft/inventory/ContainerRepair.java
@@ -138,7 +138,7 @@ public class ContainerRepair extends Container {
         } else {
             ItemStack itemstack1 = itemstack.copy();
             ItemStack itemstack2 = this.inputSlots.getStackInSlot(1);
-            Map map = EnchantmentHelper.getEnchantments(itemstack1);
+            Map<Enchantment, Integer> map = EnchantmentHelper.getEnchantments(itemstack1);
             int j = b0 + itemstack.getRepairCost() + (itemstack2.isEmpty() ? 0 : itemstack2.getRepairCost());
             this.materialCost = 0;
 
@@ -187,7 +187,7 @@ public class ContainerRepair extends Container {
                         }
                     }
 
-                    Map map1 = EnchantmentHelper.getEnchantments(itemstack2);
+                    Map<Enchantment, Integer> map1 = EnchantmentHelper.getEnchantments(itemstack2);
                     boolean flag1 = false;
                     boolean flag2 = false;
 
diff --git a/src/main/java/net/minecraft/item/ItemMonsterPlacer.java b/src/main/java/net/minecraft/item/ItemMonsterPlacer.java
index 8f87c89..8690294 100644
--- a/src/main/java/net/minecraft/item/ItemMonsterPlacer.java
+++ b/src/main/java/net/minecraft/item/ItemMonsterPlacer.java
@@ -107,7 +107,7 @@ public class ItemMonsterPlacer extends Item {
 
     protected double getYOffset(World p_190909_1_, BlockPos p_190909_2_) {
         AxisAlignedBB axisalignedbb = (new AxisAlignedBB(p_190909_2_)).expand(0.0D, -1.0D, 0.0D);
-        List list = p_190909_1_.getCollisionBoxes((Entity) null, axisalignedbb);
+        List<AxisAlignedBB> list = p_190909_1_.getCollisionBoxes((Entity) null, axisalignedbb);
 
         if (list.isEmpty()) {
             return 0.0D;
diff --git a/src/main/java/net/minecraft/item/crafting/ShapelessRecipes.java b/src/main/java/net/minecraft/item/crafting/ShapelessRecipes.java
index 9c347e1..fb47b6f 100644
--- a/src/main/java/net/minecraft/item/crafting/ShapelessRecipes.java
+++ b/src/main/java/net/minecraft/item/crafting/ShapelessRecipes.java
@@ -69,7 +69,7 @@ public class ShapelessRecipes implements IRecipe {
     }
 
     public boolean matches(InventoryCrafting inv, World worldIn) {
-        ArrayList arraylist = Lists.newArrayList(this.recipeItems);
+        ArrayList<Ingredient> arraylist = Lists.newArrayList(this.recipeItems);
 
         for (int i = 0; i < inv.getHeight(); ++i) {
             for (int j = 0; j < inv.getWidth(); ++j) {
diff --git a/src/main/java/net/minecraft/nbt/NBTTagCompound.java b/src/main/java/net/minecraft/nbt/NBTTagCompound.java
index 62a7f3a..d369b8f 100644
--- a/src/main/java/net/minecraft/nbt/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/nbt/NBTTagCompound.java
@@ -5,12 +5,7 @@ import com.google.common.collect.Maps;
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 import net.minecraft.crash.CrashReport;
@@ -291,7 +286,7 @@ public class NBTTagCompound extends NBTBase {
 
     public String toString() {
         StringBuilder var1 = new StringBuilder("{");
-        Object var2 = this.tagMap.keySet();
+        Collection<String> var2 = this.tagMap.keySet();
 
         if (LOGGER.isDebugEnabled()) {
             ArrayList var3 = Lists.newArrayList(this.tagMap.keySet());
diff --git a/src/main/java/net/minecraft/nbt/NBTUtil.java b/src/main/java/net/minecraft/nbt/NBTUtil.java
index 559ef7c..932bad9 100644
--- a/src/main/java/net/minecraft/nbt/NBTUtil.java
+++ b/src/main/java/net/minecraft/nbt/NBTUtil.java
@@ -206,7 +206,7 @@ public final class NBTUtil {
     }
 
     private static <T extends Comparable<T>> IBlockState setValueHelper(
-            IBlockState p_193590_0_, IProperty<T> p_193590_1_, String p_193590_2_, NBTTagCompound p_193590_3_, NBTTagCompound p_193590_4_) {
+            IBlockState p_193590_0_, IProperty p_193590_1_, String p_193590_2_, NBTTagCompound p_193590_3_, NBTTagCompound p_193590_4_) {
         Optional var5 = p_193590_1_.parseValue(p_193590_3_.getString(p_193590_2_));
 
         if (var5.isPresent()) {
diff --git a/src/main/java/net/minecraft/network/EnumConnectionState.java b/src/main/java/net/minecraft/network/EnumConnectionState.java
index 8dbddef..57a0864 100644
--- a/src/main/java/net/minecraft/network/EnumConnectionState.java
+++ b/src/main/java/net/minecraft/network/EnumConnectionState.java
@@ -282,7 +282,7 @@ public enum EnumConnectionState {
 
         if (var3 == null) {
             var3 = HashBiMap.create();
-            this.directionMaps.put(direction, var3);
+            this.directionMaps.put(direction, (BiMap<Integer, Class<? extends Packet<?>>>) var3);
         }
 
         if (((BiMap) var3).containsValue(packetClass)) {
@@ -328,7 +328,7 @@ public enum EnumConnectionState {
             STATES_BY_ID[var4 - -1] = var3;
 
             for (EnumPacketDirection var6 : var3.directionMaps.keySet()) {
-                for (Class var8 : ((BiMap) var3.directionMaps.get(var6)).values()) {
+                for (Class var8 : (var3.directionMaps.get(var6)).values()) {
                     if (STATES_BY_CLASS.containsKey(var8) && STATES_BY_CLASS.get(var8) != var3) {
                         throw new Error(
                                 "Packet " + var8 + " is already assigned to protocol " + STATES_BY_CLASS.get(var8) + " - can't reassign to " + var3);
diff --git a/src/main/java/net/minecraft/network/NetHandlerPlayServer.java b/src/main/java/net/minecraft/network/NetHandlerPlayServer.java
index 926bc88..2a28c98 100644
--- a/src/main/java/net/minecraft/network/NetHandlerPlayServer.java
+++ b/src/main/java/net/minecraft/network/NetHandlerPlayServer.java
@@ -193,7 +193,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer, ITickable {
     private boolean field_194403_g;
     private long field_194404_h;
     private volatile int chatSpamThresholdCount;
-    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(NetHandlerPlayServer.class, "chatThrottle");
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(NetHandlerPlayServer.class, "field_147374_l"); // chatSpamThresholdCount, SRG as reobf doesn't pick this field up
     private int itemDropThreshold;
     private final IntHashMap<Short> pendingTransactions = new IntHashMap<Short>();
     private double firstGoodX;
@@ -1354,8 +1354,11 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer, ITickable {
 
             if (!this.player.isDead && this.player.getChatVisibility() != EntityPlayer.EnumChatVisibility.HIDDEN) {
                 this.player.markPlayerActive();
-                final String s = packetIn.getMessage();
-                s = StringUtils.normalizeSpace(s);
+            // Paper start - Decompile fix
+            String str = packetIn.getMessage();
+            str = StringUtils.normalizeSpace(str);
+            final String s = str;
+            // Paper end
 
                 for (int i = 0; i < s.length(); ++i) {
                     if (!ChatAllowedCharacters.isAllowedCharacter(s.charAt(i))) {
@@ -2593,7 +2596,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer, ITickable {
                                     2);
                             break;
                         case AUTO:
-                            IBlockState iblockdata = Blocks.REPEATING_COMMAND_BLOCK.getDefaultState();
+                            iblockdata = Blocks.REPEATING_COMMAND_BLOCK.getDefaultState();
                             this.player.world.setBlockState(
                                     blockposition,
                                     iblockdata
@@ -2602,7 +2605,7 @@ public class NetHandlerPlayServer implements INetHandlerPlayServer, ITickable {
                                     2);
                             break;
                         case REDSTONE:
-                            IBlockState iblockdata = Blocks.COMMAND_BLOCK.getDefaultState();
+                            iblockdata = Blocks.COMMAND_BLOCK.getDefaultState();
                             this.player.world.setBlockState(
                                     blockposition,
                                     iblockdata
diff --git a/src/main/java/net/minecraft/network/NetworkManager.java b/src/main/java/net/minecraft/network/NetworkManager.java
index ab6507a..fd46f4a 100644
--- a/src/main/java/net/minecraft/network/NetworkManager.java
+++ b/src/main/java/net/minecraft/network/NetworkManager.java
@@ -131,7 +131,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         }
     }
 
-    protected void channelRead0(ChannelHandlerContext channelhandlercontext, Packet<?> packet) throws Exception {
+    protected void channelRead0(ChannelHandlerContext channelhandlercontext, Packet packet) throws Exception { // Paper - Decompile fix
         if (this.channel.isOpen()) {
             try {
                 packet.processPacket(this.packetListener);
diff --git a/src/main/java/net/minecraft/pathfinding/FlyingNodeProcessor.java b/src/main/java/net/minecraft/pathfinding/FlyingNodeProcessor.java
index b64b1f1..6bc22c0 100644
--- a/src/main/java/net/minecraft/pathfinding/FlyingNodeProcessor.java
+++ b/src/main/java/net/minecraft/pathfinding/FlyingNodeProcessor.java
@@ -44,7 +44,7 @@ public class FlyingNodeProcessor extends WalkNodeProcessor {
         PathNodeType var9 = this.getPathNodeType(this.entity, var8.getX(), var1, var8.getZ());
 
         if (this.entity.getPathPriority(var9) < 0.0F) {
-            HashSet var4 = Sets.newHashSet();
+            HashSet<BlockPos> var4 = Sets.newHashSet();
             var4.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double) var1, this.entity.getEntityBoundingBox().minZ));
             var4.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double) var1, this.entity.getEntityBoundingBox().maxZ));
             var4.add(new BlockPos(this.entity.getEntityBoundingBox().maxX, (double) var1, this.entity.getEntityBoundingBox().minZ));
@@ -235,7 +235,7 @@ public class FlyingNodeProcessor extends WalkNodeProcessor {
             int zSize,
             boolean canBreakDoorsIn,
             boolean canEnterDoorsIn) {
-        EnumSet var11 = EnumSet.noneOf(PathNodeType.class);
+        EnumSet<PathNodeType> var11 = EnumSet.noneOf(PathNodeType.class);
         PathNodeType var12 = PathNodeType.BLOCKED;
         BlockPos var13 = new BlockPos(entitylivingIn);
         var12 = this.getPathNodeType(blockaccessIn, x, y, z, xSize, ySize, zSize, canBreakDoorsIn, canEnterDoorsIn, var11, var12, var13);
diff --git a/src/main/java/net/minecraft/pathfinding/WalkNodeProcessor.java b/src/main/java/net/minecraft/pathfinding/WalkNodeProcessor.java
index 9f5f948..e13a17f 100644
--- a/src/main/java/net/minecraft/pathfinding/WalkNodeProcessor.java
+++ b/src/main/java/net/minecraft/pathfinding/WalkNodeProcessor.java
@@ -65,7 +65,7 @@ public class WalkNodeProcessor extends NodeProcessor {
         PathNodeType var10 = this.getPathNodeType(this.entity, var9.getX(), var1, var9.getZ());
 
         if (this.entity.getPathPriority(var10) < 0.0F) {
-            HashSet var4 = Sets.newHashSet();
+            HashSet<BlockPos> var4 = Sets.newHashSet();
             var4.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double) var1, this.entity.getEntityBoundingBox().minZ));
             var4.add(new BlockPos(this.entity.getEntityBoundingBox().minX, (double) var1, this.entity.getEntityBoundingBox().maxZ));
             var4.add(new BlockPos(this.entity.getEntityBoundingBox().maxX, (double) var1, this.entity.getEntityBoundingBox().minZ));
@@ -271,7 +271,7 @@ public class WalkNodeProcessor extends NodeProcessor {
             int zSize,
             boolean canBreakDoorsIn,
             boolean canEnterDoorsIn) {
-        EnumSet var11 = EnumSet.noneOf(PathNodeType.class);
+        EnumSet<PathNodeType> var11 = EnumSet.noneOf(PathNodeType.class);
         PathNodeType var12 = PathNodeType.BLOCKED;
         double var13 = (double) entitylivingIn.width / 2.0D;
         BlockPos var15 = new BlockPos(entitylivingIn);
diff --git a/src/main/java/net/minecraft/profiler/Snooper.java b/src/main/java/net/minecraft/profiler/Snooper.java
index 9ac5e0b..93ec3cf 100644
--- a/src/main/java/net/minecraft/profiler/Snooper.java
+++ b/src/main/java/net/minecraft/profiler/Snooper.java
@@ -84,7 +84,7 @@ public class Snooper {
 
     private void addJvmArgsToSnooper() {
         RuntimeMXBean var1 = ManagementFactory.getRuntimeMXBean();
-        List var2 = var1.getInputArguments();
+        List<String> var2 = var1.getInputArguments();
         int var3 = 0;
 
         for (String var5 : var2) {
diff --git a/src/main/java/net/minecraft/scoreboard/Scoreboard.java b/src/main/java/net/minecraft/scoreboard/Scoreboard.java
index 2110744..816059e 100644
--- a/src/main/java/net/minecraft/scoreboard/Scoreboard.java
+++ b/src/main/java/net/minecraft/scoreboard/Scoreboard.java
@@ -36,7 +36,7 @@ public class Scoreboard {
                 throw new IllegalArgumentException("An objective with the name '" + name + "' already exists!");
             } else {
                 var3 = new ScoreObjective(this, name, criteria);
-                Object var4 = this.scoreObjectiveCriterias.get(criteria);
+                List<ScoreObjective> var4 = this.scoreObjectiveCriterias.get(criteria);
 
                 if (var4 == null) {
                     var4 = Lists.newArrayList();
@@ -71,7 +71,7 @@ public class Scoreboard {
         if (username.length() > 40) {
             throw new IllegalArgumentException("The player name '" + username + "' is too long!");
         } else {
-            Object var3 = this.entitiesScoreObjectives.get(username);
+            Map<ScoreObjective, Score> var3 = this.entitiesScoreObjectives.get(username);
 
             if (var3 == null) {
                 var3 = Maps.newHashMap();
@@ -139,7 +139,7 @@ public class Scoreboard {
     }
 
     public Collection<Score> getScores() {
-        Collection var1 = this.entitiesScoreObjectives.values();
+        Collection<Map<ScoreObjective, Score>> var1 = this.entitiesScoreObjectives.values();
         ArrayList var2 = Lists.newArrayList();
 
         for (Map var4 : var1) {
diff --git a/src/main/java/net/minecraft/scoreboard/ServerScoreboard.java b/src/main/java/net/minecraft/scoreboard/ServerScoreboard.java
index d45f937..cf751ae 100644
--- a/src/main/java/net/minecraft/scoreboard/ServerScoreboard.java
+++ b/src/main/java/net/minecraft/scoreboard/ServerScoreboard.java
@@ -157,7 +157,7 @@ public class ServerScoreboard extends Scoreboard {
     }
 
     public void addObjective(ScoreObjective objective) {
-        List list = this.getCreatePackets(objective);
+        List<Packet<?>> list = this.getCreatePackets(objective);
 
         for (EntityPlayerMP entityplayer : this.scoreboardMCServer.getPlayerList().getPlayers()) {
             if (entityplayer.getBukkitEntity().getScoreboard().getHandle() == this) {
@@ -184,7 +184,7 @@ public class ServerScoreboard extends Scoreboard {
     }
 
     public void sendDisplaySlotRemovalPackets(ScoreObjective p_96546_1_) {
-        List list = this.getDestroyPackets(p_96546_1_);
+        List<Packet<?>> list = this.getDestroyPackets(p_96546_1_);
 
         for (EntityPlayerMP entityplayer : this.scoreboardMCServer.getPlayerList().getPlayers()) {
             if (entityplayer.getBukkitEntity().getScoreboard().getHandle() == this) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index a8dceab..a19f5b4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -36,7 +36,6 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
-import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
 import jline.console.ConsoleReader;
@@ -306,7 +305,7 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IThre
                 worlddata.checkName(worldNameIn);
 
                 if (this.isDemo()) {
-                    world = (WorldServer) (new WorldServerDemo(this, idatamanager, worlddata, dimension, this.profiler)).init();
+                    world = (WorldServer)(new WorldServerDemo(this, idatamanager, worlddata, dimension, this.profiler, Environment.getEnvironment(dimension), gen)).init(); // Paper - Decompiler fix
                 } else {
                     world =
                             (WorldServer)
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 872724d..de35d6f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -726,10 +726,6 @@ public class DedicatedServer extends MinecraftServer implements IServer {
         }
     }
 
-    public PlayerList getPlayerList() {
-        return this.getPlayerList();
-    }
-
     public PropertyManager getPropertyManager() {
         return this.settings;
     }
diff --git a/src/main/java/net/minecraft/server/management/PlayerList.java b/src/main/java/net/minecraft/server/management/PlayerList.java
index 56a9568..bb33113 100644
--- a/src/main/java/net/minecraft/server/management/PlayerList.java
+++ b/src/main/java/net/minecraft/server/management/PlayerList.java
@@ -471,7 +471,7 @@ public abstract class PlayerList {
 
     public EntityPlayerMP attemptLogin(NetHandlerLoginServer loginlistener, GameProfile gameprofile, String hostname) {
         UUID uuid = EntityPlayer.getUUID(gameprofile);
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList<EntityPlayerMP> arraylist = Lists.newArrayList();
 
         for (int i = 0; i < this.playerEntityList.size(); ++i) {
             EntityPlayerMP entityplayer = this.playerEntityList.get(i);
diff --git a/src/main/java/net/minecraft/server/management/PlayerProfileCache.java b/src/main/java/net/minecraft/server/management/PlayerProfileCache.java
index 6c1ecf3..278d3a9 100644
--- a/src/main/java/net/minecraft/server/management/PlayerProfileCache.java
+++ b/src/main/java/net/minecraft/server/management/PlayerProfileCache.java
@@ -201,7 +201,7 @@ public class PlayerProfileCache {
 
         try {
             bufferedreader = Files.newReader(this.usercacheFile, StandardCharsets.UTF_8);
-            List list = (List) JsonUtils.fromJson(this.gson, bufferedreader, TYPE);
+            List<ProfileEntry> list = (List) JsonUtils.fromJson(this.gson, bufferedreader, TYPE);
             this.usernameToProfileEntryMap.clear();
             this.uuidToProfileEntryMap.clear();
             this.gameProfiles.clear();
diff --git a/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java b/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
index 7b226c4..198d060 100644
--- a/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
+++ b/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
@@ -43,7 +43,7 @@ public class PreYggdrasilConverter {
     public static final File OLD_WHITELIST_FILE = new File("white-list.txt");
 
     static List<String> readFile(File inFile, Map<String, String[]> read) throws IOException {
-        List list = Files.readLines(inFile, StandardCharsets.UTF_8);
+        List<String> list = Files.readLines(inFile, StandardCharsets.UTF_8);
 
         for (String s : list) {
             s = s.trim();
@@ -156,7 +156,7 @@ public class PreYggdrasilConverter {
             }
 
             try {
-                HashMap hashmap = Maps.newHashMap();
+                HashMap<String, String[]> hashmap = Maps.newHashMap();
                 readFile(OLD_IPBAN_FILE, hashmap);
 
                 for (String s : hashmap.keySet()) {
diff --git a/src/main/java/net/minecraft/server/management/UserList.java b/src/main/java/net/minecraft/server/management/UserList.java
index 1a1caa2..644fd31 100644
--- a/src/main/java/net/minecraft/server/management/UserList.java
+++ b/src/main/java/net/minecraft/server/management/UserList.java
@@ -155,7 +155,7 @@ public class UserList<K, V extends UserListEntry<K>> {
 
     public void readSavedFile() throws IOException, FileNotFoundException {
         if (this.saveFile.exists()) {
-            Collection collection = null;
+            Collection<UserListEntry> collection = null;
             BufferedReader bufferedreader = null;
 
             try {
@@ -179,7 +179,7 @@ public class UserList<K, V extends UserListEntry<K>> {
 
                 for (UserListEntry jsonlistentry : collection) {
                     if (jsonlistentry.getValue() != null) {
-                        this.values.put(this.getObjectKey(jsonlistentry.getValue()), jsonlistentry);
+                        this.values.put(this.getObjectKey((K) jsonlistentry.getValue()), (V) jsonlistentry);
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/stats/StatList.java b/src/main/java/net/minecraft/stats/StatList.java
index b09b911..b7bfe2e 100644
--- a/src/main/java/net/minecraft/stats/StatList.java
+++ b/src/main/java/net/minecraft/stats/StatList.java
@@ -204,7 +204,7 @@ public class StatList {
     }
 
     private static void initCraftableStats() {
-        HashSet var0 = Sets.newHashSet();
+        HashSet<Item> var0 = Sets.newHashSet();
 
         for (IRecipe var2 : CraftingManager.REGISTRY) {
             ItemStack var3 = var2.getRecipeOutput();
diff --git a/src/main/java/net/minecraft/tileentity/TileEntityBeacon.java b/src/main/java/net/minecraft/tileentity/TileEntityBeacon.java
index e10ebdb..83149db 100644
--- a/src/main/java/net/minecraft/tileentity/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/tileentity/TileEntityBeacon.java
@@ -127,7 +127,7 @@ public class TileEntityBeacon extends TileEntityLockable implements ITickable, I
         return list;
     }
 
-    private void applyEffect(List list, Potion effects, int i, int b0) {
+    private void applyEffect(List<EntityPlayer> list, Potion effects, int i, int b0) {
         for (EntityPlayer entityhuman : list) {
             entityhuman.addPotionEffect(new net.minecraft.potion.PotionEffect(effects, i, b0, true, true));
         }
diff --git a/src/main/java/net/minecraft/tileentity/TileEntityPiston.java b/src/main/java/net/minecraft/tileentity/TileEntityPiston.java
index 9dd0761..ab0a013 100644
--- a/src/main/java/net/minecraft/tileentity/TileEntityPiston.java
+++ b/src/main/java/net/minecraft/tileentity/TileEntityPiston.java
@@ -153,7 +153,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                                     var11 * (double) var2.getFrontOffsetX(),
                                     var11 * (double) var2.getFrontOffsetY(),
                                     var11 * (double) var2.getFrontOffsetZ());
-                            MOVING_ENTITY.set((Object) null);
+                            MOVING_ENTITY.set(null);
 
                             if (!this.extending && this.shouldHeadBeRendered) {
                                 this.fixEntityWithinPistonBase(var10, var2, var3);
@@ -249,7 +249,7 @@ public class TileEntityPiston extends TileEntity implements ITickable {
                         var8 * (double) var7.getFrontOffsetX(),
                         var8 * (double) var7.getFrontOffsetY(),
                         var8 * (double) var7.getFrontOffsetZ());
-                MOVING_ENTITY.set((Object) null);
+                MOVING_ENTITY.set(null);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/util/ClassInheritanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInheritanceMultiMap.java
index d51218e..b4eea62 100644
--- a/src/main/java/net/minecraft/util/ClassInheritanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -33,7 +33,7 @@ public class ClassInheritanceMultiMap<T> extends AbstractSet<T> {
 
         for (Object object : this.values) {
             if (clazz.isAssignableFrom(object.getClass())) {
-                this.addForClass(object, clazz);
+                this.addForClass((T) object, clazz);
             }
         }
 
diff --git a/src/main/java/net/minecraft/util/EntitySelectors.java b/src/main/java/net/minecraft/util/EntitySelectors.java
index e7fcbbb..6761c9d 100644
--- a/src/main/java/net/minecraft/util/EntitySelectors.java
+++ b/src/main/java/net/minecraft/util/EntitySelectors.java
@@ -85,7 +85,6 @@ public final class EntitySelectors {
                                 }
                             }
                         });
-        return (Predicate<T>) ret;
     }
 
     public static Predicate<Entity> notRiding(final Entity p_191324_0_) {
diff --git a/src/main/java/net/minecraft/util/IntHashMap.java b/src/main/java/net/minecraft/util/IntHashMap.java
index dc4d498..881a250 100644
--- a/src/main/java/net/minecraft/util/IntHashMap.java
+++ b/src/main/java/net/minecraft/util/IntHashMap.java
@@ -23,7 +23,7 @@ public class IntHashMap<V> {
 
         for (IntHashMap.Entry var3 = this.slots[getSlotIndex(var2, this.slots.length)]; var3 != null; var3 = var3.nextEntry) {
             if (var3.hashEntry == hashEntry) {
-                return var3.valueEntry;
+                return (V) var3.valueEntry;
             }
         }
 
diff --git a/src/main/java/net/minecraft/util/IntIdentityHashBiMap.java b/src/main/java/net/minecraft/util/IntIdentityHashBiMap.java
index 8c34809..2425cb6 100644
--- a/src/main/java/net/minecraft/util/IntIdentityHashBiMap.java
+++ b/src/main/java/net/minecraft/util/IntIdentityHashBiMap.java
@@ -59,7 +59,7 @@ public class IntIdentityHashBiMap<K> implements IObjectIntIterable<K> {
 
         for (int var4 = 0; var4 < var2.length; ++var4) {
             if (var2[var4] != null) {
-                this.put(var2[var4], var3[var4]);
+                this.put((K) var2[var4], var3[var4]);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/util/LowerStringMap.java b/src/main/java/net/minecraft/util/LowerStringMap.java
index c59b833..660ba66 100644
--- a/src/main/java/net/minecraft/util/LowerStringMap.java
+++ b/src/main/java/net/minecraft/util/LowerStringMap.java
@@ -40,7 +40,7 @@ public class LowerStringMap<V> implements Map<String, V> {
 
     public void putAll(Map<? extends String, ? extends V> var1) {
         for (Entry var3 : var1.entrySet()) {
-            this.put((String) var3.getKey(), var3.getValue());
+            this.put((String) var3.getKey(), (V) var3.getValue());
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/MapPopulator.java b/src/main/java/net/minecraft/util/MapPopulator.java
index b17fd04..f62e959 100644
--- a/src/main/java/net/minecraft/util/MapPopulator.java
+++ b/src/main/java/net/minecraft/util/MapPopulator.java
@@ -14,7 +14,7 @@ public class MapPopulator {
         Iterator var3 = values.iterator();
 
         for (Object var5 : keys) {
-            map.put(var5, var3.next());
+            map.put((K) var5, (V) var3.next());
         }
 
         if (var3.hasNext()) {
diff --git a/src/main/java/net/minecraft/util/NonNullList.java b/src/main/java/net/minecraft/util/NonNullList.java
index f135a75..2744493 100644
--- a/src/main/java/net/minecraft/util/NonNullList.java
+++ b/src/main/java/net/minecraft/util/NonNullList.java
@@ -20,7 +20,7 @@ public class NonNullList<E> extends AbstractList<E> {
         Validate.notNull(fill);
         Object[] var2 = new Object[size];
         Arrays.fill(var2, fill);
-        return new NonNullList<E>(Arrays.asList(var2), fill);
+        return new NonNullList<E>(Arrays.asList((E[]) var2), fill);
     }
 
     public static <E> NonNullList<E> from(E defaultElementIn, E... elements) {
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixer.java b/src/main/java/net/minecraft/util/datafix/DataFixer.java
index 293506b..01616cc 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixer.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixer.java
@@ -93,7 +93,7 @@ public class DataFixer implements IDataFixer {
     }
 
     private <V> List<V> getTypeList(Map<IFixType, List<V>> map, IFixType type) {
-        Object var3 = (List) map.get(type);
+        List<V> var3 = (List) map.get(type);
 
         if (var3 == null) {
             var3 = Lists.newArrayList();
diff --git a/src/main/java/net/minecraft/util/math/Cartesian.java b/src/main/java/net/minecraft/util/math/Cartesian.java
index a926724..e53beef 100644
--- a/src/main/java/net/minecraft/util/math/Cartesian.java
+++ b/src/main/java/net/minecraft/util/math/Cartesian.java
@@ -44,7 +44,7 @@ public class Cartesian {
         private GetList() {}
 
         public List<T> apply(@Nullable Object[] var1) {
-            return Arrays.<T>asList(var1);
+            return Arrays.<T>asList((T[]) var1);
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/Teleporter.java b/src/main/java/net/minecraft/world/Teleporter.java
index c1fe323..ef01199 100644
--- a/src/main/java/net/minecraft/world/Teleporter.java
+++ b/src/main/java/net/minecraft/world/Teleporter.java
@@ -478,9 +478,5 @@ public class Teleporter {
             super(pos.getX(), pos.getY(), pos.getZ());
             this.lastUpdateTime = lastUpdate;
         }
-
-        public int compareTo(Vec3i o) {
-            return this.compareTo(o);
-        }
     }
 }
diff --git a/src/main/java/net/minecraft/world/World.java b/src/main/java/net/minecraft/world/World.java
index 87a5a9f..9b2e660 100644
--- a/src/main/java/net/minecraft/world/World.java
+++ b/src/main/java/net/minecraft/world/World.java
@@ -2482,7 +2482,7 @@ public abstract class World implements IBlockAccess {
         ArrayList arraylist = Lists.newArrayList();
 
         for (Entity entity : this.loadedEntityList) {
-            if (entityType.isAssignableFrom(entity.getClass()) && filter.apply(entity)) {
+            if (entityType.isAssignableFrom(entity.getClass()) && filter.apply((T) entity)) {
                 arraylist.add(entity);
             }
         }
@@ -2494,7 +2494,7 @@ public abstract class World implements IBlockAccess {
         ArrayList arraylist = Lists.newArrayList();
 
         for (Entity entity : this.playerEntities) {
-            if (playerType.isAssignableFrom(entity.getClass()) && filter.apply(entity)) {
+            if (playerType.isAssignableFrom(entity.getClass()) && filter.apply((T) entity)) {
                 arraylist.add(entity);
             }
         }
diff --git a/src/main/java/net/minecraft/world/WorldEntitySpawner.java b/src/main/java/net/minecraft/world/WorldEntitySpawner.java
index 42fd702..f60d787 100644
--- a/src/main/java/net/minecraft/world/WorldEntitySpawner.java
+++ b/src/main/java/net/minecraft/world/WorldEntitySpawner.java
@@ -32,7 +32,11 @@ public final class WorldEntitySpawner {
     private int getEntityCount(WorldServer server, Class oClass) {
         int i = 0;
 
-        for (Long coord : this.eligibleChunksForSpawning) {
+        // Paper - Decompile fix start
+        Iterator<Long> it = this.eligibleChunksForSpawning.iterator();
+        while (it.hasNext()) {
+            Long coord = it.next();
+            // Paper - Decompile fix end
             int x = LongHash.msw(coord.longValue());
             int z = LongHash.lsw(coord.longValue());
 
diff --git a/src/main/java/net/minecraft/world/WorldServer.java b/src/main/java/net/minecraft/world/WorldServer.java
index 166dd5f..a3adefa 100644
--- a/src/main/java/net/minecraft/world/WorldServer.java
+++ b/src/main/java/net/minecraft/world/WorldServer.java
@@ -457,7 +457,7 @@ public class WorldServer extends World implements IThreadListener {
     protected void wakeAllPlayers() {
         this.allPlayersSleeping = false;
 
-        for (EntityPlayer entityhuman : (List) this.playerEntities.stream().filter(EntityPlayer::isPlayerSleeping).collect(Collectors.toList())) {
+        for (EntityPlayer entityhuman : this.playerEntities.stream().filter(EntityPlayer::isPlayerSleeping).collect(Collectors.toList())) {
             entityhuman.wakeUpPlayer(false, false, true);
         }
 
@@ -1483,10 +1483,6 @@ public class WorldServer extends World implements IThreadListener {
         return this.functionManager;
     }
 
-    public IChunkProvider getChunkProvider() {
-        return this.getChunkProvider();
-    }
-
     static class ServerBlockEventList extends ArrayList<BlockEventData> {
         private ServerBlockEventList() {}
 
diff --git a/src/main/java/net/minecraft/world/WorldServerDemo.java b/src/main/java/net/minecraft/world/WorldServerDemo.java
index ff10d99..f27d4c0 100644
--- a/src/main/java/net/minecraft/world/WorldServerDemo.java
+++ b/src/main/java/net/minecraft/world/WorldServerDemo.java
@@ -4,14 +4,16 @@ import net.minecraft.profiler.Profiler;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+import org.bukkit.World;
+import org.bukkit.generator.ChunkGenerator;
 
 public class WorldServerDemo extends WorldServer {
     private static final long DEMO_WORLD_SEED = (long) "North Carolina".hashCode();
     public static final WorldSettings DEMO_WORLD_SETTINGS =
             (new WorldSettings(DEMO_WORLD_SEED, GameType.SURVIVAL, true, false, WorldType.DEFAULT)).enableBonusChest();
 
-    public WorldServerDemo(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo worldInfoIn, int dimensionId, Profiler profilerIn) {
-        super(server, saveHandlerIn, worldInfoIn, dimensionId, profilerIn);
+    public WorldServerDemo(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo worldInfoIn, int dimensionId, Profiler profilerIn, World.Environment p_i75_6_, ChunkGenerator p_i75_7_) { // Paper - Decompile fix
+        super(server, saveHandlerIn, worldInfoIn, dimensionId, profilerIn, p_i75_6_, p_i75_7_);
         this.worldInfo.populateFromWorldSettings(DEMO_WORLD_SETTINGS);
     }
 }
diff --git a/src/main/java/net/minecraft/world/chunk/Chunk.java b/src/main/java/net/minecraft/world/chunk/Chunk.java
index 4d7c86f..3545a43 100644
--- a/src/main/java/net/minecraft/world/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/chunk/Chunk.java
@@ -867,8 +867,8 @@ public class Chunk {
 
         for (int k = i; k <= j; ++k) {
             for (Entity entity : this.entityLists[k]) {
-                if (entityClass.isInstance(entity) && entity.getEntityBoundingBox().intersects(aabb) && (filter == null || filter.apply(entity))) {
-                    listToFill.add(entity);
+                if (entityClass.isInstance(entity) && entity.getEntityBoundingBox().intersects(aabb) && (filter == null || filter.apply((T) entity))) {
+                    listToFill.add((T) entity);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java b/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
index e18c8d0..16d8cc0 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -310,7 +310,7 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO {
         }
 
         nbttagcompound.setTag("TileEntities", nbttaglist2);
-        List list = world.getPendingBlockUpdates(chunk, false);
+        List<NextTickListEntry> list = world.getPendingBlockUpdates(chunk, false);
 
         if (list != null) {
             long k = world.getTotalWorldTime();
diff --git a/src/main/java/net/minecraft/world/end/DragonFightManager.java b/src/main/java/net/minecraft/world/end/DragonFightManager.java
index 6e1e636..c3b95bd 100644
--- a/src/main/java/net/minecraft/world/end/DragonFightManager.java
+++ b/src/main/java/net/minecraft/world/end/DragonFightManager.java
@@ -323,7 +323,7 @@ public class DragonFightManager {
             var1.add(var3);
         }
 
-        HashSet var5 = Sets.newHashSet(this.bossInfo.getPlayers());
+        HashSet<EntityPlayerMP> var5 = Sets.newHashSet(this.bossInfo.getPlayers());
         var5.removeAll(var1);
 
         for (EntityPlayerMP var4 : var5) {
diff --git a/src/main/java/net/minecraft/world/gen/FlatGeneratorInfo.java b/src/main/java/net/minecraft/world/gen/FlatGeneratorInfo.java
index 758b1b0..375b380 100644
--- a/src/main/java/net/minecraft/world/gen/FlatGeneratorInfo.java
+++ b/src/main/java/net/minecraft/world/gen/FlatGeneratorInfo.java
@@ -72,7 +72,7 @@ public class FlatGeneratorInfo {
                 }
 
                 var1.append(((String) var4.getKey()).toLowerCase(Locale.ROOT));
-                Map var5 = (Map) var4.getValue();
+                Map<String, String> var5 = (Map) var4.getValue();
 
                 if (!var5.isEmpty()) {
                     var1.append("(");
diff --git a/src/main/java/net/minecraft/world/gen/layer/GenLayer.java b/src/main/java/net/minecraft/world/gen/layer/GenLayer.java
index f2da85c..74aae33 100644
--- a/src/main/java/net/minecraft/world/gen/layer/GenLayer.java
+++ b/src/main/java/net/minecraft/world/gen/layer/GenLayer.java
@@ -49,7 +49,7 @@ public abstract class GenLayer {
         GenLayer var35 = GenLayerZoom.magnify(1000L, var8, 2);
         GenLayerBiomeEdge var36 = new GenLayerBiomeEdge(1000L, var35);
         GenLayer var9 = GenLayerZoom.magnify(1000L, var30, 2);
-        GenLayerHills var37 = new GenLayerHills(1000L, var36, var9);
+        GenLayer var37 = new GenLayerHills(1000L, var36, var9);
         GenLayer var31 = GenLayerZoom.magnify(1000L, var30, 2);
         var31 = GenLayerZoom.magnify(1000L, var31, var6);
         GenLayerRiver var33 = new GenLayerRiver(1L, var31);
diff --git a/src/main/java/net/minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java b/src/main/java/net/minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java
index a0966d1..e077b25 100644
--- a/src/main/java/net/minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java
+++ b/src/main/java/net/minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java
@@ -854,7 +854,7 @@ public class ComponentScatteredFeaturePieces {
                                     definedstructure.calculateConnectedPos(
                                             definedstructureinfo, new BlockPos(3, -1 - i * 3, 5), definedstructureinfo, new BlockPos(3, 5, 7)));
                     definedstructure2.addBlocksToWorldChunk(worldIn, blockposition2, definedstructureinfo);
-                    Map map = definedstructure2.getDataBlocks(blockposition2, definedstructureinfo);
+                    Map<BlockPos, String> map = definedstructure2.getDataBlocks(blockposition2, definedstructureinfo);
 
                     for (Entry entry : map.entrySet()) {
                         if ("chest".equals(entry.getValue())) {
diff --git a/src/main/java/net/minecraft/world/gen/structure/StructureComponentTemplate.java b/src/main/java/net/minecraft/world/gen/structure/StructureComponentTemplate.java
index 27e92f1..a303ded 100644
--- a/src/main/java/net/minecraft/world/gen/structure/StructureComponentTemplate.java
+++ b/src/main/java/net/minecraft/world/gen/structure/StructureComponentTemplate.java
@@ -50,7 +50,7 @@ public abstract class StructureComponentTemplate extends StructureComponent {
     public boolean addComponentParts(World worldIn, Random randomIn, StructureBoundingBox structureBoundingBoxIn) {
         this.placeSettings.setBoundingBox(structureBoundingBoxIn);
         this.template.addBlocksToWorld(worldIn, this.templatePosition, this.placeSettings, 18);
-        Map var4 = this.template.getDataBlocks(this.templatePosition, this.placeSettings);
+        Map<BlockPos, String> var4 = this.template.getDataBlocks(this.templatePosition, this.placeSettings);
 
         for (Entry var6 : var4.entrySet()) {
             String var7 = (String) var6.getValue();
diff --git a/src/main/java/net/minecraft/world/gen/structure/StructureEndCityPieces.java b/src/main/java/net/minecraft/world/gen/structure/StructureEndCityPieces.java
index 3a2d35f..87da4de 100644
--- a/src/main/java/net/minecraft/world/gen/structure/StructureEndCityPieces.java
+++ b/src/main/java/net/minecraft/world/gen/structure/StructureEndCityPieces.java
@@ -384,7 +384,7 @@ public class StructureEndCityPieces {
         if (p_191088_2_ > 8) {
             return false;
         } else {
-            ArrayList var7 = Lists.newArrayList();
+            ArrayList<StructureComponent> var7 = Lists.newArrayList();
 
             if (p_191088_1_.generate(p_191088_0_, p_191088_2_, p_191088_3_, p_191088_4_, var7, p_191088_6_)) {
                 boolean var8 = false;
diff --git a/src/main/java/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java b/src/main/java/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
index aeb9ce7..32b3940 100644
--- a/src/main/java/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
+++ b/src/main/java/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
@@ -608,7 +608,7 @@ public class StructureOceanMonumentPieces {
                 this.boundingBox = new StructureBoundingBox(p_i45599_2_, 39, p_i45599_3_, p_i45599_2_ + 58 - 1, 61, p_i45599_3_ + 58 - 1);
             }
 
-            List var6 = this.generateRoomGraph(p_i45599_1_);
+            List<RoomDefinition> var6 = this.generateRoomGraph(p_i45599_1_);
             this.sourceRoom.claimed = true;
             this.childPieces.add(new StructureOceanMonumentPieces.EntryRoom(var5, this.sourceRoom));
             this.childPieces.add(new StructureOceanMonumentPieces.MonumentCoreRoom(var5, this.coreRoom, p_i45599_1_));
@@ -762,7 +762,7 @@ public class StructureOceanMonumentPieces {
                             .connections[EnumFacing.UP.getIndex()]
                             .claimed =
                     true;
-            ArrayList var30 = Lists.newArrayList();
+            ArrayList<RoomDefinition> var30 = Lists.newArrayList();
 
             for (StructureOceanMonumentPieces.RoomDefinition var37 : var2) {
                 if (var37 != null) {
diff --git a/src/main/java/net/minecraft/world/gen/structure/WoodlandMansionPieces.java b/src/main/java/net/minecraft/world/gen/structure/WoodlandMansionPieces.java
index 7a159b2..9b56d79 100644
--- a/src/main/java/net/minecraft/world/gen/structure/WoodlandMansionPieces.java
+++ b/src/main/java/net/minecraft/world/gen/structure/WoodlandMansionPieces.java
@@ -282,7 +282,7 @@ public class WoodlandMansionPieces {
         }
 
         private void identifyRooms(WoodlandMansionPieces.SimpleGrid p_191116_1_, WoodlandMansionPieces.SimpleGrid p_191116_2_) {
-            ArrayList var3 = Lists.newArrayList();
+            ArrayList<Tuple> var3 = Lists.newArrayList();
 
             for (int var4 = 0; var4 < p_191116_1_.height; ++var4) {
                 for (int var5 = 0; var5 < p_191116_1_.width; ++var5) {
diff --git a/src/main/java/net/minecraft/world/gen/structure/template/Template.java b/src/main/java/net/minecraft/world/gen/structure/template/Template.java
index 43e4b61..94fa35f 100644
--- a/src/main/java/net/minecraft/world/gen/structure/template/Template.java
+++ b/src/main/java/net/minecraft/world/gen/structure/template/Template.java
@@ -105,7 +105,7 @@ public class Template {
     }
 
     private void takeEntitiesFromWorld(World worldIn, BlockPos startPos, BlockPos endPos) {
-        List var4 =
+        List<Entity> var4 =
                 worldIn.getEntitiesWithinAABB(
                         Entity.class,
                         new AxisAlignedBB(startPos, endPos),
diff --git a/src/main/java/net/minecraft/world/storage/WorldInfo.java b/src/main/java/net/minecraft/world/storage/WorldInfo.java
index e19ea32..588b516 100644
--- a/src/main/java/net/minecraft/world/storage/WorldInfo.java
+++ b/src/main/java/net/minecraft/world/storage/WorldInfo.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.storage;
 
 import com.google.common.collect.Maps;
+
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
@@ -603,7 +605,7 @@ public class WorldInfo {
         this.difficulty = newDifficulty;
         SPacketServerDifficulty packet = new SPacketServerDifficulty(this.getDifficulty(), this.isDifficultyLocked());
 
-        for (EntityPlayerMP player : this.world.playerEntities) {
+        for (EntityPlayerMP player : (List<EntityPlayerMP>) (List) this.world.playerEntities) {
             player.connection.sendPacket(packet);
         }
     }
diff --git a/src/main/java/net/minecraft/world/storage/loot/LootPool.java b/src/main/java/net/minecraft/world/storage/loot/LootPool.java
index 156d1a6..335e8cf 100644
--- a/src/main/java/net/minecraft/world/storage/loot/LootPool.java
+++ b/src/main/java/net/minecraft/world/storage/loot/LootPool.java
@@ -33,7 +33,7 @@ public class LootPool {
     }
 
     protected void createLootRoll(Collection<ItemStack> stacks, Random rand, LootContext context) {
-        ArrayList var4 = Lists.newArrayList();
+        ArrayList<LootEntry> var4 = Lists.newArrayList();
         int var5 = 0;
 
         for (LootEntry var9 : this.lootEntries) {
diff --git a/src/main/java/net/minecraft/world/storage/loot/LootTable.java b/src/main/java/net/minecraft/world/storage/loot/LootTable.java
index 5d4a969..f6e69b9 100644
--- a/src/main/java/net/minecraft/world/storage/loot/LootTable.java
+++ b/src/main/java/net/minecraft/world/storage/loot/LootTable.java
@@ -47,7 +47,7 @@ public class LootTable {
     }
 
     public void fillInventory(IInventory inventory, Random rand, LootContext context) {
-        List var4 = this.generateLootForPools(rand, context);
+        List<ItemStack> var4 = this.generateLootForPools(rand, context);
         List var5 = this.getEmptySlotsRandomized(inventory, rand);
         this.shuffleItems(var4, var5.size(), rand);
 
diff --git a/src/main/java/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java b/src/main/java/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
index c9de65f..c8944a5 100644
--- a/src/main/java/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
+++ b/src/main/java/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
@@ -57,7 +57,7 @@ public class EntityHasProperty implements LootCondition {
         }
 
         public EntityHasProperty deserialize(JsonObject json, JsonDeserializationContext context) {
-            Set var3 = JsonUtils.getJsonObject(json, "properties").entrySet();
+            Set<Entry<String, JsonElement>> var3 = JsonUtils.getJsonObject(json, "properties").entrySet();
             EntityProperty[] var4 = new EntityProperty[var3.size()];
             int var5 = 0;
 
diff --git a/src/main/java/net/minecraft/world/storage/loot/conditions/EntityHasScore.java b/src/main/java/net/minecraft/world/storage/loot/conditions/EntityHasScore.java
index 7b919f6..e6a5fb9 100644
--- a/src/main/java/net/minecraft/world/storage/loot/conditions/EntityHasScore.java
+++ b/src/main/java/net/minecraft/world/storage/loot/conditions/EntityHasScore.java
@@ -74,7 +74,7 @@ public class EntityHasScore implements LootCondition {
         }
 
         public EntityHasScore deserialize(JsonObject json, JsonDeserializationContext context) {
-            Set var3 = JsonUtils.getJsonObject(json, "scores").entrySet();
+            Set<Entry<String, JsonElement>> var3 = JsonUtils.getJsonObject(json, "scores").entrySet();
             LinkedHashMap var4 = Maps.newLinkedHashMap();
 
             for (Entry var6 : var3) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 6856dfa..5b4834a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -4,30 +4,20 @@ import com.google.common.base.Preconditions;
 import com.google.common.base.Predicate;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.io.File;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import java.util.UUID;
-import net.minecraft.block.BlockChorusFlower;
-import net.minecraft.block.BlockLeaves;
-import net.minecraft.block.BlockOldLeaf;
-import net.minecraft.block.BlockOldLog;
-import net.minecraft.block.BlockPlanks;
+import java.util.*;
+
+import net.minecraft.block.*;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.IEntityLivingData;
+import net.minecraft.entity.*;
+import net.minecraft.entity.boss.EntityDragon;
+import net.minecraft.entity.boss.EntityWither;
 import net.minecraft.entity.effect.EntityLightningBolt;
-import net.minecraft.entity.item.EntityFallingBlock;
-import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.*;
+import net.minecraft.entity.monster.*;
+import net.minecraft.entity.passive.*;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
-import net.minecraft.entity.projectile.EntityArrow;
-import net.minecraft.entity.projectile.EntitySpectralArrow;
-import net.minecraft.entity.projectile.EntityTippedArrow;
+import net.minecraft.entity.projectile.*;
 import net.minecraft.init.Blocks;
 import net.minecraft.network.Packet;
 import net.minecraft.network.play.server.SPacketCustomSound;
@@ -36,6 +26,7 @@ import net.minecraft.network.play.server.SPacketParticles;
 import net.minecraft.network.play.server.SPacketTimeUpdate;
 import net.minecraft.server.management.PlayerChunkMapEntry;
 import net.minecraft.tileentity.TileEntity;
+import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.IProgressUpdate;
 import net.minecraft.util.math.AxisAlignedBB;
@@ -83,6 +74,7 @@ import org.bukkit.World.Environment;
 import org.bukkit.World.Spigot;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockState;
@@ -93,17 +85,10 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.metadata.BlockMetadataStore;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.entity.Arrow;
+import org.bukkit.entity.*;
+import org.bukkit.entity.AbstractHorse;
 import org.bukkit.entity.Entity;
-import org.bukkit.entity.EntityType;
-import org.bukkit.entity.FallingBlock;
-import org.bukkit.entity.HumanEntity;
-import org.bukkit.entity.Item;
-import org.bukkit.entity.LightningStrike;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Player;
-import org.bukkit.entity.SpectralArrow;
-import org.bukkit.entity.TippedArrow;
+import org.bukkit.entity.minecart.*;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.event.world.SpawnChangeEvent;
 import org.bukkit.generator.BlockPopulator;
@@ -534,8 +519,8 @@ public class CraftWorld implements World {
                 gen = new WorldGenMegaJungle(true, 10, 20, iblockdata1, iblockdata2);
                 break;
             case SMALL_JUNGLE:
-                IBlockState iblockdata1 = Blocks.LOG.getDefaultState().withProperty(BlockOldLog.VARIANT, BlockPlanks.EnumType.JUNGLE);
-                IBlockState iblockdata2 =
+                iblockdata1 = Blocks.LOG.getDefaultState().withProperty(BlockOldLog.VARIANT, BlockPlanks.EnumType.JUNGLE);
+                iblockdata2 =
                         Blocks.LEAVES
                                 .getDefaultState()
                                 .withProperty(BlockOldLeaf.VARIANT, BlockPlanks.EnumType.JUNGLE)
@@ -543,8 +528,8 @@ public class CraftWorld implements World {
                 gen = new WorldGenTrees(true, 4 + rand.nextInt(7), iblockdata1, iblockdata2, false);
                 break;
             case COCOA_TREE:
-                IBlockState iblockdata1 = Blocks.LOG.getDefaultState().withProperty(BlockOldLog.VARIANT, BlockPlanks.EnumType.JUNGLE);
-                IBlockState iblockdata2 =
+                iblockdata1 = Blocks.LOG.getDefaultState().withProperty(BlockOldLog.VARIANT, BlockPlanks.EnumType.JUNGLE);
+                iblockdata2 =
                         Blocks.LEAVES
                                 .getDefaultState()
                                 .withProperty(BlockOldLeaf.VARIANT, BlockPlanks.EnumType.JUNGLE)
@@ -552,8 +537,8 @@ public class CraftWorld implements World {
                 gen = new WorldGenTrees(true, 4 + rand.nextInt(7), iblockdata1, iblockdata2, true);
                 break;
             case JUNGLE_BUSH:
-                IBlockState iblockdata1 = Blocks.LOG.getDefaultState().withProperty(BlockOldLog.VARIANT, BlockPlanks.EnumType.JUNGLE);
-                IBlockState iblockdata2 =
+                iblockdata1 = Blocks.LOG.getDefaultState().withProperty(BlockOldLog.VARIANT, BlockPlanks.EnumType.JUNGLE);
+                iblockdata2 =
                         Blocks.LEAVES
                                 .getDefaultState()
                                 .withProperty(BlockOldLeaf.VARIANT, BlockPlanks.EnumType.OAK)
@@ -819,7 +804,7 @@ public class CraftWorld implements World {
 
     @Deprecated
     public <T extends Entity> Collection<T> getEntitiesByClass(Class<T>... classes) {
-        return this.getEntitiesByClasses(classes);
+        return (Collection<T>) this.getEntitiesByClasses(classes);
     }
 
     public <T extends Entity> Collection<T> getEntitiesByClass(Class<T> clazz) {
@@ -833,7 +818,7 @@ public class CraftWorld implements World {
                     Class<?> bukkitClass = bukkitEntity.getClass();
 
                     if (clazz.isAssignableFrom(bukkitClass)) {
-                        list.add(bukkitEntity);
+                        list.add((T) bukkitEntity);
                     }
                 }
             }
@@ -1048,7 +1033,316 @@ public class CraftWorld implements World {
         return this.spawnFallingBlock(location, Material.getMaterial(blockId), blockData);
     }
 
-    public net.minecraft.entity.Entity createEntity(Location param1, Class<? extends Entity> param2) throws IllegalArgumentException {}
+    // Paper - fix decompile start
+    // FF doesn't even decompile this method at all, so we just patch the whole thing back in :\
+    public net.minecraft.entity.Entity createEntity(Location param1, Class<? extends Entity> param2) throws IllegalArgumentException {if (param1 == null || param2 == null) {
+        throw new IllegalArgumentException("Location or entity class cannot be null");
+    }
+
+        net.minecraft.entity.Entity entity = null;
+
+        double x = param1.getX();
+        double y = param1.getY();
+        double z = param1.getZ();
+        float pitch = param1.getPitch();
+        float yaw = param1.getYaw();
+
+        // order is important for some of these
+        if (Boat.class.isAssignableFrom(param2)) {
+            entity = new net.minecraft.entity.item.EntityBoat(world, x, y, z);
+            entity.setLocationAndAngles(x, y, z, yaw, pitch);
+        } else if (FallingBlock.class.isAssignableFrom(param2)) {
+            entity = new EntityFallingBlock(world, x, y, z, world.getBlockState(new BlockPos(x, y, z)));
+        } else if (Projectile.class.isAssignableFrom(param2)) {
+            if (Snowball.class.isAssignableFrom(param2)) {
+                entity = new EntitySnowball(world, x, y, z);
+            } else if (Egg.class.isAssignableFrom(param2)) {
+                entity = new EntityEgg(world, x, y, z);
+            } else if (Arrow.class.isAssignableFrom(param2)) {
+                if (TippedArrow.class.isAssignableFrom(param2)) {
+                    entity = new EntityTippedArrow(world);
+                    ((EntityTippedArrow) entity).setType(CraftPotionUtil.fromBukkit(new PotionData(PotionType.WATER, false, false)));
+                } else if (SpectralArrow.class.isAssignableFrom(param2)) {
+                    entity = new EntitySpectralArrow(world);
+                } else {
+                    entity = new EntityTippedArrow(world);
+                }
+                entity.setLocationAndAngles(x, y, z, 0, 0);
+            } else if (ThrownExpBottle.class.isAssignableFrom(param2)) {
+                entity = new EntityExpBottle(world);
+                entity.setLocationAndAngles(x, y, z, 0, 0);
+            } else if (EnderPearl.class.isAssignableFrom(param2)) {
+                entity = new EntityEnderPearl(world);
+                entity.setLocationAndAngles(x, y, z, 0, 0);
+            } else if (ThrownPotion.class.isAssignableFrom(param2)) {
+                if (LingeringPotion.class.isAssignableFrom(param2)) {
+                    entity = new EntityPotion(world, x, y, z, CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.LINGERING_POTION, 1)));
+                } else {
+                    entity = new EntityPotion(world, x, y, z, CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.SPLASH_POTION, 1)));
+                }
+            } else if (Fireball.class.isAssignableFrom(param2)) {
+                if (SmallFireball.class.isAssignableFrom(param2)) {
+                    entity = new EntitySmallFireball(world);
+                } else if (WitherSkull.class.isAssignableFrom(param2)) {
+                    entity = new EntityWitherSkull(world);
+                } else if (DragonFireball.class.isAssignableFrom(param2)) {
+                    entity = new EntityDragonFireball(world);
+                } else {
+                    entity = new EntityLargeFireball(world);
+                }
+                entity.setLocationAndAngles(x, y, z, yaw, pitch);
+                Vector direction = param1.getDirection().multiply(10);
+                ((EntityFireball) entity).setDirection(direction.getX(), direction.getY(), direction.getZ());
+            } else if (ShulkerBullet.class.isAssignableFrom(param2)) {
+                entity = new EntityShulkerBullet(world);
+                entity.setLocationAndAngles(x, y, z, yaw, pitch);
+            } else if (LlamaSpit.class.isAssignableFrom(param2)) {
+                entity = new EntityLlamaSpit(world);
+                entity.setLocationAndAngles(x, y, z, yaw, pitch);
+            }
+        } else if (Minecart.class.isAssignableFrom(param2)) {
+            if (PoweredMinecart.class.isAssignableFrom(param2)) {
+                entity = new EntityMinecartFurnace(world, x, y, z);
+            } else if (StorageMinecart.class.isAssignableFrom(param2)) {
+                entity = new EntityMinecartChest(world, x, y, z);
+            } else if (ExplosiveMinecart.class.isAssignableFrom(param2)) {
+                entity = new EntityMinecartTNT(world, x, y, z);
+            } else if (HopperMinecart.class.isAssignableFrom(param2)) {
+                entity = new EntityMinecartHopper(world, x, y, z);
+            } else if (SpawnerMinecart.class.isAssignableFrom(param2)) {
+                entity = new EntityMinecartMobSpawner(world, x, y, z);
+            } else if (CommandMinecart.class.isAssignableFrom(param2)) {
+                entity = new EntityMinecartCommandBlock(world, x, y, z);
+            } else { // Default to rideable minecart for pre-rideable compatibility
+                entity = new EntityMinecartEmpty(world, x, y, z);
+            }
+        } else if (EnderSignal.class.isAssignableFrom(param2)) {
+            entity = new EntityEnderEye(world, x, y, z);
+        } else if (EnderCrystal.class.isAssignableFrom(param2)) {
+            entity = new EntityEnderCrystal(world);
+            entity.setLocationAndAngles(x, y, z, 0, 0);
+        } else if (LivingEntity.class.isAssignableFrom(param2)) {
+            if (Chicken.class.isAssignableFrom(param2)) {
+                entity = new EntityChicken(world);
+            } else if (Cow.class.isAssignableFrom(param2)) {
+                if (MushroomCow.class.isAssignableFrom(param2)) {
+                    entity = new EntityMooshroom(world);
+                } else {
+                    entity = new EntityCow(world);
+                }
+            } else if (Golem.class.isAssignableFrom(param2)) {
+                if (Snowman.class.isAssignableFrom(param2)) {
+                    entity = new EntitySnowman(world);
+                } else if (IronGolem.class.isAssignableFrom(param2)) {
+                    entity = new EntityIronGolem(world);
+                } else if (Shulker.class.isAssignableFrom(param2)) {
+                    entity = new EntityShulker(world);
+                }
+            } else if (Creeper.class.isAssignableFrom(param2)) {
+                entity = new EntityCreeper(world);
+            } else if (Ghast.class.isAssignableFrom(param2)) {
+                entity = new EntityGhast(world);
+            } else if (Pig.class.isAssignableFrom(param2)) {
+                entity = new EntityPig(world);
+            } else if (Player.class.isAssignableFrom(param2)) {
+                // need a net server handler for this one
+            } else if (Sheep.class.isAssignableFrom(param2)) {
+                entity = new EntitySheep(world);
+            } else if (AbstractHorse.class.isAssignableFrom(param2)) {
+                if (ChestedHorse.class.isAssignableFrom(param2)) {
+                    if (Donkey.class.isAssignableFrom(param2)) {
+                        entity = new EntityDonkey(world);
+                    } else if (Mule.class.isAssignableFrom(param2)) {
+                        entity = new EntityMule(world);
+                    } else if (Llama.class.isAssignableFrom(param2)) {
+                        entity = new EntityLlama(world);
+                    }
+                } else if (SkeletonHorse.class.isAssignableFrom(param2)) {
+                    entity = new EntitySkeletonHorse(world);
+                } else if (ZombieHorse.class.isAssignableFrom(param2)) {
+                    entity = new EntityZombieHorse(world);
+                } else {
+                    entity = new EntityHorse(world);
+                }
+            } else if (Skeleton.class.isAssignableFrom(param2)) {
+                if (Stray.class.isAssignableFrom(param2)){
+                    entity = new EntityStray(world);
+                } else if (WitherSkeleton.class.isAssignableFrom(param2)) {
+                    entity = new EntityWitherSkeleton(world);
+                } else {
+                    entity = new EntitySkeleton(world);
+                }
+            } else if (Slime.class.isAssignableFrom(param2)) {
+                if (MagmaCube.class.isAssignableFrom(param2)) {
+                    entity = new EntityMagmaCube(world);
+                } else {
+                    entity = new EntitySlime(world);
+                }
+            } else if (Spider.class.isAssignableFrom(param2)) {
+                if (CaveSpider.class.isAssignableFrom(param2)) {
+                    entity = new EntityCaveSpider(world);
+                } else {
+                    entity = new EntitySpider(world);
+                }
+            } else if (Squid.class.isAssignableFrom(param2)) {
+                entity = new EntitySquid(world);
+            } else if (Tameable.class.isAssignableFrom(param2)) {
+                if (Wolf.class.isAssignableFrom(param2)) {
+                    entity = new EntityWolf(world);
+                } else if (Ocelot.class.isAssignableFrom(param2)) {
+                    entity = new EntityOcelot(world);
+                } else if (Parrot.class.isAssignableFrom(param2)) {
+                    entity = new EntityParrot(world);
+                }
+            } else if (PigZombie.class.isAssignableFrom(param2)) {
+                entity = new EntityPigZombie(world);
+            } else if (Zombie.class.isAssignableFrom(param2)) {
+                if (Husk.class.isAssignableFrom(param2)) {
+                    entity = new EntityHusk(world);
+                } else if (ZombieVillager.class.isAssignableFrom(param2)) {
+                    entity = new EntityZombieVillager(world);
+                } else {
+                    entity = new EntityZombie(world);
+                }
+            } else if (Giant.class.isAssignableFrom(param2)) {
+                entity = new EntityGiantZombie(world);
+            } else if (Silverfish.class.isAssignableFrom(param2)) {
+                entity = new EntitySilverfish(world);
+            } else if (Enderman.class.isAssignableFrom(param2)) {
+                entity = new EntityEnderman(world);
+            } else if (Blaze.class.isAssignableFrom(param2)) {
+                entity = new EntityBlaze(world);
+            } else if (Villager.class.isAssignableFrom(param2)) {
+                entity = new EntityVillager(world);
+            } else if (Witch.class.isAssignableFrom(param2)) {
+                entity = new EntityWitch(world);
+            } else if (Wither.class.isAssignableFrom(param2)) {
+                entity = new EntityWither(world);
+            } else if (ComplexLivingEntity.class.isAssignableFrom(param2)) {
+                if (EnderDragon.class.isAssignableFrom(param2)) {
+                    entity = new EntityDragon(world);
+                }
+            } else if (Ambient.class.isAssignableFrom(param2)) {
+                if (Bat.class.isAssignableFrom(param2)) {
+                    entity = new EntityBat(world);
+                }
+            } else if (Rabbit.class.isAssignableFrom(param2)) {
+                entity = new EntityRabbit(world);
+            } else if (Endermite.class.isAssignableFrom(param2)) {
+                entity = new EntityEndermite(world);
+            } else if (Guardian.class.isAssignableFrom(param2)) {
+                if (ElderGuardian.class.isAssignableFrom(param2)){
+                    entity = new EntityElderGuardian(world);
+                } else {
+                    entity = new EntityGuardian(world);
+                }
+            } else if (ArmorStand.class.isAssignableFrom(param2)) {
+                entity = new EntityArmorStand(world, x, y, z);
+            } else if (PolarBear.class.isAssignableFrom(param2)) {
+                entity = new EntityPolarBear(world);
+            } else if (Vex.class.isAssignableFrom(param2)) {
+                entity = new EntityVex(world);
+            } else if (Illager.class.isAssignableFrom(param2)) {
+                if (Spellcaster.class.isAssignableFrom(param2)) {
+                    if (Evoker.class.isAssignableFrom(param2)) {
+                        entity = new EntityEvoker(world);
+                    } else if (Illusioner.class.isAssignableFrom(param2)) {
+                        entity = new EntityIllusionIllager(world);
+                    }
+                } else if (Vindicator.class.isAssignableFrom(param2)) {
+                    entity = new EntityVindicator(world);
+                }
+            }
+
+            if (entity != null) {
+                entity.setPositionAndRotation(x, y, z, yaw, pitch);
+            }
+        } else if (Hanging.class.isAssignableFrom(param2)) {
+            Block block = getBlockAt(param1);
+            BlockFace face = BlockFace.SELF;
+
+            int width = 16; // 1 full block, also painting smallest size.
+            int height = 16; // 1 full block, also painting smallest size.
+
+            if (ItemFrame.class.isAssignableFrom(param2)) {
+                width = 12;
+                height = 12;
+            } else if (LeashHitch.class.isAssignableFrom(param2)) {
+                width = 9;
+                height = 9;
+            }
+
+            BlockFace[] faces = new BlockFace[]{BlockFace.EAST, BlockFace.NORTH, BlockFace.WEST, BlockFace.SOUTH};
+            final BlockPos pos = new BlockPos((int) x, (int) y, (int) z);
+            for (BlockFace dir : faces) {
+                net.minecraft.block.Block nmsBlock = CraftMagicNumbers.getBlock(block.getRelative(dir));
+                if (nmsBlock.getDefaultState().getMaterial().isSolid() || BlockRedstoneDiode.isDiode(nmsBlock.getDefaultState())) {
+                    boolean taken = false;
+                    AxisAlignedBB bb = EntityHanging.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height);
+                    List<net.minecraft.entity.Entity> list = (List<net.minecraft.entity.Entity>) world.getEntitiesWithinAABBExcludingEntity(null, bb);
+                    for (Iterator<net.minecraft.entity.Entity> it = list.iterator(); !taken && it.hasNext();) {
+                        net.minecraft.entity.Entity e = it.next();
+                        if (e instanceof EntityHanging) {
+                            taken = true; // Hanging entities do not like hanging entities which intersect them.
+                        }
+                    }
+
+                    if (!taken) {
+                        face = dir;
+                        break;
+                    }
+                }
+            }
+
+            if (LeashHitch.class.isAssignableFrom(param2)) {
+                entity = new EntityLeashKnot(world, new BlockPos((int) x, (int) y, (int) z));
+                entity.forceSpawn = true;
+            } else {
+                // No valid face found
+                Preconditions.checkArgument(face != BlockFace.SELF, "Cannot spawn hanging entity for %s at %s (no free face)", param2.getName(), param1);
+
+                EnumFacing dir = CraftBlock.blockFaceToNotch(face).getOpposite();
+                if (Painting.class.isAssignableFrom(param2)) {
+                    entity = new EntityPainting(world, new BlockPos((int) x, (int) y, (int) z), dir);
+                } else if (ItemFrame.class.isAssignableFrom(param2)) {
+                    entity = new EntityItemFrame(world, new BlockPos((int) x, (int) y, (int) z), dir);
+                }
+            }
+
+            if (entity != null && !((EntityHanging) entity).onValidSurface()) {
+                throw new IllegalArgumentException("Cannot spawn hanging entity for " + param2.getName() + " at " + param1);
+            }
+        } else if (TNTPrimed.class.isAssignableFrom(param2)) {
+            entity = new EntityTNTPrimed(world, x, y, z, null);
+        } else if (ExperienceOrb.class.isAssignableFrom(param2)) {
+            entity = new EntityXPOrb(world, x, y, z, 0);
+        } else if (Weather.class.isAssignableFrom(param2)) {
+            // not sure what this can do
+            if (LightningStrike.class.isAssignableFrom(param2)) {
+                entity = new EntityLightningBolt(world, x, y, z, false);
+                // what is this, I don't even
+            }
+        } else if (Firework.class.isAssignableFrom(param2)) {
+            entity = new EntityFireworkRocket(world, x, y, z, net.minecraft.item.ItemStack.EMPTY);
+        } else if (AreaEffectCloud.class.isAssignableFrom(param2)) {
+            entity = new EntityAreaEffectCloud(world, x, y, z);
+        } else if (EvokerFangs.class.isAssignableFrom(param2)) {
+            entity = new EntityEvokerFangs(world, x, y, z, (float) Math.toRadians(yaw), 0, null);
+        }
+
+        if (entity != null) {
+            // Spigot start
+            if (entity instanceof EntityOcelot)
+            {
+                ( (EntityOcelot) entity ).spawnBonus = false;
+            }
+            // Spigot end
+            return entity;
+        }
+
+        throw new IllegalArgumentException("Cannot spawn an entity for " + param2.getName());
+    }
+    // Paper end
 
     public <T extends Entity> T addEntity(net.minecraft.entity.Entity entity, SpawnReason reason) throws IllegalArgumentException {
         return (T) this.addEntity(entity, reason, (Consumer) null);
@@ -1063,7 +1357,7 @@ public class CraftWorld implements World {
         }
 
         if (function != null) {
-            function.accept(entity.getBukkitEntity());
+            function.accept((T) entity.getBukkitEntity());
         }
 
         this.world.addEntity(entity, reason);
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
index a0dab98..c77617a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
@@ -24,7 +24,7 @@ public class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState
 
     public CraftBlockEntityState(Material material, T tileEntity) {
         super(material);
-        this.tileEntityClass = tileEntity.getClass();
+        this.tileEntityClass = (Class<T>) tileEntity.getClass();
         this.tileEntity = tileEntity;
         this.snapshot = this.createSnapshot(tileEntity);
         this.load(this.snapshot);
@@ -35,7 +35,7 @@ public class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState
             return (T) null;
         } else {
             NBTTagCompound nbtTagCompound = tileEntity.writeToNBT(new NBTTagCompound());
-            T snapshot = TileEntity.create((World) null, nbtTagCompound);
+            T snapshot = (T) TileEntity.create((World) null, nbtTagCompound);
             return snapshot;
         }
     }
@@ -88,7 +88,7 @@ public class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState
             TileEntity tile = this.getTileEntityFromWorld();
 
             if (this.isApplicable(tile)) {
-                this.applyTo((TileEntity) this.tileEntityClass.cast(tile));
+                this.applyTo(this.tileEntityClass.cast(tile));
                 tile.markDirty();
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index ede368b..4fa1f79 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -12,8 +12,8 @@ import org.bukkit.entity.Arrow.Spigot;
 import org.bukkit.projectiles.ProjectileSource;
 
 public class CraftArrow extends AbstractProjectile implements Arrow {
-    private final Spigot spigot =
-            new Spigot() {
+    private final Arrow.Spigot spigot =
+            new Arrow.Spigot() {
                 public double getDamage() {
                     return CraftArrow.this.getHandle().getDamage();
                 }
@@ -79,7 +79,7 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
         return EntityType.ARROW;
     }
 
-    public Spigot spigot() {
+    public Arrow.Spigot spigot() {
         return this.spigot;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index 13b054e..3912967 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -24,11 +24,11 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
         return EntityType.EVOKER;
     }
 
-    public Spell getCurrentSpell() {
-        return Spell.values()[this.getHandle().getSpellType().ordinal()];
+    public Evoker.Spell getCurrentSpell() {
+        return Evoker.Spell.values()[this.getHandle().getSpellType().ordinal()];
     }
 
-    public void setCurrentSpell(Spell spell) {
+    public void setCurrentSpell(Evoker.Spell spell) {
         this.getHandle()
                 .setSpellType(
                         spell == null ? EntitySpellcasterIllager.SpellType.NONE : EntitySpellcasterIllager.SpellType.getFromId(spell.ordinal()));
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
index e0c4e88..40c9279 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
@@ -7,8 +7,8 @@ import org.bukkit.entity.LightningStrike;
 import org.bukkit.entity.LightningStrike.Spigot;
 
 public class CraftLightningStrike extends CraftEntity implements LightningStrike {
-    private final Spigot spigot =
-            new Spigot() {
+    private final LightningStrike.Spigot spigot =
+            new LightningStrike.Spigot() {
                 public boolean isSilent() {
                     return CraftLightningStrike.this.getHandle().isSilent;
                 }
@@ -34,7 +34,7 @@ public class CraftLightningStrike extends CraftEntity implements LightningStrike
         return EntityType.LIGHTNING;
     }
 
-    public Spigot spigot() {
+    public LightningStrike.Spigot spigot() {
         return this.spigot;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 55b8004..be09412 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -123,6 +123,14 @@ import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scoreboard.Scoreboard;
 import org.spigotmc.AsyncCatcher;
 
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.*;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
     private long firstPlayed = 0L;
@@ -136,8 +144,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private double health = 20.0D;
     private boolean scaledHealth = false;
     private double healthScale = 20.0D;
-    private final Spigot spigot =
-            new Spigot() {
+    private final Player.Spigot spigot =
+            new Player.Spigot() {
                 public InetSocketAddress getRawAddress() {
                     return (InetSocketAddress) CraftPlayer.this.getHandle().connection.netManager.getRawAddress();
                 }
@@ -243,7 +251,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 }
 
                 public void sendMessage(BaseComponent component) {
-                    this.sendMessage(component);
+                    sendMessage(new BaseComponent[]{component}); // Paper - Fix decompile
                 }
 
                 public void sendMessage(BaseComponent... components) {
@@ -255,7 +263,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 }
 
                 public void sendMessage(ChatMessageType position, BaseComponent component) {
-                    this.sendMessage(position, component);
+                    sendMessage(position, new BaseComponent[]{component}); // Paper - Fix decompile
                 }
 
                 public void sendMessage(ChatMessageType position, BaseComponent... components) {
@@ -1586,7 +1594,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return this.getHandle().language;
     }
 
-    public Spigot spigot() {
+    public Player.Spigot spigot() { // Paper - Decompile fix
         return this.spigot;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 66eaaa9..faae88f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -13,7 +13,7 @@ import org.bukkit.inventory.meta.ItemMeta;
 public final class CraftItemFactory implements ItemFactory {
     static final Color DEFAULT_LEATHER_COLOR = Color.fromRGB(10511680);
     static final Collection<String> KNOWN_NBT_ATTRIBUTE_NAMES =
-            ImmutableSet.builder()
+            ImmutableSet.<String>builder()
                     .add("generic.armor")
                     .add("generic.armorToughness")
                     .add("generic.attackDamage")
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index 6619bf1..9421444 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -36,13 +36,13 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     protected String author;
     public List<ITextComponent> pages;
     protected Integer generation;
-    private final Spigot spigot;
+    private final BookMeta.Spigot spigot;
 
     CraftMetaBook(CraftMetaItem meta) {
         super(meta);
         this.pages = new ArrayList<ITextComponent>();
         this.spigot =
-                new Spigot() {
+                new BookMeta.Spigot() {
                     public BaseComponent[] getPage(int page) {
                         Validate.isTrue(CraftMetaBook.this.isValidPage(page), "Invalid page number");
                         return ComponentSerializer.parse(ITextComponent.Serializer.componentToJson(CraftMetaBook.this.pages.get(page - 1)));
@@ -115,7 +115,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         super(tag);
         this.pages = new ArrayList<ITextComponent>();
         this.spigot =
-                new Spigot() {
+                new BookMeta.Spigot() {
                     public BaseComponent[] getPage(int page) {
                         Validate.isTrue(CraftMetaBook.this.isValidPage(page), "Invalid page number");
                         return ComponentSerializer.parse(ITextComponent.Serializer.componentToJson(CraftMetaBook.this.pages.get(page - 1)));
@@ -212,7 +212,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         super(map);
         this.pages = new ArrayList<ITextComponent>();
         this.spigot =
-                new Spigot() {
+                new BookMeta.Spigot() {
                     public BaseComponent[] getPage(int page) {
                         Validate.isTrue(CraftMetaBook.this.isValidPage(page), "Invalid page number");
                         return ComponentSerializer.parse(ITextComponent.Serializer.componentToJson(CraftMetaBook.this.pages.get(page - 1)));
@@ -562,7 +562,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         return builder;
     }
 
-    public Spigot spigot() {
+    public BookMeta.Spigot spigot() {
         return this.spigot;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
index 4601359..7b61b71 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
@@ -11,7 +11,7 @@ import org.bukkit.potion.PotionType;
 
 public class CraftPotionUtil {
     private static final BiMap<PotionType, String> regular =
-            ImmutableBiMap.builder()
+            ImmutableBiMap.<PotionType, String>builder()
                     .put(PotionType.UNCRAFTABLE, "empty")
                     .put(PotionType.WATER, "water")
                     .put(PotionType.MUNDANE, "mundane")
@@ -33,7 +33,7 @@ public class CraftPotionUtil {
                     .put(PotionType.LUCK, "luck")
                     .build();
     private static final BiMap<PotionType, String> upgradeable =
-            ImmutableBiMap.builder()
+            ImmutableBiMap.<PotionType, String>builder()
                     .put(PotionType.JUMP, "strong_leaping")
                     .put(PotionType.SPEED, "strong_swiftness")
                     .put(PotionType.INSTANT_HEAL, "strong_healing")
@@ -43,7 +43,7 @@ public class CraftPotionUtil {
                     .put(PotionType.STRENGTH, "strong_strength")
                     .build();
     private static final BiMap<PotionType, String> extendable =
-            ImmutableBiMap.builder()
+            ImmutableBiMap.<PotionType, String>builder()
                     .put(PotionType.NIGHT_VISION, "long_night_vision")
                     .put(PotionType.INVISIBILITY, "long_invisibility")
                     .put(PotionType.JUMP, "long_leaping")
diff --git a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
index a3efb9d..caa419d 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/AsynchronousExecutor.java
@@ -223,7 +223,7 @@ public final class AsynchronousExecutor<P, T, C, E extends Throwable> {
             this.initSync();
 
             if (this.callbacks.isEmpty()) {
-                this.callbacks.add(this);
+                this.callbacks.add((C) this);
             }
 
             this.finish();
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java b/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
index e31ad3f..d78e168 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LongObjectHashMap.java
@@ -113,7 +113,7 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
             this.keys[index] = var10 = Arrays.copyOf(innerKeys, i << 1);
             Arrays.fill(var10, i, var10.length, Long.MIN_VALUE);
             Object[] var12;
-            this.values[index] = var12 = Arrays.copyOf(innerValues, i << 1);
+            this.values[index] = (V[]) (var12 = Arrays.copyOf(innerValues, i << 1));
             var10[i] = key;
             var12[i] = value;
             ++this.size;
@@ -154,7 +154,7 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
 
     public void putAll(Map<? extends Long, ? extends V> map) {
         for (java.util.Map.Entry entry : map.entrySet()) {
-            this.put(((Long) entry.getKey()).longValue(), entry.getValue());
+            this.put(((Long) entry.getKey()).longValue(), (V) entry.getValue());
         }
     }
 
@@ -326,7 +326,7 @@ public class LongObjectHashMap<V> implements Cloneable, Serializable {
         }
 
         public boolean contains(Object value) {
-            return LongObjectHashMap.this.containsValue(value);
+            return LongObjectHashMap.this.containsValue((V) value);
         }
 
         public Iterator<V> iterator() {
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 877376f..2fca21e 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -92,7 +92,7 @@ public class ActivationRange {
     }
 
     private static void activateChunkEntities(Chunk chunk) {
-        List[] var1 = chunk.entityLists;
+        List<Entity>[] var1 = chunk.entityLists;
         int var2 = var1.length;
 
         for (int var3 = 0; var3 < var2; ++var3) {
diff --git a/src/main/java/org/spigotmc/SneakyThrow.java b/src/main/java/org/spigotmc/SneakyThrow.java
index 0c40ff9..1931031 100644
--- a/src/main/java/org/spigotmc/SneakyThrow.java
+++ b/src/main/java/org/spigotmc/SneakyThrow.java
@@ -2,10 +2,10 @@ package org.spigotmc;
 
 public class SneakyThrow {
     public static void sneaky(Throwable t) {
-        throw (RuntimeException) superSneaky(t);
+        throw SneakyThrow.<RuntimeException>superSneaky(t);
     }
 
     private static <T extends Throwable> T superSneaky(Throwable t) throws T {
-        throw t;
+        throw (T) t;
     }
 }
-- 
2.18.0

