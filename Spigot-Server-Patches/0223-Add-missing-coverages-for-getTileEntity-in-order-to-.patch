From e0cc70410dc75756aaf7d214246004fcd3fa29a4 Mon Sep 17 00:00:00 2001
From: Shane Freeder <theboyetronic@gmail.com>
Date: Sun, 29 Oct 2017 21:04:23 -0400
Subject: [PATCH] Add missing coverages for getTileEntity in order to attempt
 to avoid exeptions when calling getTileEntity


diff --git a/src/main/java/net/minecraft/world/WorldServer.java b/src/main/java/net/minecraft/world/WorldServer.java
index 65c5128..6975141 100644
--- a/src/main/java/net/minecraft/world/WorldServer.java
+++ b/src/main/java/net/minecraft/world/WorldServer.java
@@ -3,18 +3,6 @@ package net.minecraft.world;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.ListenableFuture;
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.UUID;
-import java.util.function.Predicate;
-import java.util.logging.Level;
-import java.util.stream.Collectors;
-import javax.annotation.Nullable;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
 import net.minecraft.block.*;
@@ -31,49 +19,15 @@ import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
 import net.minecraft.network.Packet;
-import net.minecraft.network.play.server.SPacketBlockAction;
-import net.minecraft.network.play.server.SPacketEntityStatus;
-import net.minecraft.network.play.server.SPacketExplosion;
-import net.minecraft.network.play.server.SPacketParticles;
-import net.minecraft.network.play.server.SPacketSpawnGlobalEntity;
+import net.minecraft.network.play.server.*;
 import net.minecraft.profiler.Profiler;
 import net.minecraft.scoreboard.ScoreboardSaveData;
 import net.minecraft.scoreboard.ServerScoreboard;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerChunkMap;
-import net.minecraft.tileentity.TileEntity;
-import net.minecraft.tileentity.TileEntityBanner;
-import net.minecraft.tileentity.TileEntityBeacon;
-import net.minecraft.tileentity.TileEntityBed;
-import net.minecraft.tileentity.TileEntityBrewingStand;
-import net.minecraft.tileentity.TileEntityChest;
-import net.minecraft.tileentity.TileEntityCommandBlock;
-import net.minecraft.tileentity.TileEntityComparator;
-import net.minecraft.tileentity.TileEntityDaylightDetector;
-import net.minecraft.tileentity.TileEntityDispenser;
-import net.minecraft.tileentity.TileEntityDropper;
-import net.minecraft.tileentity.TileEntityEnchantmentTable;
-import net.minecraft.tileentity.TileEntityEndGateway;
-import net.minecraft.tileentity.TileEntityEndPortal;
-import net.minecraft.tileentity.TileEntityEnderChest;
-import net.minecraft.tileentity.TileEntityFlowerPot;
-import net.minecraft.tileentity.TileEntityFurnace;
-import net.minecraft.tileentity.TileEntityHopper;
-import net.minecraft.tileentity.TileEntityMobSpawner;
-import net.minecraft.tileentity.TileEntityNote;
-import net.minecraft.tileentity.TileEntitySign;
-import net.minecraft.tileentity.TileEntitySkull;
-import net.minecraft.tileentity.TileEntityStructure;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.IProgressUpdate;
-import net.minecraft.util.IThreadListener;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.WeightedRandom;
-import net.minecraft.util.math.AxisAlignedBB;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.ChunkPos;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.Vec3d;
+import net.minecraft.tileentity.*;
+import net.minecraft.util.*;
+import net.minecraft.util.math.*;
 import net.minecraft.village.VillageCollection;
 import net.minecraft.village.VillageSiege;
 import net.minecraft.world.biome.Biome;
@@ -100,11 +54,7 @@ import org.bukkit.WeatherType;
 import org.bukkit.World.Environment;
 import org.bukkit.craftbukkit.CraftTravelAgent;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
-import org.bukkit.craftbukkit.generator.InternalChunkGenerator;
-import org.bukkit.craftbukkit.generator.NetherChunkGenerator;
-import org.bukkit.craftbukkit.generator.NormalChunkGenerator;
-import org.bukkit.craftbukkit.generator.SkyLandsChunkGenerator;
+import org.bukkit.craftbukkit.generator.*;
 import org.bukkit.craftbukkit.util.HashTreeSet;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
@@ -112,6 +62,12 @@ import org.bukkit.event.weather.LightningStrikeEvent;
 import org.bukkit.event.world.WorldSaveEvent;
 import org.bukkit.generator.ChunkGenerator;
 
+import javax.annotation.Nullable;
+import java.io.File;
+import java.util.*;
+import java.util.logging.Level;
+import java.util.stream.Collectors;
+
 public class WorldServer extends World implements IThreadListener {
     private static final Logger LOGGER = LogManager.getLogger();
     private final MinecraftServer mcServer;
@@ -219,101 +175,111 @@ public class WorldServer extends World implements IThreadListener {
         TileEntity result = super.getTileEntity(pos);
         Block type = this.getBlockState(pos).getBlock();
 
-        if (type != Blocks.CHEST && type != Blocks.TRAPPED_CHEST) {
-            if (type == Blocks.FURNACE) {
-                if (!(result instanceof TileEntityFurnace)) {
-                    result = this.fixTileEntity(pos, type, result);
-                }
-            } else if (type == Blocks.DROPPER) {
-                if (!(result instanceof TileEntityDropper)) {
-                    result = this.fixTileEntity(pos, type, result);
-                }
-            } else if (type == Blocks.DISPENSER) {
-                if (!(result instanceof TileEntityDispenser)) {
-                    result = this.fixTileEntity(pos, type, result);
-                }
-            } else if (type == Blocks.JUKEBOX) {
-                if (!(result instanceof BlockJukebox.TileEntityJukebox)) {
-                    result = this.fixTileEntity(pos, type, result);
-                }
-            } else if (type == Blocks.NOTEBLOCK) {
-                if (!(result instanceof TileEntityNote)) {
-                    result = this.fixTileEntity(pos, type, result);
-                }
-            } else if (type == Blocks.MOB_SPAWNER) {
-                if (!(result instanceof TileEntityMobSpawner)) {
-                    result = this.fixTileEntity(pos, type, result);
-                }
-            } else if (type != Blocks.STANDING_SIGN && type != Blocks.WALL_SIGN) {
-                if (type == Blocks.ENDER_CHEST) {
-                    if (!(result instanceof TileEntityEnderChest)) {
-                        result = this.fixTileEntity(pos, type, result);
-                    }
-                } else if (type == Blocks.BREWING_STAND) {
-                    if (!(result instanceof TileEntityBrewingStand)) {
-                        result = this.fixTileEntity(pos, type, result);
-                    }
-                } else if (type == Blocks.BEACON) {
-                    if (!(result instanceof TileEntityBeacon)) {
-                        result = this.fixTileEntity(pos, type, result);
-                    }
-                } else if (type == Blocks.HOPPER) {
-                    if (!(result instanceof TileEntityHopper)) {
-                        result = this.fixTileEntity(pos, type, result);
-                    }
-                } else if (type == Blocks.ENCHANTING_TABLE) {
-                    if (!(result instanceof TileEntityEnchantmentTable)) {
-                        result = this.fixTileEntity(pos, type, result);
-                    }
-                } else if (type == Blocks.END_PORTAL) {
-                    if (!(result instanceof TileEntityEndPortal)) {
-                        result = this.fixTileEntity(pos, type, result);
-                    }
-                } else if (type == Blocks.SKULL) {
-                    if (!(result instanceof TileEntitySkull)) {
-                        result = this.fixTileEntity(pos, type, result);
-                    }
-                } else if (type != Blocks.DAYLIGHT_DETECTOR && type != Blocks.DAYLIGHT_DETECTOR_INVERTED) {
-                    if (type != Blocks.POWERED_COMPARATOR && type != Blocks.UNPOWERED_COMPARATOR) {
-                        if (type == Blocks.FLOWER_POT) {
-                            if (!(result instanceof TileEntityFlowerPot)) {
-                                result = this.fixTileEntity(pos, type, result);
-                            }
-                        } else if (type != Blocks.STANDING_BANNER && type != Blocks.WALL_BANNER) {
-                            if (type == Blocks.STRUCTURE_BLOCK) {
-                                if (!(result instanceof TileEntityStructure)) {
-                                    result = this.fixTileEntity(pos, type, result);
-                                }
-                            } else if (type == Blocks.END_GATEWAY) {
-                                if (!(result instanceof TileEntityEndGateway)) {
-                                    result = this.fixTileEntity(pos, type, result);
-                                }
-                            } else if (type == Blocks.COMMAND_BLOCK) {
-                                if (!(result instanceof TileEntityCommandBlock)) {
-                                    result = this.fixTileEntity(pos, type, result);
-                                }
-                            } else if (type == Blocks.STRUCTURE_BLOCK) {
-                                if (!(result instanceof TileEntityStructure)) {
-                                    result = this.fixTileEntity(pos, type, result);
-                                }
-                            } else if (type == Blocks.BED && !(result instanceof TileEntityBed)) {
-                                result = this.fixTileEntity(pos, type, result);
-                            }
-                        } else if (!(result instanceof TileEntityBanner)) {
-                            result = this.fixTileEntity(pos, type, result);
-                        }
-                    } else if (!(result instanceof TileEntityComparator)) {
-                        result = this.fixTileEntity(pos, type, result);
-                    }
-                } else if (!(result instanceof TileEntityDaylightDetector)) {
-                    result = this.fixTileEntity(pos, type, result);
-                }
-            } else if (!(result instanceof TileEntitySign)) {
-                result = this.fixTileEntity(pos, type, result);
+        /*
+         * Paper - The compiler -> decompiler loop basically wrecked the structure of this check, it was "technically" fine but not maintainable.
+         * Because it's conceivable we'll be back here to add additional TEs in the future, I've cleaned it up and put it back.
+         */
+
+        if (type == Blocks.CHEST || type == Blocks.TRAPPED_CHEST) { // Spigot
+            if (!(result instanceof TileEntityChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.FURNACE) {
+            if (!(result instanceof TileEntityFurnace)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DROPPER) {
+            if (!(result instanceof TileEntityDropper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DISPENSER) {
+            if (!(result instanceof TileEntityDispenser)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.JUKEBOX) {
+            if (!(result instanceof BlockJukebox.TileEntityJukebox)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.NOTEBLOCK) {
+            if (!(result instanceof TileEntityNote)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.MOB_SPAWNER) {
+            if (!(result instanceof TileEntityMobSpawner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if ((type == Blocks.STANDING_SIGN) || (type == Blocks.WALL_SIGN)) {
+            if (!(result instanceof TileEntitySign)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.ENDER_CHEST) {
+            if (!(result instanceof TileEntityEnderChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BREWING_STAND) {
+            if (!(result instanceof TileEntityBrewingStand)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BEACON) {
+            if (!(result instanceof TileEntityBeacon)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.HOPPER) {
+            if (!(result instanceof TileEntityHopper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.ENCHANTING_TABLE) {
+            if (!(result instanceof TileEntityEnchantmentTable)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.END_PORTAL) {
+            if (!(result instanceof TileEntityEndPortal)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.SKULL) {
+            if (!(result instanceof TileEntitySkull)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DAYLIGHT_DETECTOR || type == Blocks.DAYLIGHT_DETECTOR_INVERTED) {
+            if (!(result instanceof TileEntityDaylightDetector)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.POWERED_COMPARATOR || type == Blocks.UNPOWERED_COMPARATOR) {
+            if (!(result instanceof TileEntityComparator)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.FLOWER_POT) {
+            if (!(result instanceof TileEntityFlowerPot)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.STANDING_BANNER || type == Blocks.WALL_BANNER) {
+            if (!(result instanceof TileEntityBanner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.STRUCTURE_BLOCK) {
+            if (!(result instanceof TileEntityStructure)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.END_GATEWAY) {
+            if (!(result instanceof TileEntityEndGateway)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.COMMAND_BLOCK) {
+            if (!(result instanceof TileEntityCommandBlock)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BED) {
+            if (!(result instanceof TileEntityBed)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+        // Paper Start - add TE fix checks for shulkers, see BlockShulkerBox
+        else if (type instanceof BlockShulkerBox) {
+            if (!(result instanceof TileEntityShulkerBox)) {
+                result = fixTileEntity(pos, type, result);
             }
-        } else if (!(result instanceof TileEntityChest)) {
-            result = this.fixTileEntity(pos, type, result);
         }
+        // Paper end
 
         return result;
     }
-- 
2.18.0

