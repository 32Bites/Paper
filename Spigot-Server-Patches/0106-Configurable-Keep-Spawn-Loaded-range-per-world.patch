From 103ce2b5790f33f94d9b485ac5003da27d19d294 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 7 Oct 2017 21:33:22 -0400
Subject: [PATCH] Configurable Keep Spawn Loaded range per world

This lets you disable it for some worlds and lower it for others.

diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 06be217..33bc34f 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -278,4 +278,10 @@ public class PaperWorldConfig {
         grassUpdateRate = Math.max(0, getInt("grass-spread-tick-rate", grassUpdateRate));
         log("Grass Spread Tick Rate: " + grassUpdateRate);
     }
+
+    public short keepLoadedRange;
+    private void keepLoadedRange() {
+        keepLoadedRange = (short) (getInt("keep-spawn-loaded-range", Math.min(spigotConfig.viewDistance, 8)) * 16);
+        log( "Keep Spawn Loaded Range: " + (keepLoadedRange/16));
+    }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1dfcc57..c5a3991 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -415,8 +415,11 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IThre
                 long j = getCurrentTimeMillis();
                 i = 0;
 
-                for (int k = -192; k <= 192 && this.isServerRunning(); k += 16) {
-                    for (int l = -192; l <= 192 && this.isServerRunning(); l += 16) {
+                // Paper start
+                short radius = worldserver.paperConfig.keepLoadedRange;
+                for (int k = -radius; k <= radius && this.isServerRunning(); k += 16) {
+                    for (int l = -radius; l <= radius && this.isServerRunning(); l += 16) {
+                        // Paper end
                         long i1 = getCurrentTimeMillis();
 
                         if (i1 - j > 1000L) {
diff --git a/src/main/java/net/minecraft/world/World.java b/src/main/java/net/minecraft/world/World.java
index 475f8db..79ee564 100644
--- a/src/main/java/net/minecraft/world/World.java
+++ b/src/main/java/net/minecraft/world/World.java
@@ -3184,7 +3184,8 @@ public abstract class World implements IBlockAccess {
         int k = x * 16 + 8 - blockposition.getX();
         int l = z * 16 + 8 - blockposition.getZ();
         boolean flag = true;
-        return k >= -128 && k <= 128 && l >= -128 && l <= 128 && this.keepSpawnInMemory;
+        short keepLoadedRange = paperConfig.keepLoadedRange; // Paper
+        return k >= -keepLoadedRange && k <= keepLoadedRange && l >= -keepLoadedRange && l <= keepLoadedRange && this.keepSpawnInMemory;
     }
 
     public void sendPacketToServer(Packet<?> packetIn) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 73674ad..a60ce20 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1069,7 +1069,7 @@ public final class CraftServer implements Server {
                         "Preparing start region for level " + (this.console.worlds.size() - 1) + " (Seed: " + internal.getSeed() + ")");
 
                 if (internal.getWorld().getKeepSpawnInMemory()) {
-                    short short1 = 196;
+                    short short1 = internal.paperConfig.keepLoadedRange; // Paper
                     long i = System.currentTimeMillis();
 
                     for (int j = -short1; j <= short1; j += 16) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index c14d3e1..0380cc7 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -1434,8 +1434,11 @@ public class CraftWorld implements World {
         int chunkCoordX = chunkcoordinates.getX() >> 4;
         int chunkCoordZ = chunkcoordinates.getZ() >> 4;
 
-        for (int x = -12; x <= 12; ++x) {
-            for (int z = -12; z <= 12; ++z) {
+        // Paper start
+        int radius = world.paperConfig.keepLoadedRange / 16; // Paper
+        for (int x = -radius; x <= radius; ++x) {
+            for (int z = -radius; z <= radius; ++z) {
+                // Paper end
                 if (keepLoaded) {
                     this.loadChunk(chunkCoordX + x, chunkCoordZ + z);
                 } else if (this.isChunkLoaded(chunkCoordX + x, chunkCoordZ + z)) {
-- 
2.18.0

