From 0c82bb7654fa4ca0aeb9277fad1d4bc32e2a6f3d Mon Sep 17 00:00:00 2001
From: Antony Riley <antony@cyberiantiger.org>
Date: Sat, 7 Oct 2017 20:38:07 -0400
Subject: [PATCH] Sanitise RegionFileCache and make configurable.

RegionFileCache prior to this patch would close every single open region
file upon reaching a size of 256.
This patch modifies that behaviour so it closes the the least recently
used RegionFile.
The implementation uses a LinkedHashMap as an LRU cache (modified from HashMap).
The maximum size of the RegionFileCache is also made configurable.

diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 2f6e169..ec46433 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -215,4 +215,9 @@ public class PaperConfig {
     private static void loadPermsBeforePlugins() {
         loadPermsBeforePlugins = getBoolean("settings.load-permissions-yml-before-plugins", true);
     }
+
+    public static int regionFileCacheSize = 256;
+    private static void regionFileCacheSize() {
+        regionFileCacheSize = getInt("settings.region-file-cache-size", 256);
+    }
 }
diff --git a/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java b/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
index 56b7b91..04ffde2 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/RegionFileCache.java
@@ -1,17 +1,20 @@
 package net.minecraft.world.chunk.storage;
 
+import com.destroystokyo.paper.PaperConfig; // Paper
 import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Maps;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
+import java.util.Iterator;
 import java.util.Map;
+import java.util.LinkedHashMap; // Paper
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
 
 public class RegionFileCache {
-    public static final Map<File, RegionFile> REGIONS_BY_FILE = Maps.<File, RegionFile>newHashMap();
+    public static final Map<File, RegionFile> REGIONS_BY_FILE = new LinkedHashMap<>(PaperConfig.regionFileCacheSize, 0.75f, true); // Paper - Replace HashMap -> LinkedHashMap
 
     public static synchronized RegionFile createOrLoadRegionFile(File worldDir, int chunkX, int chunkZ) {
         File file1 = new File(worldDir, "region");
@@ -25,8 +28,8 @@ public class RegionFileCache {
                 file1.mkdirs();
             }
 
-            if (REGIONS_BY_FILE.size() >= 256) {
-                clearRegionFileReferences();
+            if (REGIONS_BY_FILE.size() >= PaperConfig.regionFileCacheSize) { // Paper
+                trimCache(); // Paper
             }
 
             RegionFile regionfile1 = new RegionFile(file2);
@@ -87,4 +90,20 @@ public class RegionFileCache {
         RegionFile regionfile = getRegionFileIfExists(worldDir, chunkX, chunkZ);
         return regionfile != null ? regionfile.isChunkSaved(chunkX & 31, chunkZ & 31) : false;
     }
+
+    // Paper Start
+    private static synchronized void trimCache() {
+        Iterator<Map.Entry<File, RegionFile>> itr = RegionFileCache.REGIONS_BY_FILE.entrySet().iterator();
+        int count = RegionFileCache.REGIONS_BY_FILE.size() - PaperConfig.regionFileCacheSize;
+        while (count-- >= 0 && itr.hasNext()) {
+            try {
+                itr.next().getValue().close();
+            } catch (IOException ioexception) {
+                ioexception.printStackTrace();
+                ServerInternalException.reportInternalException(ioexception);
+            }
+            itr.remove();
+        }
+    }
+    // Paper End
 }
-- 
2.18.0

