From 1fc836543b59ac49829b785e35d050ca3b447ea6 Mon Sep 17 00:00:00 2001
From: Kyle Wood <demonwav@gmail.com>
Date: Mon, 16 Jul 2018 22:00:22 -0500
Subject: [PATCH] Implement SRG runtime plugin remapping

This commit will be heavy WIP for a while, the title is a lie for now.

diff --git a/src/main/java/com/destroystokyo/paper/srg/ClassMapping.java b/src/main/java/com/destroystokyo/paper/srg/ClassMapping.java
new file mode 100644
index 0000000..bc9f6a2
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/srg/ClassMapping.java
@@ -0,0 +1,13 @@
+package com.destroystokyo.paper.srg;
+
+public final class ClassMapping implements Mapping {
+
+    private final String spigot;
+
+    private final String srg;
+
+    public ClassMapping(final String spigot, final String srg) {
+        this.spigot = spigot;
+        this.srg = srg;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/srg/FieldMapping.java b/src/main/java/com/destroystokyo/paper/srg/FieldMapping.java
new file mode 100644
index 0000000..27bdc4c
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/srg/FieldMapping.java
@@ -0,0 +1,13 @@
+package com.destroystokyo.paper.srg;
+
+public final class FieldMapping implements Mapping {
+
+    private final String spigotField;
+
+    private final String srgField;
+
+    public FieldMapping(final String spigotField, final String srgField) {
+        this.spigotField = spigotField;
+        this.srgField = srgField;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/srg/Mapping.java b/src/main/java/com/destroystokyo/paper/srg/Mapping.java
new file mode 100644
index 0000000..d5e6346
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/srg/Mapping.java
@@ -0,0 +1,4 @@
+package com.destroystokyo.paper.srg;
+
+public interface Mapping {
+}
diff --git a/src/main/java/com/destroystokyo/paper/srg/MethodMapping.java b/src/main/java/com/destroystokyo/paper/srg/MethodMapping.java
new file mode 100644
index 0000000..fdc3bcd
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/srg/MethodMapping.java
@@ -0,0 +1,19 @@
+package com.destroystokyo.paper.srg;
+
+public final class MethodMapping implements Mapping {
+
+    private final String spigotMethod;
+
+    private final String spigotSig;
+
+    private final String srgMethod;
+
+    private final String srgSig;
+
+    public MethodMapping(final String spigotMethod, final String spigotSig, final String srgMethod, final String srgSig) {
+        this.spigotMethod = spigotMethod;
+        this.spigotSig = spigotSig;
+        this.srgMethod = srgMethod;
+        this.srgSig = srgSig;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/srg/SrgParser.java b/src/main/java/com/destroystokyo/paper/srg/SrgParser.java
new file mode 100644
index 0000000..84aa9aa
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/srg/SrgParser.java
@@ -0,0 +1,50 @@
+package com.destroystokyo.paper.srg;
+
+import com.google.common.base.Splitter;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public final class SrgParser {
+
+    private static final Splitter spaceSplitter = Splitter.on(' ');
+
+    private static Map<String, Mapping> mappingMap = new HashMap<>();
+
+    public static void init() {
+        try (
+            final BufferedReader in = new BufferedReader(new InputStreamReader(SrgParser.class.getResourceAsStream("/paper-spigot-srg-patched.srg")))
+        ) {
+            String line;
+            while ((line = in.readLine()) != null) {
+                final List<String> split = spaceSplitter.splitToList(line);
+                if (line.startsWith("CL:")) {
+                    final String spigot = split.get(1);
+                    final String srg = split.get(2);
+                    mappingMap.put(spigot, new ClassMapping(spigot, srg));
+                } else if (line.startsWith("MD:")) {
+                    final String spigotMethod = split.get(1);
+                    final String spigotSig = split.get(2);
+                    final String srgMethod = split.get(3);
+                    final String srgSig = split.get(4);
+                    mappingMap.put(spigotMethod + spigotSig, new MethodMapping(spigotMethod, spigotSig, srgMethod, srgSig));
+                } else if (line.startsWith("FD:")) {
+                    final String spigotField = split.get(1);
+                    final String srgField = split.get(2);
+                    mappingMap.put(spigotField, new FieldMapping(spigotField, srgField));
+                } else {
+                    throw new IllegalStateException("Cannot handle mapping line: " + line);
+                }
+            }
+        } catch (final IOException e) {
+            throw new InternalError(e);
+        }
+    }
+
+    public static Mapping findMapping(final String fullyQualifiedName) {
+        return mappingMap.get(fullyQualifiedName);
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 2a6c4fc..6417761 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit;
 
+import com.destroystokyo.paper.srg.SrgParser;
 import java.io.File;
 import java.io.IOException;
 import java.text.SimpleDateFormat;
@@ -165,6 +166,8 @@ public class Main {
                         }
                     }
 
+                    SrgParser.init(); // Paper MCP
+
                     System.out.println("Loading libraries, please wait...");
                     MinecraftServer.main(options);
                 } catch (Throwable var8) {
-- 
2.18.0

