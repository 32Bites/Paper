From 69204dbcf3ff46683298af1e0bc554776462b9e6 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 29 Oct 2017 17:35:20 -0400
Subject: [PATCH] Remove the Vanilla Method Profiler

Spigot rebrought this back after it was removed for years due to the performance hit.

It is unknown if the JIT will optimize it out as efficiently with how it was
added, so we do not want any risk of performance degredation.

Paper has a proper Timings system that makes the Vanilla Method profiler obsolete and inferior.

diff --git a/src/main/java/net/minecraft/command/CommandDebug.java b/src/main/java/net/minecraft/command/CommandDebug.java
index 84178fe..f2ae576 100644
--- a/src/main/java/net/minecraft/command/CommandDebug.java
+++ b/src/main/java/net/minecraft/command/CommandDebug.java
@@ -36,6 +36,12 @@ public class CommandDebug extends CommandBase {
     }
 
     public void execute(MinecraftServer server, ICommandSender mcpSender, String[] args) throws CommandException {
+        // Paper - Disable vanilla method profiler
+        if (true) {
+            mcpSender.sendMessage(new TextComponentString("Use `/timings report'")); // Paper
+            return;
+        }
+        /*
         Profiler var10000 = server.profiler;
 
         if (!Profiler.ENABLED) {
@@ -76,6 +82,8 @@ public class CommandDebug extends CommandBase {
                 notifyCommandListener(mcpSender, this, "commands.debug.stop", new Object[] {String.format("%.2f", (float) k / 1000.0F), l});
             }
         }
+        */
+        // Paper end
     }
 
     private void saveProfilerResults(long timeSpan, int tickSpan, MinecraftServer server) {
diff --git a/src/main/java/net/minecraft/profiler/Profiler.java b/src/main/java/net/minecraft/profiler/Profiler.java
index c172cb4..143401c 100644
--- a/src/main/java/net/minecraft/profiler/Profiler.java
+++ b/src/main/java/net/minecraft/profiler/Profiler.java
@@ -10,7 +10,29 @@ import java.util.function.Supplier;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// Paper start - Remove this system - we have a more efficient Timings system
 public class Profiler {
+    public boolean profilingEnabled;
+
+    public void clearProfiling() {}
+
+    public void startSection(String name) {}
+
+    public void func_194340_a(Supplier<String> p_194340_1_) {}
+
+    public void endSection() {}
+
+    public List<Profiler.Result> getProfilingData(String profilerName) {
+        return Collections.emptyList();
+    }
+
+    public void endStartSection(String name) {}
+
+    public String getNameOfLastSection() {
+        return "[PROFILER DISABLED]";
+    }
+/*
+public class MethodProfiler {
     public static final boolean ENABLED = Boolean.getBoolean("enableDebugMethodProfiler");
     private static final Logger LOGGER = LogManager.getLogger();
     private final List<String> sectionList = Lists.<String>newArrayList();
@@ -142,6 +164,8 @@ public class Profiler {
             return this.sectionList.isEmpty() ? "[UNKNOWN]" : (String) this.sectionList.get(this.sectionList.size() - 1);
         }
     }
+*/
+// Paper end
 
     public static final class Result implements Comparable<Profiler.Result> {
         public double usePercentage;
-- 
2.18.0

