From b86de5f911f9218267010e07ae1160fea5db95c2 Mon Sep 17 00:00:00 2001
From: kashike <kashike@vq.lc>
Date: Sun, 29 Oct 2017 19:38:00 -0400
Subject: [PATCH] Add configuration option to prevent player names from being
 suggested


diff --git a/build.gradle b/build.gradle
index e1f5854..ae697fe 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,3 +1,18 @@
+buildscript {
+    repositories {
+        maven {
+            name = 'gradle-plugins'
+            url = 'https://plugins.gradle.org/m2'
+        }
+    }
+
+    dependencies {
+        classpath 'de.sebastianboegl.gradle.plugins:shadow-log4j-transformer:1.0.1'
+    }
+}
+
+apply plugin: 'de.sebastianboegl.shadow.transformer.log4j'
+
 repositories {
     maven {
         name "minecraft"
@@ -5,13 +20,26 @@ repositories {
     }
 }
 
+configurations {
+    log4j
+}
+
 dependencies {
     compile project(":Paper-API")
     compile "net.sf.jopt-simple:jopt-simple:5.0.4"
-    compile "jline:jline:2.12.1"
     compile "org.xerial:sqlite-jdbc:3.21.0"
     compile "mysql:mysql-connector-java:5.1.43"
-
+    compile "net.minecrell:terminalconsoleappender:1.0.0"
+    runtime "net.java.dev.jna:jna:4.4.0"
+    /*
+      Required to add the missing Log4j2Plugins.dat file from log4j-core
+      which has been removed by Mojang. Without it, log4j has to classload
+      all its classes to check if they are plugins.
+      Scanning takes about 1-2 seconds so adding this speeds up the server start.
+    */
+    log4j("org.apache.logging.log4j:log4j-core:2.8.1") {
+        transitive = false
+    }
 
     // Minecraft deps
     compile "org.apache.logging.log4j:log4j-api:2.8.2"
@@ -46,6 +74,10 @@ shadowJar {
         })
     }
 
+    from({zipTree(project.configurations.log4j.resolve().first())}) {
+        include 'META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat'
+    }
+
     relocate "jline", "org.bukkit.craftbukkit.libs.jline"
     relocate "org.ibex", "org.bukkit.craftbukkit.libs.org.ibex"
     relocate "org.gjt", "org.bukkit.craftbukkit.libs.org.gjt"
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 28917f6..f4b2370 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -265,4 +265,9 @@ public class PaperConfig {
         }
         removeInvalidStatistics = getBoolean("settings.remove-invalid-statistics", false);
     }
+
+    public static boolean suggestPlayersWhenNullTabCompletions = true;
+    private static void suggestPlayersWhenNull() {
+        suggestPlayersWhenNullTabCompletions = getBoolean("settings.suggest-player-names-when-null-tab-completions", suggestPlayersWhenNullTabCompletions);
+    }
 }
diff --git a/src/main/java/com/destroystokyo/paper/console/TerminalConsoleCommandSender.java b/src/main/java/com/destroystokyo/paper/console/TerminalConsoleCommandSender.java
new file mode 100644
index 0000000..685deaa
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/console/TerminalConsoleCommandSender.java
@@ -0,0 +1,17 @@
+package com.destroystokyo.paper.console;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.command.CraftConsoleCommandSender;
+
+public class TerminalConsoleCommandSender extends CraftConsoleCommandSender {
+
+    private static final Logger LOGGER = LogManager.getRootLogger();
+
+    @Override
+    public void sendRawMessage(String message) {
+        // TerminalConsoleAppender supports color codes directly in log messages
+        LOGGER.info(message);
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/console/TerminalHandler.java b/src/main/java/com/destroystokyo/paper/console/TerminalHandler.java
new file mode 100644
index 0000000..caa20ee
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/console/TerminalHandler.java
@@ -0,0 +1,60 @@
+package com.destroystokyo.paper.console;
+
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecrell.terminalconsole.TerminalConsoleAppender;
+import org.bukkit.craftbukkit.command.ConsoleCommandCompleter;
+import org.jline.reader.EndOfFileException;
+import org.jline.reader.LineReader;
+import org.jline.reader.LineReaderBuilder;
+import org.jline.reader.UserInterruptException;
+import org.jline.terminal.Terminal;
+
+public class TerminalHandler {
+
+    private TerminalHandler() {
+    }
+
+    public static boolean handleCommands(DedicatedServer server) {
+        final Terminal terminal = TerminalConsoleAppender.getTerminal();
+        if (terminal == null) {
+            return false;
+        }
+
+        LineReader reader = LineReaderBuilder.builder()
+                .appName("Paper")
+                .terminal(terminal)
+                .completer(new ConsoleCommandCompleter(server))
+                .build();
+        reader.unsetOpt(LineReader.Option.INSERT_TAB);
+
+        TerminalConsoleAppender.setReader(reader);
+
+        try {
+            String line;
+            while (!server.isServerStopped() && server.isServerRunning()) {
+                try {
+                    line = reader.readLine("> ");
+                } catch (EndOfFileException ignored) {
+                    // Continue reading after EOT
+                    continue;
+                }
+
+                if (line == null) {
+                    break;
+                }
+
+                line = line.trim();
+                if (!line.isEmpty()) {
+                    server.addPendingCommand(line, server);
+                }
+            }
+        } catch (UserInterruptException e) {
+            server.initiateShutdown();
+        } finally {
+            TerminalConsoleAppender.setReader(null);
+        }
+
+        return true;
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 2fd8d81..74c7bd5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -39,7 +39,6 @@ import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
-import jline.console.ConsoleReader;
 import joptsimple.OptionSet;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
@@ -73,6 +72,7 @@ import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
+import net.minecraft.util.text.TextFormatting;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.GameType;
 import net.minecraft.world.MinecraftException;
@@ -170,7 +170,7 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IThre
     public OptionSet options;
     public ConsoleCommandSender console;
     public RemoteConsoleCommandSender remoteConsole;
-    public ConsoleReader reader;
+    //public ConsoleReader reader; // Paper
     public static int currentTick = 0; // Paper - Further improve tick loop
     public final Thread primaryThread;
     public Queue<Runnable> processQueue = new ConcurrentLinkedQueue<Runnable>();
@@ -200,6 +200,8 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IThre
         this.dataFixer = p_i35_3_;
         this.options = p_i35_1_;
 
+        // Paper start - Handled by TerminalConsoleAppender
+        /*
         if (System.console() == null && System.getProperty("jline.terminal") == null) {
             System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
             Main.useJline = false;
@@ -219,6 +221,8 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IThre
                 LOGGER.warn((String) null, (Throwable) var10);
             }
         }
+        */
+        // Paper end
 
         Runtime.getRuntime().addShutdownHook(new ServerShutdownThread(this));
         this.serverThread = this.primaryThread = new Thread(this, "Server thread");
@@ -733,7 +737,7 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IThre
                 LOGGER.error("Exception stopping the server", var80);
             } finally {
                 try {
-                    this.reader.getTerminal().restore();
+                    net.minecrell.terminalconsole.TerminalConsoleAppender.close(); // Paper - Use TerminalConsoleAppender
                 } catch (Exception var79) {;
                 }
 
@@ -1127,7 +1131,8 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IThre
     }
 
     public void sendMessage(ITextComponent component) {
-        LOGGER.info(component.getUnformattedText());
+        // Paper - Log message with colors
+        LOGGER.info(org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(component, TextFormatting.WHITE));
     }
 
     public boolean canUseCommand(int permLevel, String commandName) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index a5b6fc5..58c5c07 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -4,11 +4,11 @@ import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintStream;
+
+import java.io.*;
 import java.net.InetAddress;
 import java.net.Proxy;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
@@ -16,7 +16,7 @@ import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Handler;
 import java.util.regex.Pattern;
-import jline.console.ConsoleReader;
+
 import joptsimple.OptionSet;
 import net.minecraft.command.ICommandSender;
 import net.minecraft.crash.CrashReport;
@@ -58,7 +58,6 @@ import org.bukkit.craftbukkit.Main;
 import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender;
 import org.bukkit.craftbukkit.util.ForwardLogHandler;
-import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
 import org.bukkit.event.server.ServerCommandEvent;
@@ -110,17 +109,25 @@ public class DedicatedServer extends MinecraftServer implements IServer {
                 new Thread("Server console handler") {
                     public void run() {
                         if (Main.useConsole) {
-                            ConsoleReader bufferedreader = DedicatedServer.this.reader;
+                            // Paper start - Use TerminalConsoleAppender implementation
+                            if (com.destroystokyo.paper.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+                            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+                            // Paper end
 
                             try {
                                 while (!DedicatedServer.this.isServerStopped() && DedicatedServer.this.isServerRunning()) {
                                     String s;
 
+                                    // Paper start - code is not used for jline
+                                    /*
                                     if (Main.useJline) {
                                         s = bufferedreader.readLine(">", (Character) null);
                                     } else {
                                         s = bufferedreader.readLine();
                                     }
+                                    */
+                                    s = bufferedreader.readLine();
+                                    // Paper end
 
                                     if (s != null && s.trim().length() > 0) {
                                         DedicatedServer.this.addPendingCommand(s, DedicatedServer.this);
@@ -140,6 +147,10 @@ public class DedicatedServer extends MinecraftServer implements IServer {
         }
 
         global.addHandler(new ForwardLogHandler());
+
+        // Paper start - Not needed with TerminalConsoleAppender
+        final org.apache.logging.log4j.Logger logger = LogManager.getRootLogger();
+        /*
         org.apache.logging.log4j.core.Logger logger = (org.apache.logging.log4j.core.Logger) LogManager.getRootLogger();
 
         for (Appender appender : logger.getAppenders().values()) {
@@ -149,6 +160,9 @@ public class DedicatedServer extends MinecraftServer implements IServer {
         }
 
         (new Thread(new TerminalConsoleWriterThread(System.out, this.reader))).start();
+        */
+        // Paper end
+
         System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
         System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.WARN), true));
         thread.setDaemon(true);
diff --git a/src/main/java/net/minecraft/server/management/PlayerList.java b/src/main/java/net/minecraft/server/management/PlayerList.java
index 72f8838..cb88426 100644
--- a/src/main/java/net/minecraft/server/management/PlayerList.java
+++ b/src/main/java/net/minecraft/server/management/PlayerList.java
@@ -81,8 +81,6 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftTravelAgent;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
-import org.bukkit.craftbukkit.command.ColouredConsoleSender;
-import org.bukkit.craftbukkit.command.ConsoleCommandCompleter;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
@@ -128,8 +126,7 @@ public abstract class PlayerList {
 
     public PlayerList(MinecraftServer server) {
         this.cserver = server.server = new CraftServer(server, this);
-        server.console = ColouredConsoleSender.getInstance();
-        server.reader.addCompleter(new ConsoleCommandCompleter(server.server));
+        server.console = new com.destroystokyo.paper.console.TerminalConsoleCommandSender(); // Paper
         this.bannedPlayers = new UserListBans(FILE_PLAYERBANS);
         this.bannedIPs = new UserListIPBans(FILE_IPBANS);
         this.ops = new UserListOps(FILE_OPS);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5dba606..1be4607 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -35,7 +35,6 @@ import java.util.Map.Entry;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.imageio.ImageIO;
-import jline.console.ConsoleReader;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.advancements.AdvancementRewards;
 import net.minecraft.command.CommandBase;
@@ -1197,9 +1196,13 @@ public final class CraftServer implements Server {
         return this.logger;
     }
 
+    // Paper start - JLine update
+    /*
     public ConsoleReader getReader() {
-        return this.console.reader;
+        return console.reader;
     }
+    */
+    // Paper end
 
     public PluginCommand getPluginCommand(String name) {
         Command command = this.commandMap.getCommand(name);
@@ -1934,5 +1937,10 @@ public final class CraftServer implements Server {
         commandMap.registerServerAliases();
         return true;
     }
+
+    @Override
+    public boolean suggestPlayerNamesWhenNullTabCompletions() {
+        return com.destroystokyo.paper.PaperConfig.suggestPlayersWhenNullTabCompletions;
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 556be61..f4edd7c 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -11,12 +11,11 @@ import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import jline.UnsupportedTerminal;
 import joptsimple.OptionException;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import net.minecraft.server.MinecraftServer;
-import org.fusesource.jansi.AnsiConsole;
+import net.minecrell.terminalconsole.TerminalConsoleAppender; // Paper
 
 public class Main {
     public static boolean useJline = true;
@@ -140,6 +139,8 @@ public class Main {
                 }
 
                 try {
+                    // Paper start - Handled by TerminalConsoleAppender
+                    /*
                     String jline_UnsupportedTerminal =
                             new String(
                                     new char[] {
@@ -159,9 +160,18 @@ public class Main {
                     } else {
                         System.setProperty("jline.terminal", UnsupportedTerminal.class.getName());
                     }
+                    */
+
+                    if (options.has("nojline")) {
+                        System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false");
+                        useJline = false;
+                    }
+                    // Paper end
 
                     if (options.has("noconsole")) {
                         useConsole = false;
+                        useJline = false; // Paper
+                        System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false"); // Paper
                     }
 
                     if (Main.class.getPackage().getImplementationVendor() != null
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java b/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
deleted file mode 100644
index f4d8e87..0000000
--- a/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package org.bukkit.craftbukkit.command;
-
-import java.util.EnumMap;
-import java.util.Map;
-import jline.Terminal;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.command.ConsoleCommandSender;
-import org.bukkit.craftbukkit.CraftServer;
-import org.fusesource.jansi.Ansi;
-import org.fusesource.jansi.Ansi.Attribute;
-import org.fusesource.jansi.Ansi.Color;
-
-public class ColouredConsoleSender extends CraftConsoleCommandSender {
-    private final Terminal terminal = ((CraftServer) this.getServer()).getReader().getTerminal();
-    private final Map<ChatColor, String> replacements = new EnumMap<ChatColor, String>(ChatColor.class);
-    private final ChatColor[] colors = ChatColor.values();
-
-    protected ColouredConsoleSender() {
-        this.replacements.put(ChatColor.BLACK, Ansi.ansi().a(Attribute.RESET).fg(Color.BLACK).boldOff().toString());
-        this.replacements.put(ChatColor.DARK_BLUE, Ansi.ansi().a(Attribute.RESET).fg(Color.BLUE).boldOff().toString());
-        this.replacements.put(ChatColor.DARK_GREEN, Ansi.ansi().a(Attribute.RESET).fg(Color.GREEN).boldOff().toString());
-        this.replacements.put(ChatColor.DARK_AQUA, Ansi.ansi().a(Attribute.RESET).fg(Color.CYAN).boldOff().toString());
-        this.replacements.put(ChatColor.DARK_RED, Ansi.ansi().a(Attribute.RESET).fg(Color.RED).boldOff().toString());
-        this.replacements.put(ChatColor.DARK_PURPLE, Ansi.ansi().a(Attribute.RESET).fg(Color.MAGENTA).boldOff().toString());
-        this.replacements.put(ChatColor.GOLD, Ansi.ansi().a(Attribute.RESET).fg(Color.YELLOW).boldOff().toString());
-        this.replacements.put(ChatColor.GRAY, Ansi.ansi().a(Attribute.RESET).fg(Color.WHITE).boldOff().toString());
-        this.replacements.put(ChatColor.DARK_GRAY, Ansi.ansi().a(Attribute.RESET).fg(Color.BLACK).bold().toString());
-        this.replacements.put(ChatColor.BLUE, Ansi.ansi().a(Attribute.RESET).fg(Color.BLUE).bold().toString());
-        this.replacements.put(ChatColor.GREEN, Ansi.ansi().a(Attribute.RESET).fg(Color.GREEN).bold().toString());
-        this.replacements.put(ChatColor.AQUA, Ansi.ansi().a(Attribute.RESET).fg(Color.CYAN).bold().toString());
-        this.replacements.put(ChatColor.RED, Ansi.ansi().a(Attribute.RESET).fg(Color.RED).bold().toString());
-        this.replacements.put(ChatColor.LIGHT_PURPLE, Ansi.ansi().a(Attribute.RESET).fg(Color.MAGENTA).bold().toString());
-        this.replacements.put(ChatColor.YELLOW, Ansi.ansi().a(Attribute.RESET).fg(Color.YELLOW).bold().toString());
-        this.replacements.put(ChatColor.WHITE, Ansi.ansi().a(Attribute.RESET).fg(Color.WHITE).bold().toString());
-        this.replacements.put(ChatColor.MAGIC, Ansi.ansi().a(Attribute.BLINK_SLOW).toString());
-        this.replacements.put(ChatColor.BOLD, Ansi.ansi().a(Attribute.UNDERLINE_DOUBLE).toString());
-        this.replacements.put(ChatColor.STRIKETHROUGH, Ansi.ansi().a(Attribute.STRIKETHROUGH_ON).toString());
-        this.replacements.put(ChatColor.UNDERLINE, Ansi.ansi().a(Attribute.UNDERLINE).toString());
-        this.replacements.put(ChatColor.ITALIC, Ansi.ansi().a(Attribute.ITALIC).toString());
-        this.replacements.put(ChatColor.RESET, Ansi.ansi().a(Attribute.RESET).toString());
-    }
-
-    public void sendMessage(String message) {
-        if (this.terminal.isAnsiSupported()) {
-            if (!this.conversationTracker.isConversingModaly()) {
-                String result = message;
-
-                for (ChatColor color : this.colors) {
-                    if (this.replacements.containsKey(color)) {
-                        result = result.replaceAll("(?i)" + color.toString(), this.replacements.get(color));
-                    } else {
-                        result = result.replaceAll("(?i)" + color.toString(), "");
-                    }
-                }
-
-                System.out.println(result + Ansi.ansi().reset().toString());
-            }
-        } else {
-            super.sendMessage(message);
-        }
-    }
-
-    public static ConsoleCommandSender getInstance() {
-        return (ConsoleCommandSender) (Bukkit.getConsoleSender() != null ? Bukkit.getConsoleSender() : new ColouredConsoleSender());
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
index fec8878..a5e0380 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
@@ -4,46 +4,66 @@ import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.logging.Level;
-import jline.console.completer.Completer;
+// Paper start - JLine update
+import net.minecraft.server.dedicated.DedicatedServer; // Paper
+import org.jline.reader.Candidate;
+import org.jline.reader.Completer;
+import org.jline.reader.LineReader;
+import org.jline.reader.ParsedLine;
+// Paper end
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.TabCompleteEvent;
 
 public class ConsoleCommandCompleter implements Completer {
-    private final CraftServer server;
+    private final DedicatedServer server; // Paper - CraftServer -> DedicatedServer
 
-    public ConsoleCommandCompleter(CraftServer server) {
+    public ConsoleCommandCompleter(DedicatedServer server) { // Paper - CraftServer -> DedicatedServer
         this.server = server;
     }
 
-    public int complete(final String buffer, int cursor, List<CharSequence> candidates) {
+    // Paper start - Change method signature for JLine update
+    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {
+        final CraftServer server = this.server.server;
+        final String buffer = line.line();
+        // Paper end
         Waitable<List<String>> waitable =
                 new Waitable<List<String>>() {
                     protected List<String> evaluate() {
                         List<String> offers =
-                                ConsoleCommandCompleter.this
-                                        .server
+                                server
                                         .getCommandMap()
-                                        .tabComplete(ConsoleCommandCompleter.this.server.getConsoleSender(), buffer);
+                                        .tabComplete(ConsoleCommandCompleter.this.server.console, buffer);
                         TabCompleteEvent tabEvent =
                                 new TabCompleteEvent(
-                                        ConsoleCommandCompleter.this.server.getConsoleSender(),
+                                        ConsoleCommandCompleter.this.server.console,
                                         buffer,
                                         offers == null ? Collections.EMPTY_LIST : offers);
-                        ConsoleCommandCompleter.this.server.getPluginManager().callEvent(tabEvent);
+                        server.getPluginManager().callEvent(tabEvent);
                         return tabEvent.isCancelled() ? Collections.EMPTY_LIST : tabEvent.getCompletions();
                     }
                 };
-        this.server.getServer().processQueue.add(waitable);
+        server.getServer().processQueue.add(waitable); // Paper - Remove "this."
 
         try {
             List<String> offers = (List) waitable.get();
 
             if (offers == null) {
-                return cursor;
+                return; // Paper - Method returns void
             }
 
-            candidates.addAll(offers);
+            // Paper start - JLine update
+            for (String completion : offers) {
+                if (completion.isEmpty()) {
+                    continue;
+                }
+
+                candidates.add(new Candidate(completion));
+            }
+            // Paper end
+
+            // Paper start - JLine handles cursor now
+            /*
             int lastSpace = buffer.lastIndexOf(32);
 
             if (lastSpace == -1) {
@@ -51,12 +71,12 @@ public class ConsoleCommandCompleter implements Completer {
             }
 
             return cursor - (buffer.length() - lastSpace - 1);
+            */
+            // Paper end
         } catch (ExecutionException var7) {
-            this.server.getLogger().log(Level.WARNING, "Unhandled exception when tab completing", (Throwable) var7);
+            server.getLogger().log(Level.WARNING, "Unhandled exception when tab completing", (Throwable) var7);  // Paper - Remove "this."
         } catch (InterruptedException var8) {
             Thread.currentThread().interrupt();
         }
-
-        return cursor;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
index 3fb4be2..d3cb693 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
@@ -19,7 +19,7 @@ public class ServerShutdownThread extends Thread {
             var10.printStackTrace();
         } finally {
             try {
-                this.server.reader.getTerminal().restore();
+                net.minecrell.terminalconsole.TerminalConsoleAppender.close(); // Paper - Use TerminalConsoleAppender
             } catch (Exception var9) {;
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java b/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java
deleted file mode 100644
index 511e209..0000000
--- a/src/main/java/org/bukkit/craftbukkit/util/TerminalConsoleWriterThread.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package org.bukkit.craftbukkit.util;
-
-import com.mojang.util.QueueLogAppender;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import jline.console.ConsoleReader;
-import org.bukkit.craftbukkit.Main;
-import org.fusesource.jansi.Ansi;
-import org.fusesource.jansi.Ansi.Erase;
-
-public class TerminalConsoleWriterThread implements Runnable {
-    private final ConsoleReader reader;
-    private final OutputStream output;
-
-    public TerminalConsoleWriterThread(OutputStream output, ConsoleReader reader) {
-        this.output = output;
-        this.reader = reader;
-    }
-
-    public void run() {
-        while (true) {
-            String message = QueueLogAppender.getNextLogEvent("TerminalConsole");
-
-            if (message != null) {
-                try {
-                    if (Main.useJline) {
-                        this.reader.print(Ansi.ansi().eraseLine(Erase.ALL).toString() + '\r');
-                        this.reader.flush();
-                        this.output.write(message.getBytes());
-                        this.output.flush();
-
-                        try {
-                            this.reader.drawLine();
-                        } catch (Throwable var3) {
-                            this.reader.getCursorBuffer().clear();
-                        }
-
-                        this.reader.flush();
-                    } else {
-                        this.output.write(message.getBytes());
-                        this.output.flush();
-                    }
-                } catch (IOException var4) {
-                    Logger.getLogger(TerminalConsoleWriterThread.class.getName()).log(Level.SEVERE, (String) null, (Throwable) var4);
-                }
-            }
-        }
-    }
-}
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 5cee8f0..08b6bb7 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -1,12 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<Configuration status="WARN" packages="com.mojang.util">
+<Configuration status="WARN">
     <Appenders>
-        <Console name="WINDOWS_COMPAT" target="SYSTEM_OUT"></Console>
-        <Queue name="TerminalConsole">
-            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
-        </Queue>
+        <TerminalConsole name="TerminalConsole">
+            <PatternLayout pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" />
+        </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
-            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %msg%n" />
+            <PatternLayout pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n" />
             <Policies>
                 <TimeBasedTriggeringPolicy />
                 <OnStartupTriggeringPolicy />
@@ -19,7 +18,6 @@
             <filters>
                 <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
             </filters>
-            <AppenderRef ref="WINDOWS_COMPAT" level="info"/>
             <AppenderRef ref="File"/>
             <AppenderRef ref="TerminalConsole" level="info"/>
         </Root>
-- 
2.18.0

